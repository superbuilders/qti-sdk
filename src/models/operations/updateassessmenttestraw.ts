/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAssessmentTestRawRequest = {
  /**
   * Assessment test identifier to update
   */
  identifier: string;
  /**
   * The assessment test to update
   */
  requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const UpdateAssessmentTestRawNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type UpdateAssessmentTestRawNavigationMode = ClosedEnum<
  typeof UpdateAssessmentTestRawNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const UpdateAssessmentTestRawSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type UpdateAssessmentTestRawSubmissionMode = ClosedEnum<
  typeof UpdateAssessmentTestRawSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type UpdateAssessmentTestRawQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type UpdateAssessmentTestRawQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<UpdateAssessmentTestRawQtiAssessmentItemRef>
    | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type UpdateAssessmentTestRawQtiTestPartResponse = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: UpdateAssessmentTestRawNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: UpdateAssessmentTestRawSubmissionMode;
  qtiAssessmentSection: Array<UpdateAssessmentTestRawQtiAssessmentSection>;
};

/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export const UpdateAssessmentTestRawCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export type UpdateAssessmentTestRawCardinality = ClosedEnum<
  typeof UpdateAssessmentTestRawCardinality
>;

/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export const UpdateAssessmentTestRawBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export type UpdateAssessmentTestRawBaseType = ClosedEnum<
  typeof UpdateAssessmentTestRawBaseType
>;

/**
 * Optional default value configuration for outcome variables
 */
export type UpdateAssessmentTestRawDefaultValue = {
  /**
   * The default value to assign to the outcome variable
   */
  value?: any | undefined;
};

export type UpdateAssessmentTestRawQtiOutcomeDeclarationResponse = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
   */
  cardinality?: UpdateAssessmentTestRawCardinality | undefined;
  /**
   * Data type of the outcome variable, determining how values are stored and processed
   */
  baseType: UpdateAssessmentTestRawBaseType;
  /**
   * Expected maximum value for this outcome variable in normal circumstances
   */
  normalMaximum?: number | undefined;
  /**
   * Expected minimum value for this outcome variable in normal circumstances
   */
  normalMinimum?: number | undefined;
  /**
   * Optional default value configuration for outcome variables
   */
  defaultValue?: UpdateAssessmentTestRawDefaultValue | undefined;
};

export type UpdateAssessmentTestRawAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  toolName: string;
  toolVersion: string;
};

export type UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type UpdateAssessmentTestRawQtiDefaultValue = {
  qtiValue?: any | undefined;
};

export type UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration = {
  attributes: UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes;
  qtiDefaultValue?: UpdateAssessmentTestRawQtiDefaultValue | undefined;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
};

export type UpdateAssessmentTestRawQtiTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type UpdateAssessmentTestRawQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
};

export type UpdateAssessmentTestRawQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef = {
  attributes: UpdateAssessmentTestRawQtiAssessmentItemRefAttributes;
};

export type UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection = {
  attributes: UpdateAssessmentTestRawQtiAssessmentSectionAttributes;
  qtiAssessmentItemRef?:
    | Array<UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

export type UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart = {
  attributes: UpdateAssessmentTestRawQtiTestPartAttributes;
  qtiAssessmentSection: Array<
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection
  >;
};

export type UpdateAssessmentTestRawQtiAssessmentTest = {
  attributes: UpdateAssessmentTestRawAttributes;
  qtiOutcomeDeclaration: Array<
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration
  >;
  qtiTestPart: Array<UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart>;
};

/**
 * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
 */
export type UpdateAssessmentTestRawContent = {
  qtiAssessmentTest: UpdateAssessmentTestRawQtiAssessmentTest;
};

/**
 * Complete assessment test data including all test parts, sections, items, and configuration settings
 */
export type UpdateAssessmentTestRawResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Version of the specification used for this assessment test
   */
  qtiVersion?: string | undefined;
  qtiTestPart: Array<UpdateAssessmentTestRawQtiTestPartResponse>;
  /**
   * Array of outcome variable declarations for storing assessment results and computed values
   */
  qtiOutcomeDeclaration: Array<
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse
  >;
  /**
   * Time limit for the entire assessment test in seconds. When not specified, there is no time limit
   */
  timeLimit?: number | undefined;
  /**
   * Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
   */
  maxAttempts?: number | undefined;
  /**
   * Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
   */
  toolsEnabled?: { [k: string]: boolean } | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
   */
  content: UpdateAssessmentTestRawContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
  /**
   * Indicates whether the generated XML is valid according to schema validation
   */
  isValidXml: boolean;
};

/** @internal */
export const UpdateAssessmentTestRawRequest$inboundSchema: z.ZodType<
  UpdateAssessmentTestRawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  RequestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAssessmentTestRawRequest$Outbound = {
  identifier: string;
  RequestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const UpdateAssessmentTestRawRequest$outboundSchema: z.ZodType<
  UpdateAssessmentTestRawRequest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRawRequest
> = z.object({
  identifier: z.string(),
  requestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawRequest$ {
  /** @deprecated use `UpdateAssessmentTestRawRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestRawRequest$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestRawRequest$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawRequest$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawRequest$Outbound;
}

export function updateAssessmentTestRawRequestToJSON(
  updateAssessmentTestRawRequest: UpdateAssessmentTestRawRequest,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawRequest$outboundSchema.parse(
      updateAssessmentTestRawRequest,
    ),
  );
}

export function updateAssessmentTestRawRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestRawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestRawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawNavigationMode$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestRawNavigationMode> = z.nativeEnum(
    UpdateAssessmentTestRawNavigationMode,
  );

/** @internal */
export const UpdateAssessmentTestRawNavigationMode$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestRawNavigationMode> =
    UpdateAssessmentTestRawNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawNavigationMode$ {
  /** @deprecated use `UpdateAssessmentTestRawNavigationMode$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawNavigationMode$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawNavigationMode$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestRawSubmissionMode$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestRawSubmissionMode> = z.nativeEnum(
    UpdateAssessmentTestRawSubmissionMode,
  );

/** @internal */
export const UpdateAssessmentTestRawSubmissionMode$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestRawSubmissionMode> =
    UpdateAssessmentTestRawSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawSubmissionMode$ {
  /** @deprecated use `UpdateAssessmentTestRawSubmissionMode$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawSubmissionMode$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawSubmissionMode$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentItemRef
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentItemRef$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawQtiAssessmentItemRef$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentItemRefToJSON(
  updateAssessmentTestRawQtiAssessmentItemRef:
    UpdateAssessmentTestRawQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentItemRef$outboundSchema.parse(
      updateAssessmentTestRawQtiAssessmentItemRef,
    ),
  );
}

export function updateAssessmentTestRawQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentItemRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentSection$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _id: z.string(),
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    "qti-assessment-item-ref": z.array(
      z.lazy(() => UpdateAssessmentTestRawQtiAssessmentItemRef$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<UpdateAssessmentTestRawQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentSection$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentSection
  > = z.object({
    id: z.string(),
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    qtiAssessmentItemRef: z.array(
      z.lazy(() => UpdateAssessmentTestRawQtiAssessmentItemRef$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentSection$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentSection$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentSection$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentSection$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawQtiAssessmentSection$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentSectionToJSON(
  updateAssessmentTestRawQtiAssessmentSection:
    UpdateAssessmentTestRawQtiAssessmentSection,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentSection$outboundSchema.parse(
      updateAssessmentTestRawQtiAssessmentSection,
    ),
  );
}

export function updateAssessmentTestRawQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentSection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiTestPartResponse$inboundSchema:
  z.ZodType<UpdateAssessmentTestRawQtiTestPartResponse, z.ZodTypeDef, unknown> =
    z.object({
      identifier: z.string(),
      navigationMode: UpdateAssessmentTestRawNavigationMode$inboundSchema,
      submissionMode: UpdateAssessmentTestRawSubmissionMode$inboundSchema,
      "qti-assessment-section": z.array(
        z.lazy(() => UpdateAssessmentTestRawQtiAssessmentSection$inboundSchema),
      ),
    }).transform((v) => {
      return remap$(v, {
        "qti-assessment-section": "qtiAssessmentSection",
      });
    });

/** @internal */
export type UpdateAssessmentTestRawQtiTestPartResponse$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<
    UpdateAssessmentTestRawQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestRawQtiTestPartResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiTestPartResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiTestPartResponse
  > = z.object({
    identifier: z.string(),
    navigationMode: UpdateAssessmentTestRawNavigationMode$outboundSchema,
    submissionMode: UpdateAssessmentTestRawSubmissionMode$outboundSchema,
    qtiAssessmentSection: z.array(
      z.lazy(() => UpdateAssessmentTestRawQtiAssessmentSection$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiTestPartResponse$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiTestPartResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiTestPartResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiTestPartResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiTestPartResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiTestPartResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawQtiTestPartResponse$Outbound;
}

export function updateAssessmentTestRawQtiTestPartResponseToJSON(
  updateAssessmentTestRawQtiTestPartResponse:
    UpdateAssessmentTestRawQtiTestPartResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiTestPartResponse$outboundSchema.parse(
      updateAssessmentTestRawQtiTestPartResponse,
    ),
  );
}

export function updateAssessmentTestRawQtiTestPartResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiTestPartResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiTestPartResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiTestPartResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawCardinality$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestRawCardinality
> = z.nativeEnum(UpdateAssessmentTestRawCardinality);

/** @internal */
export const UpdateAssessmentTestRawCardinality$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestRawCardinality
> = UpdateAssessmentTestRawCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawCardinality$ {
  /** @deprecated use `UpdateAssessmentTestRawCardinality$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestRawCardinality$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawCardinality$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawCardinality$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestRawBaseType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestRawBaseType
> = z.nativeEnum(UpdateAssessmentTestRawBaseType);

/** @internal */
export const UpdateAssessmentTestRawBaseType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestRawBaseType
> = UpdateAssessmentTestRawBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawBaseType$ {
  /** @deprecated use `UpdateAssessmentTestRawBaseType$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestRawBaseType$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawBaseType$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestRawBaseType$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestRawDefaultValue$inboundSchema: z.ZodType<
  UpdateAssessmentTestRawDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
});

/** @internal */
export type UpdateAssessmentTestRawDefaultValue$Outbound = {
  value?: any | undefined;
};

/** @internal */
export const UpdateAssessmentTestRawDefaultValue$outboundSchema: z.ZodType<
  UpdateAssessmentTestRawDefaultValue$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRawDefaultValue
> = z.object({
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawDefaultValue$ {
  /** @deprecated use `UpdateAssessmentTestRawDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawDefaultValue$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawDefaultValue$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawDefaultValue$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawDefaultValue$Outbound;
}

export function updateAssessmentTestRawDefaultValueToJSON(
  updateAssessmentTestRawDefaultValue: UpdateAssessmentTestRawDefaultValue,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawDefaultValue$outboundSchema.parse(
      updateAssessmentTestRawDefaultValue,
    ),
  );
}

export function updateAssessmentTestRawDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestRawDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawDefaultValue' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: UpdateAssessmentTestRawCardinality$inboundSchema.default(
      "single",
    ),
    baseType: UpdateAssessmentTestRawBaseType$inboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() =>
      UpdateAssessmentTestRawDefaultValue$inboundSchema
    ).optional(),
  });

/** @internal */
export type UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
  defaultValue?: UpdateAssessmentTestRawDefaultValue$Outbound | undefined;
};

/** @internal */
export const UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse
  > = z.object({
    identifier: z.string(),
    cardinality: UpdateAssessmentTestRawCardinality$outboundSchema.default(
      "single",
    ),
    baseType: UpdateAssessmentTestRawBaseType$outboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() =>
      UpdateAssessmentTestRawDefaultValue$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound;
}

export function updateAssessmentTestRawQtiOutcomeDeclarationResponseToJSON(
  updateAssessmentTestRawQtiOutcomeDeclarationResponse:
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema.parse(
      updateAssessmentTestRawQtiOutcomeDeclarationResponse,
    ),
  );
}

export function updateAssessmentTestRawQtiOutcomeDeclarationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiOutcomeDeclarationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiOutcomeDeclarationResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawAttributes$inboundSchema: z.ZodType<
  UpdateAssessmentTestRawAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  "tool-name": z.string(),
  "tool-version": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "tool-name": "toolName",
    "tool-version": "toolVersion",
  });
});

/** @internal */
export type UpdateAssessmentTestRawAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  "tool-name": string;
  "tool-version": string;
};

/** @internal */
export const UpdateAssessmentTestRawAttributes$outboundSchema: z.ZodType<
  UpdateAssessmentTestRawAttributes$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRawAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  toolName: z.string(),
  toolVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    toolName: "tool-name",
    toolVersion: "tool-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawAttributes$ {
  /** @deprecated use `UpdateAssessmentTestRawAttributes$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestRawAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawAttributes$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawAttributes$Outbound;
}

export function updateAssessmentTestRawAttributesToJSON(
  updateAssessmentTestRawAttributes: UpdateAssessmentTestRawAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawAttributes$outboundSchema.parse(
      updateAssessmentTestRawAttributes,
    ),
  );
}

export function updateAssessmentTestRawAttributesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestRawAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestRawAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    "base-type": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "base-type": "baseType",
    });
  });

/** @internal */
export type UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  "base-type": string;
};

/** @internal */
export const UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      baseType: "base-type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound;
}

export function updateAssessmentTestRawQtiOutcomeDeclarationAttributesToJSON(
  updateAssessmentTestRawQtiOutcomeDeclarationAttributes:
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      updateAssessmentTestRawQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function updateAssessmentTestRawQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiDefaultValue$inboundSchema: z.ZodType<
  UpdateAssessmentTestRawQtiDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type UpdateAssessmentTestRawQtiDefaultValue$Outbound = {
  "qti-value"?: any | undefined;
};

/** @internal */
export const UpdateAssessmentTestRawQtiDefaultValue$outboundSchema: z.ZodType<
  UpdateAssessmentTestRawQtiDefaultValue$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRawQtiDefaultValue
> = z.object({
  qtiValue: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiDefaultValue$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiDefaultValue$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiDefaultValue$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiDefaultValue$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawQtiDefaultValue$Outbound;
}

export function updateAssessmentTestRawQtiDefaultValueToJSON(
  updateAssessmentTestRawQtiDefaultValue:
    UpdateAssessmentTestRawQtiDefaultValue,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiDefaultValue$outboundSchema.parse(
      updateAssessmentTestRawQtiDefaultValue,
    ),
  );
}

export function updateAssessmentTestRawQtiDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestRawQtiDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawQtiDefaultValue' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema
    ),
    "qti-default-value": z.lazy(() =>
      UpdateAssessmentTestRawQtiDefaultValue$inboundSchema
    ).optional(),
    "normal-maximum": z.number().optional(),
    "normal-minimum": z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-default-value": "qtiDefaultValue",
      "normal-maximum": "normalMaximum",
      "normal-minimum": "normalMinimum",
    });
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound =
  {
    _attributes:
      UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound;
    "qti-default-value"?:
      | UpdateAssessmentTestRawQtiDefaultValue$Outbound
      | undefined;
    "normal-maximum"?: number | undefined;
    "normal-minimum"?: number | undefined;
  };

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema
    ),
    qtiDefaultValue: z.lazy(() =>
      UpdateAssessmentTestRawQtiDefaultValue$outboundSchema
    ).optional(),
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiDefaultValue: "qti-default-value",
      normalMaximum: "normal-maximum",
      normalMinimum: "normal-minimum",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclarationToJSON(
  updateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration:
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      .parse(updateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration),
  );
}

export function updateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiTestPartAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiTestPartAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    "navigation-mode": z.string(),
    "submission-mode": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "navigation-mode": "navigationMode",
      "submission-mode": "submissionMode",
    });
  });

/** @internal */
export type UpdateAssessmentTestRawQtiTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const UpdateAssessmentTestRawQtiTestPartAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiTestPartAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiTestPartAttributes
  > = z.object({
    identifier: z.string(),
    navigationMode: z.string(),
    submissionMode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      navigationMode: "navigation-mode",
      submissionMode: "submission-mode",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiTestPartAttributes$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiTestPartAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiTestPartAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiTestPartAttributes$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawQtiTestPartAttributes$Outbound;
}

export function updateAssessmentTestRawQtiTestPartAttributesToJSON(
  updateAssessmentTestRawQtiTestPartAttributes:
    UpdateAssessmentTestRawQtiTestPartAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiTestPartAttributes$outboundSchema.parse(
      updateAssessmentTestRawQtiTestPartAttributes,
    ),
  );
}

export function updateAssessmentTestRawQtiTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiTestPartAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiTestPartAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound = {
  identifier: string;
  title: string;
  visible: string;
};

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentSectionAttributes$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentSectionAttributesToJSON(
  updateAssessmentTestRawQtiAssessmentSectionAttributes:
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema.parse(
      updateAssessmentTestRawQtiAssessmentSectionAttributes,
    ),
  );
}

export function updateAssessmentTestRawQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound = {
  identifier: string;
  href: string;
};

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentItemRefAttributesToJSON(
  updateAssessmentTestRawQtiAssessmentItemRefAttributes:
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema.parse(
      updateAssessmentTestRawQtiAssessmentItemRefAttributes,
    ),
  );
}

export function updateAssessmentTestRawQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound =
  {
    _attributes: UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound;
  };

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRefToJSON(
  updateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef:
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      .parse(updateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef),
  );
}

export function updateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema
    ),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound =
  {
    _attributes: UpdateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound;
    "qti-assessment-item-ref"?:
      | Array<
        UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound
      >
      | undefined;
  };

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema
    ),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentTestQtiAssessmentSectionToJSON(
  updateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection:
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema
      .parse(updateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection),
  );
}

export function updateAssessmentTestRawQtiAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiTestPartAttributes$inboundSchema
    ),
    "qti-assessment-section": z.array(
      z.lazy(() =>
        UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-section": "qtiAssessmentSection",
    });
  });

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound = {
  _attributes: UpdateAssessmentTestRawQtiTestPartAttributes$Outbound;
  "qti-assessment-section": Array<
    UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestRawQtiTestPartAttributes$outboundSchema
    ),
    qtiAssessmentSection: z.array(
      z.lazy(() =>
        UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentTestQtiTestPartToJSON(
  updateAssessmentTestRawQtiAssessmentTestQtiTestPart:
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema.parse(
      updateAssessmentTestRawQtiAssessmentTestQtiTestPart,
    ),
  );
}

export function updateAssessmentTestRawQtiAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTest$inboundSchema: z.ZodType<
  UpdateAssessmentTestRawQtiAssessmentTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => UpdateAssessmentTestRawAttributes$inboundSchema),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
    ),
  ),
  "qti-test-part": z.array(
    z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-test-part": "qtiTestPart",
  });
});

/** @internal */
export type UpdateAssessmentTestRawQtiAssessmentTest$Outbound = {
  _attributes: UpdateAssessmentTestRawAttributes$Outbound;
  "qti-outcome-declaration": Array<
    UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  "qti-test-part": Array<
    UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestRawQtiAssessmentTest$outboundSchema: z.ZodType<
  UpdateAssessmentTestRawQtiAssessmentTest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRawQtiAssessmentTest
> = z.object({
  attributes: z.lazy(() => UpdateAssessmentTestRawAttributes$outboundSchema),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
    ),
  ),
  qtiTestPart: z.array(
    z.lazy(() =>
      UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiTestPart: "qti-test-part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawQtiAssessmentTest$ {
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTest$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestRawQtiAssessmentTest$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawQtiAssessmentTest$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawQtiAssessmentTest$Outbound;
}

export function updateAssessmentTestRawQtiAssessmentTestToJSON(
  updateAssessmentTestRawQtiAssessmentTest:
    UpdateAssessmentTestRawQtiAssessmentTest,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawQtiAssessmentTest$outboundSchema.parse(
      updateAssessmentTestRawQtiAssessmentTest,
    ),
  );
}

export function updateAssessmentTestRawQtiAssessmentTestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestRawQtiAssessmentTest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestRawQtiAssessmentTest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestRawQtiAssessmentTest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawContent$inboundSchema: z.ZodType<
  UpdateAssessmentTestRawContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-test": z.lazy(() =>
    UpdateAssessmentTestRawQtiAssessmentTest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-test": "qtiAssessmentTest",
  });
});

/** @internal */
export type UpdateAssessmentTestRawContent$Outbound = {
  "qti-assessment-test": UpdateAssessmentTestRawQtiAssessmentTest$Outbound;
};

/** @internal */
export const UpdateAssessmentTestRawContent$outboundSchema: z.ZodType<
  UpdateAssessmentTestRawContent$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRawContent
> = z.object({
  qtiAssessmentTest: z.lazy(() =>
    UpdateAssessmentTestRawQtiAssessmentTest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentTest: "qti-assessment-test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawContent$ {
  /** @deprecated use `UpdateAssessmentTestRawContent$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestRawContent$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawContent$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestRawContent$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawContent$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawContent$Outbound;
}

export function updateAssessmentTestRawContentToJSON(
  updateAssessmentTestRawContent: UpdateAssessmentTestRawContent,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawContent$outboundSchema.parse(
      updateAssessmentTestRawContent,
    ),
  );
}

export function updateAssessmentTestRawContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestRawContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestRawContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawContent' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestRawResponse$inboundSchema: z.ZodType<
  UpdateAssessmentTestRawResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  "qti-test-part": z.array(
    z.lazy(() => UpdateAssessmentTestRawQtiTestPartResponse$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema
    ),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentTestRawContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-test-part": "qtiTestPart",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "__v": "v",
  });
});

/** @internal */
export type UpdateAssessmentTestRawResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  qtiVersion: string;
  "qti-test-part": Array<UpdateAssessmentTestRawQtiTestPartResponse$Outbound>;
  "qti-outcome-declaration": Array<
    UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound
  >;
  timeLimit?: number | undefined;
  maxAttempts?: number | undefined;
  toolsEnabled?: { [k: string]: boolean } | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: UpdateAssessmentTestRawContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
  isValidXml: boolean;
};

/** @internal */
export const UpdateAssessmentTestRawResponse$outboundSchema: z.ZodType<
  UpdateAssessmentTestRawResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRawResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  qtiTestPart: z.array(
    z.lazy(() => UpdateAssessmentTestRawQtiTestPartResponse$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      UpdateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema
    ),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentTestRawContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiTestPart: "qti-test-part",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRawResponse$ {
  /** @deprecated use `UpdateAssessmentTestRawResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestRawResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestRawResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRawResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRawResponse$Outbound;
}

export function updateAssessmentTestRawResponseToJSON(
  updateAssessmentTestRawResponse: UpdateAssessmentTestRawResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRawResponse$outboundSchema.parse(
      updateAssessmentTestRawResponse,
    ),
  );
}

export function updateAssessmentTestRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestRawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestRawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRawResponse' from JSON`,
  );
}
