/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const CreateAssessmentTestNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type CreateAssessmentTestNavigationMode = ClosedEnum<
  typeof CreateAssessmentTestNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const CreateAssessmentTestSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type CreateAssessmentTestSubmissionMode = ClosedEnum<
  typeof CreateAssessmentTestSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type CreateAssessmentTestQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type CreateAssessmentTestQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<CreateAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type CreateAssessmentTestQtiTestPart = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: CreateAssessmentTestNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: CreateAssessmentTestSubmissionMode;
  qtiAssessmentSection: Array<CreateAssessmentTestQtiAssessmentSection>;
};

/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export const CreateAssessmentTestCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export type CreateAssessmentTestCardinality = ClosedEnum<
  typeof CreateAssessmentTestCardinality
>;

/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export const CreateAssessmentTestBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export type CreateAssessmentTestBaseType = ClosedEnum<
  typeof CreateAssessmentTestBaseType
>;

/**
 * Optional default value configuration for outcome variables
 */
export type CreateAssessmentTestDefaultValue = {
  /**
   * The default value to assign to the outcome variable
   */
  value?: any | undefined;
};

export type CreateAssessmentTestQtiOutcomeDeclaration = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
   */
  cardinality?: CreateAssessmentTestCardinality | undefined;
  /**
   * Data type of the outcome variable, determining how values are stored and processed
   */
  baseType: CreateAssessmentTestBaseType;
  /**
   * Expected maximum value for this outcome variable in normal circumstances
   */
  normalMaximum?: number | undefined;
  /**
   * Expected minimum value for this outcome variable in normal circumstances
   */
  normalMinimum?: number | undefined;
  /**
   * Optional default value configuration for outcome variables
   */
  defaultValue?: CreateAssessmentTestDefaultValue | undefined;
};

export type CreateAssessmentTestAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  toolName: string;
  toolVersion: string;
};

export type CreateAssessmentTestQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type CreateAssessmentTestQtiDefaultValue = {
  qtiValue?: any | undefined;
};

export type CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration = {
  attributes: CreateAssessmentTestQtiOutcomeDeclarationAttributes;
  qtiDefaultValue?: CreateAssessmentTestQtiDefaultValue | undefined;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
};

export type CreateAssessmentTestQtiTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type CreateAssessmentTestQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
};

export type CreateAssessmentTestQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef = {
  attributes: CreateAssessmentTestQtiAssessmentItemRefAttributes;
};

export type CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection = {
  attributes: CreateAssessmentTestQtiAssessmentSectionAttributes;
  qtiAssessmentItemRef?:
    | Array<CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

export type CreateAssessmentTestQtiAssessmentTestQtiTestPart = {
  attributes: CreateAssessmentTestQtiTestPartAttributes;
  qtiAssessmentSection: Array<
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection
  >;
};

export type CreateAssessmentTestQtiAssessmentTest = {
  attributes: CreateAssessmentTestAttributes;
  qtiOutcomeDeclaration: Array<
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration
  >;
  qtiTestPart: Array<CreateAssessmentTestQtiAssessmentTestQtiTestPart>;
};

/**
 * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
 */
export type CreateAssessmentTestContent = {
  qtiAssessmentTest: CreateAssessmentTestQtiAssessmentTest;
};

/**
 * Complete assessment test data including all test parts, sections, items, and configuration settings
 */
export type CreateAssessmentTestResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Version of the specification used for this assessment test
   */
  qtiVersion?: string | undefined;
  qtiTestPart: Array<CreateAssessmentTestQtiTestPart>;
  /**
   * Array of outcome variable declarations for storing assessment results and computed values
   */
  qtiOutcomeDeclaration: Array<CreateAssessmentTestQtiOutcomeDeclaration>;
  /**
   * Time limit for the entire assessment test in seconds. When not specified, there is no time limit
   */
  timeLimit?: number | undefined;
  /**
   * Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
   */
  maxAttempts?: number | undefined;
  /**
   * Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
   */
  toolsEnabled?: { [k: string]: boolean } | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
   */
  content: CreateAssessmentTestContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
  /**
   * Indicates whether the generated XML is valid according to schema validation
   */
  isValidXml: boolean;
};

/** @internal */
export const CreateAssessmentTestNavigationMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestNavigationMode
> = z.nativeEnum(CreateAssessmentTestNavigationMode);

/** @internal */
export const CreateAssessmentTestNavigationMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestNavigationMode
> = CreateAssessmentTestNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestNavigationMode$ {
  /** @deprecated use `CreateAssessmentTestNavigationMode$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestNavigationMode$inboundSchema;
  /** @deprecated use `CreateAssessmentTestNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestNavigationMode$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestSubmissionMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestSubmissionMode
> = z.nativeEnum(CreateAssessmentTestSubmissionMode);

/** @internal */
export const CreateAssessmentTestSubmissionMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestSubmissionMode
> = CreateAssessmentTestSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestSubmissionMode$ {
  /** @deprecated use `CreateAssessmentTestSubmissionMode$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestSubmissionMode$inboundSchema;
  /** @deprecated use `CreateAssessmentTestSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestSubmissionMode$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentItemRef$inboundSchema: z.ZodType<
  CreateAssessmentTestQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type CreateAssessmentTestQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const CreateAssessmentTestQtiAssessmentItemRef$outboundSchema: z.ZodType<
  CreateAssessmentTestQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = CreateAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function createAssessmentTestQtiAssessmentItemRefToJSON(
  createAssessmentTestQtiAssessmentItemRef:
    CreateAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentItemRef$outboundSchema.parse(
      createAssessmentTestQtiAssessmentItemRef,
    ),
  );
}

export function createAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentItemRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentSection$inboundSchema: z.ZodType<
  CreateAssessmentTestQtiAssessmentSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => CreateAssessmentTestQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type CreateAssessmentTestQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<CreateAssessmentTestQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const CreateAssessmentTestQtiAssessmentSection$outboundSchema: z.ZodType<
  CreateAssessmentTestQtiAssessmentSection$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestQtiAssessmentSection
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => CreateAssessmentTestQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound = CreateAssessmentTestQtiAssessmentSection$Outbound;
}

export function createAssessmentTestQtiAssessmentSectionToJSON(
  createAssessmentTestQtiAssessmentSection:
    CreateAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentSection$outboundSchema.parse(
      createAssessmentTestQtiAssessmentSection,
    ),
  );
}

export function createAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentSection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiTestPart$inboundSchema: z.ZodType<
  CreateAssessmentTestQtiTestPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: CreateAssessmentTestNavigationMode$inboundSchema,
  submissionMode: CreateAssessmentTestSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(
    z.lazy(() => CreateAssessmentTestQtiAssessmentSection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type CreateAssessmentTestQtiTestPart$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<
    CreateAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const CreateAssessmentTestQtiTestPart$outboundSchema: z.ZodType<
  CreateAssessmentTestQtiTestPart$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestQtiTestPart
> = z.object({
  identifier: z.string(),
  navigationMode: CreateAssessmentTestNavigationMode$outboundSchema,
  submissionMode: CreateAssessmentTestSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(
    z.lazy(() => CreateAssessmentTestQtiAssessmentSection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiTestPart$ {
  /** @deprecated use `CreateAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound = CreateAssessmentTestQtiTestPart$Outbound;
}

export function createAssessmentTestQtiTestPartToJSON(
  createAssessmentTestQtiTestPart: CreateAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiTestPart$outboundSchema.parse(
      createAssessmentTestQtiTestPart,
    ),
  );
}

export function createAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestQtiTestPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestQtiTestPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestCardinality$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestCardinality
> = z.nativeEnum(CreateAssessmentTestCardinality);

/** @internal */
export const CreateAssessmentTestCardinality$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestCardinality
> = CreateAssessmentTestCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestCardinality$ {
  /** @deprecated use `CreateAssessmentTestCardinality$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestCardinality$inboundSchema;
  /** @deprecated use `CreateAssessmentTestCardinality$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestCardinality$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestBaseType$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestBaseType
> = z.nativeEnum(CreateAssessmentTestBaseType);

/** @internal */
export const CreateAssessmentTestBaseType$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestBaseType
> = CreateAssessmentTestBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestBaseType$ {
  /** @deprecated use `CreateAssessmentTestBaseType$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestBaseType$inboundSchema;
  /** @deprecated use `CreateAssessmentTestBaseType$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestBaseType$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestDefaultValue$inboundSchema: z.ZodType<
  CreateAssessmentTestDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
});

/** @internal */
export type CreateAssessmentTestDefaultValue$Outbound = {
  value?: any | undefined;
};

/** @internal */
export const CreateAssessmentTestDefaultValue$outboundSchema: z.ZodType<
  CreateAssessmentTestDefaultValue$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestDefaultValue
> = z.object({
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestDefaultValue$ {
  /** @deprecated use `CreateAssessmentTestDefaultValue$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestDefaultValue$inboundSchema;
  /** @deprecated use `CreateAssessmentTestDefaultValue$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestDefaultValue$outboundSchema;
  /** @deprecated use `CreateAssessmentTestDefaultValue$Outbound` instead. */
  export type Outbound = CreateAssessmentTestDefaultValue$Outbound;
}

export function createAssessmentTestDefaultValueToJSON(
  createAssessmentTestDefaultValue: CreateAssessmentTestDefaultValue,
): string {
  return JSON.stringify(
    CreateAssessmentTestDefaultValue$outboundSchema.parse(
      createAssessmentTestDefaultValue,
    ),
  );
}

export function createAssessmentTestDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestDefaultValue' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiOutcomeDeclaration$inboundSchema: z.ZodType<
  CreateAssessmentTestQtiOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: CreateAssessmentTestCardinality$inboundSchema.default("single"),
  baseType: CreateAssessmentTestBaseType$inboundSchema,
  normalMaximum: z.number().optional(),
  normalMinimum: z.number().optional(),
  defaultValue: z.lazy(() => CreateAssessmentTestDefaultValue$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateAssessmentTestQtiOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
  defaultValue?: CreateAssessmentTestDefaultValue$Outbound | undefined;
};

/** @internal */
export const CreateAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    identifier: z.string(),
    cardinality: CreateAssessmentTestCardinality$outboundSchema.default(
      "single",
    ),
    baseType: CreateAssessmentTestBaseType$outboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() => CreateAssessmentTestDefaultValue$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `CreateAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = CreateAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function createAssessmentTestQtiOutcomeDeclarationToJSON(
  createAssessmentTestQtiOutcomeDeclaration:
    CreateAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiOutcomeDeclaration$outboundSchema.parse(
      createAssessmentTestQtiOutcomeDeclaration,
    ),
  );
}

export function createAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiOutcomeDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestAttributes$inboundSchema: z.ZodType<
  CreateAssessmentTestAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  "tool-name": z.string(),
  "tool-version": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "tool-name": "toolName",
    "tool-version": "toolVersion",
  });
});

/** @internal */
export type CreateAssessmentTestAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  "tool-name": string;
  "tool-version": string;
};

/** @internal */
export const CreateAssessmentTestAttributes$outboundSchema: z.ZodType<
  CreateAssessmentTestAttributes$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  toolName: z.string(),
  toolVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    toolName: "tool-name",
    toolVersion: "tool-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestAttributes$ {
  /** @deprecated use `CreateAssessmentTestAttributes$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestAttributes$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestAttributes$Outbound` instead. */
  export type Outbound = CreateAssessmentTestAttributes$Outbound;
}

export function createAssessmentTestAttributesToJSON(
  createAssessmentTestAttributes: CreateAssessmentTestAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestAttributes$outboundSchema.parse(
      createAssessmentTestAttributes,
    ),
  );
}

export function createAssessmentTestAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    "base-type": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "base-type": "baseType",
    });
  });

/** @internal */
export type CreateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  "base-type": string;
};

/** @internal */
export const CreateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      baseType: "base-type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `CreateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound;
}

export function createAssessmentTestQtiOutcomeDeclarationAttributesToJSON(
  createAssessmentTestQtiOutcomeDeclarationAttributes:
    CreateAssessmentTestQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      createAssessmentTestQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function createAssessmentTestQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiDefaultValue$inboundSchema: z.ZodType<
  CreateAssessmentTestQtiDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type CreateAssessmentTestQtiDefaultValue$Outbound = {
  "qti-value"?: any | undefined;
};

/** @internal */
export const CreateAssessmentTestQtiDefaultValue$outboundSchema: z.ZodType<
  CreateAssessmentTestQtiDefaultValue$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestQtiDefaultValue
> = z.object({
  qtiValue: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiDefaultValue$ {
  /** @deprecated use `CreateAssessmentTestQtiDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiDefaultValue$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiDefaultValue$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiDefaultValue$Outbound` instead. */
  export type Outbound = CreateAssessmentTestQtiDefaultValue$Outbound;
}

export function createAssessmentTestQtiDefaultValueToJSON(
  createAssessmentTestQtiDefaultValue: CreateAssessmentTestQtiDefaultValue,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiDefaultValue$outboundSchema.parse(
      createAssessmentTestQtiDefaultValue,
    ),
  );
}

export function createAssessmentTestQtiDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestQtiDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestQtiDefaultValue' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema
    ),
    "qti-default-value": z.lazy(() =>
      CreateAssessmentTestQtiDefaultValue$inboundSchema
    ).optional(),
    "normal-maximum": z.number().optional(),
    "normal-minimum": z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-default-value": "qtiDefaultValue",
      "normal-maximum": "normalMaximum",
      "normal-minimum": "normalMinimum",
    });
  });

/** @internal */
export type CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound =
  {
    _attributes: CreateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound;
    "qti-default-value"?:
      | CreateAssessmentTestQtiDefaultValue$Outbound
      | undefined;
    "normal-maximum"?: number | undefined;
    "normal-minimum"?: number | undefined;
  };

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema
    ),
    qtiDefaultValue: z.lazy(() =>
      CreateAssessmentTestQtiDefaultValue$outboundSchema
    ).optional(),
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiDefaultValue: "qti-default-value",
      normalMaximum: "normal-maximum",
      normalMinimum: "normal-minimum",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function createAssessmentTestQtiAssessmentTestQtiOutcomeDeclarationToJSON(
  createAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration:
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      .parse(createAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration),
  );
}

export function createAssessmentTestQtiAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiTestPartAttributes$inboundSchema: z.ZodType<
  CreateAssessmentTestQtiTestPartAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  "navigation-mode": z.string(),
  "submission-mode": z.string(),
}).transform((v) => {
  return remap$(v, {
    "navigation-mode": "navigationMode",
    "submission-mode": "submissionMode",
  });
});

/** @internal */
export type CreateAssessmentTestQtiTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const CreateAssessmentTestQtiTestPartAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiTestPartAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiTestPartAttributes
  > = z.object({
    identifier: z.string(),
    navigationMode: z.string(),
    submissionMode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      navigationMode: "navigation-mode",
      submissionMode: "submission-mode",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiTestPartAttributes$ {
  /** @deprecated use `CreateAssessmentTestQtiTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiTestPartAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiTestPartAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiTestPartAttributes$Outbound` instead. */
  export type Outbound = CreateAssessmentTestQtiTestPartAttributes$Outbound;
}

export function createAssessmentTestQtiTestPartAttributesToJSON(
  createAssessmentTestQtiTestPartAttributes:
    CreateAssessmentTestQtiTestPartAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiTestPartAttributes$outboundSchema.parse(
      createAssessmentTestQtiTestPartAttributes,
    ),
  );
}

export function createAssessmentTestQtiTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiTestPartAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiTestPartAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/** @internal */
export type CreateAssessmentTestQtiAssessmentSectionAttributes$Outbound = {
  identifier: string;
  title: string;
  visible: string;
};

/** @internal */
export const CreateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentSectionAttributes$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestQtiAssessmentSectionAttributes$Outbound;
}

export function createAssessmentTestQtiAssessmentSectionAttributesToJSON(
  createAssessmentTestQtiAssessmentSectionAttributes:
    CreateAssessmentTestQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema.parse(
      createAssessmentTestQtiAssessmentSectionAttributes,
    ),
  );
}

export function createAssessmentTestQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type CreateAssessmentTestQtiAssessmentItemRefAttributes$Outbound = {
  identifier: string;
  href: string;
};

/** @internal */
export const CreateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestQtiAssessmentItemRefAttributes$Outbound;
}

export function createAssessmentTestQtiAssessmentItemRefAttributesToJSON(
  createAssessmentTestQtiAssessmentItemRefAttributes:
    CreateAssessmentTestQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema.parse(
      createAssessmentTestQtiAssessmentItemRefAttributes,
    ),
  );
}

export function createAssessmentTestQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound =
  {
    _attributes: CreateAssessmentTestQtiAssessmentItemRefAttributes$Outbound;
  };

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function createAssessmentTestQtiAssessmentTestQtiAssessmentItemRefToJSON(
  createAssessmentTestQtiAssessmentTestQtiAssessmentItemRef:
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      .parse(createAssessmentTestQtiAssessmentTestQtiAssessmentItemRef),
  );
}

export function createAssessmentTestQtiAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema
    ),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound =
  {
    _attributes: CreateAssessmentTestQtiAssessmentSectionAttributes$Outbound;
    "qti-assessment-item-ref"?:
      | Array<
        CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound
      >
      | undefined;
  };

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema
    ),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound;
}

export function createAssessmentTestQtiAssessmentTestQtiAssessmentSectionToJSON(
  createAssessmentTestQtiAssessmentTestQtiAssessmentSection:
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema
      .parse(createAssessmentTestQtiAssessmentTestQtiAssessmentSection),
  );
}

export function createAssessmentTestQtiAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiTestPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestQtiTestPartAttributes$inboundSchema
    ),
    "qti-assessment-section": z.array(
      z.lazy(() =>
        CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-section": "qtiAssessmentSection",
    });
  });

/** @internal */
export type CreateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound = {
  _attributes: CreateAssessmentTestQtiTestPartAttributes$Outbound;
  "qti-assessment-section": Array<
    CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const CreateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema:
  z.ZodType<
    CreateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestQtiAssessmentTestQtiTestPart
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestQtiTestPartAttributes$outboundSchema
    ),
    qtiAssessmentSection: z.array(
      z.lazy(() =>
        CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentTestQtiTestPart$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound;
}

export function createAssessmentTestQtiAssessmentTestQtiTestPartToJSON(
  createAssessmentTestQtiAssessmentTestQtiTestPart:
    CreateAssessmentTestQtiAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema.parse(
      createAssessmentTestQtiAssessmentTestQtiTestPart,
    ),
  );
}

export function createAssessmentTestQtiAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestQtiAssessmentTestQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestQtiAssessmentTest$inboundSchema: z.ZodType<
  CreateAssessmentTestQtiAssessmentTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => CreateAssessmentTestAttributes$inboundSchema),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
    ),
  ),
  "qti-test-part": z.array(
    z.lazy(() =>
      CreateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-test-part": "qtiTestPart",
  });
});

/** @internal */
export type CreateAssessmentTestQtiAssessmentTest$Outbound = {
  _attributes: CreateAssessmentTestAttributes$Outbound;
  "qti-outcome-declaration": Array<
    CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  "qti-test-part": Array<
    CreateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound
  >;
};

/** @internal */
export const CreateAssessmentTestQtiAssessmentTest$outboundSchema: z.ZodType<
  CreateAssessmentTestQtiAssessmentTest$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestQtiAssessmentTest
> = z.object({
  attributes: z.lazy(() => CreateAssessmentTestAttributes$outboundSchema),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
    ),
  ),
  qtiTestPart: z.array(
    z.lazy(() =>
      CreateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiTestPart: "qti-test-part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestQtiAssessmentTest$ {
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTest$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestQtiAssessmentTest$inboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestQtiAssessmentTest$outboundSchema;
  /** @deprecated use `CreateAssessmentTestQtiAssessmentTest$Outbound` instead. */
  export type Outbound = CreateAssessmentTestQtiAssessmentTest$Outbound;
}

export function createAssessmentTestQtiAssessmentTestToJSON(
  createAssessmentTestQtiAssessmentTest: CreateAssessmentTestQtiAssessmentTest,
): string {
  return JSON.stringify(
    CreateAssessmentTestQtiAssessmentTest$outboundSchema.parse(
      createAssessmentTestQtiAssessmentTest,
    ),
  );
}

export function createAssessmentTestQtiAssessmentTestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestQtiAssessmentTest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestQtiAssessmentTest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestQtiAssessmentTest' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestContent$inboundSchema: z.ZodType<
  CreateAssessmentTestContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-test": z.lazy(() =>
    CreateAssessmentTestQtiAssessmentTest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-test": "qtiAssessmentTest",
  });
});

/** @internal */
export type CreateAssessmentTestContent$Outbound = {
  "qti-assessment-test": CreateAssessmentTestQtiAssessmentTest$Outbound;
};

/** @internal */
export const CreateAssessmentTestContent$outboundSchema: z.ZodType<
  CreateAssessmentTestContent$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestContent
> = z.object({
  qtiAssessmentTest: z.lazy(() =>
    CreateAssessmentTestQtiAssessmentTest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentTest: "qti-assessment-test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestContent$ {
  /** @deprecated use `CreateAssessmentTestContent$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestContent$inboundSchema;
  /** @deprecated use `CreateAssessmentTestContent$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestContent$outboundSchema;
  /** @deprecated use `CreateAssessmentTestContent$Outbound` instead. */
  export type Outbound = CreateAssessmentTestContent$Outbound;
}

export function createAssessmentTestContentToJSON(
  createAssessmentTestContent: CreateAssessmentTestContent,
): string {
  return JSON.stringify(
    CreateAssessmentTestContent$outboundSchema.parse(
      createAssessmentTestContent,
    ),
  );
}

export function createAssessmentTestContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestContent' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestResponse$inboundSchema: z.ZodType<
  CreateAssessmentTestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  "qti-test-part": z.array(
    z.lazy(() => CreateAssessmentTestQtiTestPart$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => CreateAssessmentTestQtiOutcomeDeclaration$inboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateAssessmentTestContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-test-part": "qtiTestPart",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "__v": "v",
  });
});

/** @internal */
export type CreateAssessmentTestResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  qtiVersion: string;
  "qti-test-part": Array<CreateAssessmentTestQtiTestPart$Outbound>;
  "qti-outcome-declaration": Array<
    CreateAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  timeLimit?: number | undefined;
  maxAttempts?: number | undefined;
  toolsEnabled?: { [k: string]: boolean } | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: CreateAssessmentTestContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
  isValidXml: boolean;
};

/** @internal */
export const CreateAssessmentTestResponse$outboundSchema: z.ZodType<
  CreateAssessmentTestResponse$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  qtiTestPart: z.array(
    z.lazy(() => CreateAssessmentTestQtiTestPart$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => CreateAssessmentTestQtiOutcomeDeclaration$outboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateAssessmentTestContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiTestPart: "qti-test-part",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestResponse$ {
  /** @deprecated use `CreateAssessmentTestResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestResponse$inboundSchema;
  /** @deprecated use `CreateAssessmentTestResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestResponse$outboundSchema;
  /** @deprecated use `CreateAssessmentTestResponse$Outbound` instead. */
  export type Outbound = CreateAssessmentTestResponse$Outbound;
}

export function createAssessmentTestResponseToJSON(
  createAssessmentTestResponse: CreateAssessmentTestResponse,
): string {
  return JSON.stringify(
    CreateAssessmentTestResponse$outboundSchema.parse(
      createAssessmentTestResponse,
    ),
  );
}

export function createAssessmentTestResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestResponse' from JSON`,
  );
}
