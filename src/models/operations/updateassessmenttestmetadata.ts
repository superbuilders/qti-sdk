/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update only the metadata fields of an assessment test without affecting its structure. This is a lightweight operation for administrative changes to title, description, and other metadata properties
 */
export type UpdateAssessmentTestMetadataRequestBody = {
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
};

export type UpdateAssessmentTestMetadataRequest = {
  /**
   * The identifier of the assessment test to update
   */
  identifier: string;
  /**
   * The assessment test metadata to update
   */
  requestBody: UpdateAssessmentTestMetadataRequestBody;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const UpdateAssessmentTestMetadataNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type UpdateAssessmentTestMetadataNavigationMode = ClosedEnum<
  typeof UpdateAssessmentTestMetadataNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const UpdateAssessmentTestMetadataSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type UpdateAssessmentTestMetadataSubmissionMode = ClosedEnum<
  typeof UpdateAssessmentTestMetadataSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type UpdateAssessmentTestMetadataQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type UpdateAssessmentTestMetadataQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<UpdateAssessmentTestMetadataQtiAssessmentItemRef>
    | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type UpdateAssessmentTestMetadataQtiTestPart = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: UpdateAssessmentTestMetadataNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: UpdateAssessmentTestMetadataSubmissionMode;
  qtiAssessmentSection: Array<UpdateAssessmentTestMetadataQtiAssessmentSection>;
};

/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export const UpdateAssessmentTestMetadataCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export type UpdateAssessmentTestMetadataCardinality = ClosedEnum<
  typeof UpdateAssessmentTestMetadataCardinality
>;

/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export const UpdateAssessmentTestMetadataBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export type UpdateAssessmentTestMetadataBaseType = ClosedEnum<
  typeof UpdateAssessmentTestMetadataBaseType
>;

/**
 * Optional default value configuration for outcome variables
 */
export type UpdateAssessmentTestMetadataDefaultValue = {
  /**
   * The default value to assign to the outcome variable
   */
  value?: any | undefined;
};

export type UpdateAssessmentTestMetadataQtiOutcomeDeclaration = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
   */
  cardinality?: UpdateAssessmentTestMetadataCardinality | undefined;
  /**
   * Data type of the outcome variable, determining how values are stored and processed
   */
  baseType: UpdateAssessmentTestMetadataBaseType;
  /**
   * Expected maximum value for this outcome variable in normal circumstances
   */
  normalMaximum?: number | undefined;
  /**
   * Expected minimum value for this outcome variable in normal circumstances
   */
  normalMinimum?: number | undefined;
  /**
   * Optional default value configuration for outcome variables
   */
  defaultValue?: UpdateAssessmentTestMetadataDefaultValue | undefined;
};

export type UpdateAssessmentTestMetadataAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  toolName: string;
  toolVersion: string;
};

export type UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type UpdateAssessmentTestMetadataQtiDefaultValue = {
  qtiValue?: any | undefined;
};

export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration =
  {
    attributes: UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes;
    qtiDefaultValue?: UpdateAssessmentTestMetadataQtiDefaultValue | undefined;
    normalMaximum?: number | undefined;
    normalMinimum?: number | undefined;
  };

export type UpdateAssessmentTestMetadataQtiTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
};

export type UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef =
  {
    attributes: UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes;
  };

export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection =
  {
    attributes: UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes;
    qtiAssessmentItemRef?:
      | Array<UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef>
      | undefined;
  };

export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart = {
  attributes: UpdateAssessmentTestMetadataQtiTestPartAttributes;
  qtiAssessmentSection: Array<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection
  >;
};

export type UpdateAssessmentTestMetadataQtiAssessmentTest = {
  attributes: UpdateAssessmentTestMetadataAttributes;
  qtiOutcomeDeclaration: Array<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration
  >;
  qtiTestPart: Array<UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart>;
};

/**
 * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
 */
export type UpdateAssessmentTestMetadataContent = {
  qtiAssessmentTest: UpdateAssessmentTestMetadataQtiAssessmentTest;
};

/**
 * Complete assessment test data including all test parts, sections, items, and configuration settings
 */
export type UpdateAssessmentTestMetadataResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Version of the specification used for this assessment test
   */
  qtiVersion?: string | undefined;
  qtiTestPart: Array<UpdateAssessmentTestMetadataQtiTestPart>;
  /**
   * Array of outcome variable declarations for storing assessment results and computed values
   */
  qtiOutcomeDeclaration: Array<
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration
  >;
  /**
   * Time limit for the entire assessment test in seconds. When not specified, there is no time limit
   */
  timeLimit?: number | undefined;
  /**
   * Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
   */
  maxAttempts?: number | undefined;
  /**
   * Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
   */
  toolsEnabled?: { [k: string]: boolean } | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
   */
  content: UpdateAssessmentTestMetadataContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataRequestBody$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateAssessmentTestMetadataRequestBody$Outbound = {
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataRequestBody$outboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestMetadataRequestBody
> = z.object({
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataRequestBody$ {
  /** @deprecated use `UpdateAssessmentTestMetadataRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataRequestBody$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataRequestBody$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataRequestBody$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataRequestBody$Outbound;
}

export function updateAssessmentTestMetadataRequestBodyToJSON(
  updateAssessmentTestMetadataRequestBody:
    UpdateAssessmentTestMetadataRequestBody,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataRequestBody$outboundSchema.parse(
      updateAssessmentTestMetadataRequestBody,
    ),
  );
}

export function updateAssessmentTestMetadataRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataRequest$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  RequestBody: z.lazy(() =>
    UpdateAssessmentTestMetadataRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAssessmentTestMetadataRequest$Outbound = {
  identifier: string;
  RequestBody: UpdateAssessmentTestMetadataRequestBody$Outbound;
};

/** @internal */
export const UpdateAssessmentTestMetadataRequest$outboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataRequest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestMetadataRequest
> = z.object({
  identifier: z.string(),
  requestBody: z.lazy(() =>
    UpdateAssessmentTestMetadataRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataRequest$ {
  /** @deprecated use `UpdateAssessmentTestMetadataRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataRequest$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataRequest$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataRequest$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataRequest$Outbound;
}

export function updateAssessmentTestMetadataRequestToJSON(
  updateAssessmentTestMetadataRequest: UpdateAssessmentTestMetadataRequest,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataRequest$outboundSchema.parse(
      updateAssessmentTestMetadataRequest,
    ),
  );
}

export function updateAssessmentTestMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataNavigationMode$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataNavigationMode> = z
    .nativeEnum(UpdateAssessmentTestMetadataNavigationMode);

/** @internal */
export const UpdateAssessmentTestMetadataNavigationMode$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataNavigationMode> =
    UpdateAssessmentTestMetadataNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataNavigationMode$ {
  /** @deprecated use `UpdateAssessmentTestMetadataNavigationMode$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataNavigationMode$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataNavigationMode$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestMetadataSubmissionMode$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataSubmissionMode> = z
    .nativeEnum(UpdateAssessmentTestMetadataSubmissionMode);

/** @internal */
export const UpdateAssessmentTestMetadataSubmissionMode$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataSubmissionMode> =
    UpdateAssessmentTestMetadataSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataSubmissionMode$ {
  /** @deprecated use `UpdateAssessmentTestMetadataSubmissionMode$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataSubmissionMode$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataSubmissionMode$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentItemRef
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentItemRef$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentItemRef$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentItemRefToJSON(
  updateAssessmentTestMetadataQtiAssessmentItemRef:
    UpdateAssessmentTestMetadataQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentItemRef$outboundSchema.parse(
      updateAssessmentTestMetadataQtiAssessmentItemRef,
    ),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentItemRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentSection$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _id: z.string(),
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<UpdateAssessmentTestMetadataQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentSection$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentSection
  > = z.object({
    id: z.string(),
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentSection$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentSection$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentSection$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentSection$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentSectionToJSON(
  updateAssessmentTestMetadataQtiAssessmentSection:
    UpdateAssessmentTestMetadataQtiAssessmentSection,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentSection$outboundSchema.parse(
      updateAssessmentTestMetadataQtiAssessmentSection,
    ),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentSection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiTestPart$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataQtiTestPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: UpdateAssessmentTestMetadataNavigationMode$inboundSchema,
  submissionMode: UpdateAssessmentTestMetadataSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(
    z.lazy(() =>
      UpdateAssessmentTestMetadataQtiAssessmentSection$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type UpdateAssessmentTestMetadataQtiTestPart$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<
    UpdateAssessmentTestMetadataQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestMetadataQtiTestPart$outboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataQtiTestPart$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestMetadataQtiTestPart
> = z.object({
  identifier: z.string(),
  navigationMode: UpdateAssessmentTestMetadataNavigationMode$outboundSchema,
  submissionMode: UpdateAssessmentTestMetadataSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(
    z.lazy(() =>
      UpdateAssessmentTestMetadataQtiAssessmentSection$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiTestPart$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiTestPart$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiTestPart$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiTestPart$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataQtiTestPart$Outbound;
}

export function updateAssessmentTestMetadataQtiTestPartToJSON(
  updateAssessmentTestMetadataQtiTestPart:
    UpdateAssessmentTestMetadataQtiTestPart,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiTestPart$outboundSchema.parse(
      updateAssessmentTestMetadataQtiTestPart,
    ),
  );
}

export function updateAssessmentTestMetadataQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiTestPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiTestPart' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataCardinality$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataCardinality> = z
    .nativeEnum(UpdateAssessmentTestMetadataCardinality);

/** @internal */
export const UpdateAssessmentTestMetadataCardinality$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataCardinality> =
    UpdateAssessmentTestMetadataCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataCardinality$ {
  /** @deprecated use `UpdateAssessmentTestMetadataCardinality$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataCardinality$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataCardinality$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataCardinality$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestMetadataBaseType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataBaseType> = z.nativeEnum(
    UpdateAssessmentTestMetadataBaseType,
  );

/** @internal */
export const UpdateAssessmentTestMetadataBaseType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentTestMetadataBaseType> =
    UpdateAssessmentTestMetadataBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataBaseType$ {
  /** @deprecated use `UpdateAssessmentTestMetadataBaseType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataBaseType$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataBaseType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataBaseType$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestMetadataDefaultValue$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
});

/** @internal */
export type UpdateAssessmentTestMetadataDefaultValue$Outbound = {
  value?: any | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataDefaultValue$outboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataDefaultValue$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestMetadataDefaultValue
> = z.object({
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataDefaultValue$ {
  /** @deprecated use `UpdateAssessmentTestMetadataDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataDefaultValue$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataDefaultValue$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataDefaultValue$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataDefaultValue$Outbound;
}

export function updateAssessmentTestMetadataDefaultValueToJSON(
  updateAssessmentTestMetadataDefaultValue:
    UpdateAssessmentTestMetadataDefaultValue,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataDefaultValue$outboundSchema.parse(
      updateAssessmentTestMetadataDefaultValue,
    ),
  );
}

export function updateAssessmentTestMetadataDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataDefaultValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataDefaultValue' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: UpdateAssessmentTestMetadataCardinality$inboundSchema.default(
      "single",
    ),
    baseType: UpdateAssessmentTestMetadataBaseType$inboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() =>
      UpdateAssessmentTestMetadataDefaultValue$inboundSchema
    ).optional(),
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
  defaultValue?: UpdateAssessmentTestMetadataDefaultValue$Outbound | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration
  > = z.object({
    identifier: z.string(),
    cardinality: UpdateAssessmentTestMetadataCardinality$outboundSchema.default(
      "single",
    ),
    baseType: UpdateAssessmentTestMetadataBaseType$outboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() =>
      UpdateAssessmentTestMetadataDefaultValue$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiOutcomeDeclaration$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration$Outbound;
}

export function updateAssessmentTestMetadataQtiOutcomeDeclarationToJSON(
  updateAssessmentTestMetadataQtiOutcomeDeclaration:
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration$outboundSchema.parse(
      updateAssessmentTestMetadataQtiOutcomeDeclaration,
    ),
  );
}

export function updateAssessmentTestMetadataQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiOutcomeDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataAttributes$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  "tool-name": z.string(),
  "tool-version": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "tool-name": "toolName",
    "tool-version": "toolVersion",
  });
});

/** @internal */
export type UpdateAssessmentTestMetadataAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  "tool-name": string;
  "tool-version": string;
};

/** @internal */
export const UpdateAssessmentTestMetadataAttributes$outboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataAttributes$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestMetadataAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  toolName: z.string(),
  toolVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    toolName: "tool-name",
    toolVersion: "tool-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataAttributes$ {
  /** @deprecated use `UpdateAssessmentTestMetadataAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataAttributes$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataAttributes$Outbound;
}

export function updateAssessmentTestMetadataAttributesToJSON(
  updateAssessmentTestMetadataAttributes:
    UpdateAssessmentTestMetadataAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataAttributes$outboundSchema.parse(
      updateAssessmentTestMetadataAttributes,
    ),
  );
}

export function updateAssessmentTestMetadataAttributesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestMetadataAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    "base-type": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "base-type": "baseType",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$Outbound =
  {
    identifier: string;
    cardinality: string;
    "base-type": string;
  };

/** @internal */
export const UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      baseType: "base-type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$Outbound;
}

export function updateAssessmentTestMetadataQtiOutcomeDeclarationAttributesToJSON(
  updateAssessmentTestMetadataQtiOutcomeDeclarationAttributes:
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$outboundSchema
      .parse(updateAssessmentTestMetadataQtiOutcomeDeclarationAttributes),
  );
}

export function updateAssessmentTestMetadataQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiDefaultValue$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiDefaultValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "qti-value": z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      "qti-value": "qtiValue",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiDefaultValue$Outbound = {
  "qti-value"?: any | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataQtiDefaultValue$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiDefaultValue$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiDefaultValue
  > = z.object({
    qtiValue: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      qtiValue: "qti-value",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiDefaultValue$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiDefaultValue$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiDefaultValue$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiDefaultValue$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataQtiDefaultValue$Outbound;
}

export function updateAssessmentTestMetadataQtiDefaultValueToJSON(
  updateAssessmentTestMetadataQtiDefaultValue:
    UpdateAssessmentTestMetadataQtiDefaultValue,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiDefaultValue$outboundSchema.parse(
      updateAssessmentTestMetadataQtiDefaultValue,
    ),
  );
}

export function updateAssessmentTestMetadataQtiDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiDefaultValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiDefaultValue' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$inboundSchema
    ),
    "qti-default-value": z.lazy(() =>
      UpdateAssessmentTestMetadataQtiDefaultValue$inboundSchema
    ).optional(),
    "normal-maximum": z.number().optional(),
    "normal-minimum": z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-default-value": "qtiDefaultValue",
      "normal-maximum": "normalMaximum",
      "normal-minimum": "normalMinimum",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$Outbound =
  {
    _attributes:
      UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$Outbound;
    "qti-default-value"?:
      | UpdateAssessmentTestMetadataQtiDefaultValue$Outbound
      | undefined;
    "normal-maximum"?: number | undefined;
    "normal-minimum"?: number | undefined;
  };

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiOutcomeDeclarationAttributes$outboundSchema
    ),
    qtiDefaultValue: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiDefaultValue$outboundSchema
    ).optional(),
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiDefaultValue: "qti-default-value",
      normalMaximum: "normal-maximum",
      normalMinimum: "normal-minimum",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclarationToJSON(
  updateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration:
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      .parse(
        updateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration,
      ),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiTestPartAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiTestPartAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    "navigation-mode": z.string(),
    "submission-mode": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "navigation-mode": "navigationMode",
      "submission-mode": "submissionMode",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const UpdateAssessmentTestMetadataQtiTestPartAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiTestPartAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiTestPartAttributes
  > = z.object({
    identifier: z.string(),
    navigationMode: z.string(),
    submissionMode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      navigationMode: "navigation-mode",
      submissionMode: "submission-mode",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiTestPartAttributes$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiTestPartAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiTestPartAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiTestPartAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiTestPartAttributes$Outbound;
}

export function updateAssessmentTestMetadataQtiTestPartAttributesToJSON(
  updateAssessmentTestMetadataQtiTestPartAttributes:
    UpdateAssessmentTestMetadataQtiTestPartAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiTestPartAttributes$outboundSchema.parse(
      updateAssessmentTestMetadataQtiTestPartAttributes,
    ),
  );
}

export function updateAssessmentTestMetadataQtiTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiTestPartAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiTestPartAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$Outbound =
  {
    identifier: string;
    title: string;
    visible: string;
  };

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentSectionAttributesToJSON(
  updateAssessmentTestMetadataQtiAssessmentSectionAttributes:
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$outboundSchema
      .parse(updateAssessmentTestMetadataQtiAssessmentSectionAttributes),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$Outbound =
  {
    identifier: string;
    href: string;
  };

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentItemRefAttributesToJSON(
  updateAssessmentTestMetadataQtiAssessmentItemRefAttributes:
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$outboundSchema
      .parse(updateAssessmentTestMetadataQtiAssessmentItemRefAttributes),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$Outbound =
  {
    _attributes:
      UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$Outbound;
  };

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiAssessmentItemRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRefToJSON(
  updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef:
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      .parse(updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$inboundSchema
    ),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$Outbound =
  {
    _attributes:
      UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$Outbound;
    "qti-assessment-item-ref"?:
      | Array<
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$Outbound
      >
      | undefined;
  };

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiAssessmentSectionAttributes$outboundSchema
    ),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSectionToJSON(
  updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection:
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$outboundSchema
      .parse(updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiTestPartAttributes$inboundSchema
    ),
    "qti-assessment-section": z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-section": "qtiAssessmentSection",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$Outbound =
  {
    _attributes: UpdateAssessmentTestMetadataQtiTestPartAttributes$Outbound;
    "qti-assessment-section": Array<
      UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$Outbound
    >;
  };

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataQtiTestPartAttributes$outboundSchema
    ),
    qtiAssessmentSection: z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiAssessmentSection$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiTestPartToJSON(
  updateAssessmentTestMetadataQtiAssessmentTestQtiTestPart:
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$outboundSchema
      .parse(updateAssessmentTestMetadataQtiAssessmentTestQtiTestPart),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTest$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataAttributes$inboundSchema
    ),
    "qti-outcome-declaration": z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
      ),
    ),
    "qti-test-part": z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-outcome-declaration": "qtiOutcomeDeclaration",
      "qti-test-part": "qtiTestPart",
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataQtiAssessmentTest$Outbound = {
  _attributes: UpdateAssessmentTestMetadataAttributes$Outbound;
  "qti-outcome-declaration": Array<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  "qti-test-part": Array<
    UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestMetadataQtiAssessmentTest$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataQtiAssessmentTest$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataQtiAssessmentTest
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestMetadataAttributes$outboundSchema
    ),
    qtiOutcomeDeclaration: z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      ),
    ),
    qtiTestPart: z.array(
      z.lazy(() =>
        UpdateAssessmentTestMetadataQtiAssessmentTestQtiTestPart$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiOutcomeDeclaration: "qti-outcome-declaration",
      qtiTestPart: "qti-test-part",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataQtiAssessmentTest$ {
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTest$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataQtiAssessmentTest$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataQtiAssessmentTest$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataQtiAssessmentTest$Outbound;
}

export function updateAssessmentTestMetadataQtiAssessmentTestToJSON(
  updateAssessmentTestMetadataQtiAssessmentTest:
    UpdateAssessmentTestMetadataQtiAssessmentTest,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataQtiAssessmentTest$outboundSchema.parse(
      updateAssessmentTestMetadataQtiAssessmentTest,
    ),
  );
}

export function updateAssessmentTestMetadataQtiAssessmentTestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestMetadataQtiAssessmentTest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataQtiAssessmentTest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestMetadataQtiAssessmentTest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataContent$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-test": z.lazy(() =>
    UpdateAssessmentTestMetadataQtiAssessmentTest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-test": "qtiAssessmentTest",
  });
});

/** @internal */
export type UpdateAssessmentTestMetadataContent$Outbound = {
  "qti-assessment-test": UpdateAssessmentTestMetadataQtiAssessmentTest$Outbound;
};

/** @internal */
export const UpdateAssessmentTestMetadataContent$outboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataContent$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestMetadataContent
> = z.object({
  qtiAssessmentTest: z.lazy(() =>
    UpdateAssessmentTestMetadataQtiAssessmentTest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentTest: "qti-assessment-test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataContent$ {
  /** @deprecated use `UpdateAssessmentTestMetadataContent$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataContent$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataContent$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataContent$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataContent$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataContent$Outbound;
}

export function updateAssessmentTestMetadataContentToJSON(
  updateAssessmentTestMetadataContent: UpdateAssessmentTestMetadataContent,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataContent$outboundSchema.parse(
      updateAssessmentTestMetadataContent,
    ),
  );
}

export function updateAssessmentTestMetadataContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestMetadataContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataContent' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestMetadataResponse$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  "qti-test-part": z.array(
    z.lazy(() => UpdateAssessmentTestMetadataQtiTestPart$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      UpdateAssessmentTestMetadataQtiOutcomeDeclaration$inboundSchema
    ),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentTestMetadataContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-test-part": "qtiTestPart",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "__v": "v",
  });
});

/** @internal */
export type UpdateAssessmentTestMetadataResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  qtiVersion: string;
  "qti-test-part": Array<UpdateAssessmentTestMetadataQtiTestPart$Outbound>;
  "qti-outcome-declaration": Array<
    UpdateAssessmentTestMetadataQtiOutcomeDeclaration$Outbound
  >;
  timeLimit?: number | undefined;
  maxAttempts?: number | undefined;
  toolsEnabled?: { [k: string]: boolean } | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: UpdateAssessmentTestMetadataContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataResponse$outboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestMetadataResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  qtiTestPart: z.array(
    z.lazy(() => UpdateAssessmentTestMetadataQtiTestPart$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      UpdateAssessmentTestMetadataQtiOutcomeDeclaration$outboundSchema
    ),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentTestMetadataContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiTestPart: "qti-test-part",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataResponse$ {
  /** @deprecated use `UpdateAssessmentTestMetadataResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataResponse$Outbound;
}

export function updateAssessmentTestMetadataResponseToJSON(
  updateAssessmentTestMetadataResponse: UpdateAssessmentTestMetadataResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentTestMetadataResponse$outboundSchema.parse(
      updateAssessmentTestMetadataResponse,
    ),
  );
}

export function updateAssessmentTestMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestMetadataResponse' from JSON`,
  );
}
