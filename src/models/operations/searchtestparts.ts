/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Field to sort by
 */
export const SearchTestPartsSort = {
  Title: "title",
  Identifier: "identifier",
  CreatedAt: "createdAt",
  UpdatedAt: "updatedAt",
} as const;
/**
 * Field to sort by
 */
export type SearchTestPartsSort = ClosedEnum<typeof SearchTestPartsSort>;

/**
 * Sort order
 */
export const SearchTestPartsQueryParamOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort order
 */
export type SearchTestPartsQueryParamOrder = ClosedEnum<
  typeof SearchTestPartsQueryParamOrder
>;

/**
 * Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
 */
export const SearchTestPartsQueryParamNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
 */
export type SearchTestPartsQueryParamNavigationMode = ClosedEnum<
  typeof SearchTestPartsQueryParamNavigationMode
>;

/**
 * Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
 */
export const SearchTestPartsQueryParamSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
 */
export type SearchTestPartsQueryParamSubmissionMode = ClosedEnum<
  typeof SearchTestPartsQueryParamSubmissionMode
>;

export type SearchTestPartsRequest = {
  /**
   * The unique identifier of the parent assessment test containing the test parts
   */
  assessmentTestIdentifier: string;
  /**
   * Search title and identifier fields using a search term. This is a fuzzy search.
   */
  query?: string | undefined;
  /**
   * Page number for pagination
   */
  page?: string | undefined;
  /**
   * Number of items per page
   */
  limit?: string | undefined;
  /**
   * Field to sort by
   */
  sort?: SearchTestPartsSort | undefined;
  /**
   * Sort order
   */
  order?: SearchTestPartsQueryParamOrder | undefined;
  /**
   * Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
   */
  navigationMode?: SearchTestPartsQueryParamNavigationMode | undefined;
  /**
   * Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
   */
  submissionMode?: SearchTestPartsQueryParamSubmissionMode | undefined;
  /**
   * Advanced filter expression using =, !=, >, >=, <, <=, ~ and logical AND/OR. Example: type='practice' AND createdAt>'2024-01-01'
   */
  filter?: string | undefined;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const SearchTestPartsItemNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type SearchTestPartsItemNavigationMode = ClosedEnum<
  typeof SearchTestPartsItemNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const SearchTestPartsItemSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type SearchTestPartsItemSubmissionMode = ClosedEnum<
  typeof SearchTestPartsItemSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type SearchTestPartsQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type SearchTestPartsQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?: Array<SearchTestPartsQtiAssessmentItemRef> | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type SearchTestPartsItem = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: SearchTestPartsItemNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: SearchTestPartsItemSubmissionMode;
  qtiAssessmentSection: Array<SearchTestPartsQtiAssessmentSection>;
};

/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export const SearchTestPartsOrderResponse = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export type SearchTestPartsOrderResponse = ClosedEnum<
  typeof SearchTestPartsOrderResponse
>;

/**
 * Paginated collection of test parts with navigation metadata
 */
export type SearchTestPartsResponse = {
  /**
   * Array of all test parts belonging to the specified assessment test
   */
  items: Array<SearchTestPartsItem>;
  /**
   * The total number of entities that match the search criteria.
   */
  total: number;
  /**
   * The page number of the entities that match the search criteria.
   */
  page?: number | undefined;
  /**
   * The total number of pages of entities that match the search criteria.
   */
  pages: number;
  /**
   * The number of entities per page.
   */
  limit?: number | undefined;
  /**
   * The field to sort the entities by.
   */
  sort: string;
  /**
   * The order to sort the entities by. Either 'asc' or 'desc'.
   */
  order: SearchTestPartsOrderResponse;
};

/** @internal */
export const SearchTestPartsSort$inboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsSort
> = z.nativeEnum(SearchTestPartsSort);

/** @internal */
export const SearchTestPartsSort$outboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsSort
> = SearchTestPartsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsSort$ {
  /** @deprecated use `SearchTestPartsSort$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsSort$inboundSchema;
  /** @deprecated use `SearchTestPartsSort$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsSort$outboundSchema;
}

/** @internal */
export const SearchTestPartsQueryParamOrder$inboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsQueryParamOrder
> = z.nativeEnum(SearchTestPartsQueryParamOrder);

/** @internal */
export const SearchTestPartsQueryParamOrder$outboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsQueryParamOrder
> = SearchTestPartsQueryParamOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsQueryParamOrder$ {
  /** @deprecated use `SearchTestPartsQueryParamOrder$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsQueryParamOrder$inboundSchema;
  /** @deprecated use `SearchTestPartsQueryParamOrder$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsQueryParamOrder$outboundSchema;
}

/** @internal */
export const SearchTestPartsQueryParamNavigationMode$inboundSchema:
  z.ZodNativeEnum<typeof SearchTestPartsQueryParamNavigationMode> = z
    .nativeEnum(SearchTestPartsQueryParamNavigationMode);

/** @internal */
export const SearchTestPartsQueryParamNavigationMode$outboundSchema:
  z.ZodNativeEnum<typeof SearchTestPartsQueryParamNavigationMode> =
    SearchTestPartsQueryParamNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsQueryParamNavigationMode$ {
  /** @deprecated use `SearchTestPartsQueryParamNavigationMode$inboundSchema` instead. */
  export const inboundSchema =
    SearchTestPartsQueryParamNavigationMode$inboundSchema;
  /** @deprecated use `SearchTestPartsQueryParamNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchTestPartsQueryParamNavigationMode$outboundSchema;
}

/** @internal */
export const SearchTestPartsQueryParamSubmissionMode$inboundSchema:
  z.ZodNativeEnum<typeof SearchTestPartsQueryParamSubmissionMode> = z
    .nativeEnum(SearchTestPartsQueryParamSubmissionMode);

/** @internal */
export const SearchTestPartsQueryParamSubmissionMode$outboundSchema:
  z.ZodNativeEnum<typeof SearchTestPartsQueryParamSubmissionMode> =
    SearchTestPartsQueryParamSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsQueryParamSubmissionMode$ {
  /** @deprecated use `SearchTestPartsQueryParamSubmissionMode$inboundSchema` instead. */
  export const inboundSchema =
    SearchTestPartsQueryParamSubmissionMode$inboundSchema;
  /** @deprecated use `SearchTestPartsQueryParamSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchTestPartsQueryParamSubmissionMode$outboundSchema;
}

/** @internal */
export const SearchTestPartsRequest$inboundSchema: z.ZodType<
  SearchTestPartsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchTestPartsSort$inboundSchema.optional(),
  order: SearchTestPartsQueryParamOrder$inboundSchema.default("desc"),
  navigationMode: SearchTestPartsQueryParamNavigationMode$inboundSchema
    .optional(),
  submissionMode: SearchTestPartsQueryParamSubmissionMode$inboundSchema
    .optional(),
  filter: z.string().optional(),
});

/** @internal */
export type SearchTestPartsRequest$Outbound = {
  assessmentTestIdentifier: string;
  query?: string | undefined;
  page: string;
  limit: string;
  sort?: string | undefined;
  order: string;
  navigationMode?: string | undefined;
  submissionMode?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const SearchTestPartsRequest$outboundSchema: z.ZodType<
  SearchTestPartsRequest$Outbound,
  z.ZodTypeDef,
  SearchTestPartsRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchTestPartsSort$outboundSchema.optional(),
  order: SearchTestPartsQueryParamOrder$outboundSchema.default("desc"),
  navigationMode: SearchTestPartsQueryParamNavigationMode$outboundSchema
    .optional(),
  submissionMode: SearchTestPartsQueryParamSubmissionMode$outboundSchema
    .optional(),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsRequest$ {
  /** @deprecated use `SearchTestPartsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsRequest$inboundSchema;
  /** @deprecated use `SearchTestPartsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsRequest$outboundSchema;
  /** @deprecated use `SearchTestPartsRequest$Outbound` instead. */
  export type Outbound = SearchTestPartsRequest$Outbound;
}

export function searchTestPartsRequestToJSON(
  searchTestPartsRequest: SearchTestPartsRequest,
): string {
  return JSON.stringify(
    SearchTestPartsRequest$outboundSchema.parse(searchTestPartsRequest),
  );
}

export function searchTestPartsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchTestPartsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchTestPartsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchTestPartsRequest' from JSON`,
  );
}

/** @internal */
export const SearchTestPartsItemNavigationMode$inboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsItemNavigationMode
> = z.nativeEnum(SearchTestPartsItemNavigationMode);

/** @internal */
export const SearchTestPartsItemNavigationMode$outboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsItemNavigationMode
> = SearchTestPartsItemNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsItemNavigationMode$ {
  /** @deprecated use `SearchTestPartsItemNavigationMode$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsItemNavigationMode$inboundSchema;
  /** @deprecated use `SearchTestPartsItemNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchTestPartsItemNavigationMode$outboundSchema;
}

/** @internal */
export const SearchTestPartsItemSubmissionMode$inboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsItemSubmissionMode
> = z.nativeEnum(SearchTestPartsItemSubmissionMode);

/** @internal */
export const SearchTestPartsItemSubmissionMode$outboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsItemSubmissionMode
> = SearchTestPartsItemSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsItemSubmissionMode$ {
  /** @deprecated use `SearchTestPartsItemSubmissionMode$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsItemSubmissionMode$inboundSchema;
  /** @deprecated use `SearchTestPartsItemSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchTestPartsItemSubmissionMode$outboundSchema;
}

/** @internal */
export const SearchTestPartsQtiAssessmentItemRef$inboundSchema: z.ZodType<
  SearchTestPartsQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type SearchTestPartsQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const SearchTestPartsQtiAssessmentItemRef$outboundSchema: z.ZodType<
  SearchTestPartsQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  SearchTestPartsQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsQtiAssessmentItemRef$ {
  /** @deprecated use `SearchTestPartsQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    SearchTestPartsQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `SearchTestPartsQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    SearchTestPartsQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `SearchTestPartsQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = SearchTestPartsQtiAssessmentItemRef$Outbound;
}

export function searchTestPartsQtiAssessmentItemRefToJSON(
  searchTestPartsQtiAssessmentItemRef: SearchTestPartsQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    SearchTestPartsQtiAssessmentItemRef$outboundSchema.parse(
      searchTestPartsQtiAssessmentItemRef,
    ),
  );
}

export function searchTestPartsQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<SearchTestPartsQtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchTestPartsQtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchTestPartsQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const SearchTestPartsQtiAssessmentSection$inboundSchema: z.ZodType<
  SearchTestPartsQtiAssessmentSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => SearchTestPartsQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type SearchTestPartsQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<SearchTestPartsQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const SearchTestPartsQtiAssessmentSection$outboundSchema: z.ZodType<
  SearchTestPartsQtiAssessmentSection$Outbound,
  z.ZodTypeDef,
  SearchTestPartsQtiAssessmentSection
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => SearchTestPartsQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsQtiAssessmentSection$ {
  /** @deprecated use `SearchTestPartsQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    SearchTestPartsQtiAssessmentSection$inboundSchema;
  /** @deprecated use `SearchTestPartsQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    SearchTestPartsQtiAssessmentSection$outboundSchema;
  /** @deprecated use `SearchTestPartsQtiAssessmentSection$Outbound` instead. */
  export type Outbound = SearchTestPartsQtiAssessmentSection$Outbound;
}

export function searchTestPartsQtiAssessmentSectionToJSON(
  searchTestPartsQtiAssessmentSection: SearchTestPartsQtiAssessmentSection,
): string {
  return JSON.stringify(
    SearchTestPartsQtiAssessmentSection$outboundSchema.parse(
      searchTestPartsQtiAssessmentSection,
    ),
  );
}

export function searchTestPartsQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<SearchTestPartsQtiAssessmentSection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchTestPartsQtiAssessmentSection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchTestPartsQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const SearchTestPartsItem$inboundSchema: z.ZodType<
  SearchTestPartsItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: SearchTestPartsItemNavigationMode$inboundSchema,
  submissionMode: SearchTestPartsItemSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(
    z.lazy(() => SearchTestPartsQtiAssessmentSection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type SearchTestPartsItem$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<SearchTestPartsQtiAssessmentSection$Outbound>;
};

/** @internal */
export const SearchTestPartsItem$outboundSchema: z.ZodType<
  SearchTestPartsItem$Outbound,
  z.ZodTypeDef,
  SearchTestPartsItem
> = z.object({
  identifier: z.string(),
  navigationMode: SearchTestPartsItemNavigationMode$outboundSchema,
  submissionMode: SearchTestPartsItemSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(
    z.lazy(() => SearchTestPartsQtiAssessmentSection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsItem$ {
  /** @deprecated use `SearchTestPartsItem$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsItem$inboundSchema;
  /** @deprecated use `SearchTestPartsItem$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsItem$outboundSchema;
  /** @deprecated use `SearchTestPartsItem$Outbound` instead. */
  export type Outbound = SearchTestPartsItem$Outbound;
}

export function searchTestPartsItemToJSON(
  searchTestPartsItem: SearchTestPartsItem,
): string {
  return JSON.stringify(
    SearchTestPartsItem$outboundSchema.parse(searchTestPartsItem),
  );
}

export function searchTestPartsItemFromJSON(
  jsonString: string,
): SafeParseResult<SearchTestPartsItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchTestPartsItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchTestPartsItem' from JSON`,
  );
}

/** @internal */
export const SearchTestPartsOrderResponse$inboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsOrderResponse
> = z.nativeEnum(SearchTestPartsOrderResponse);

/** @internal */
export const SearchTestPartsOrderResponse$outboundSchema: z.ZodNativeEnum<
  typeof SearchTestPartsOrderResponse
> = SearchTestPartsOrderResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsOrderResponse$ {
  /** @deprecated use `SearchTestPartsOrderResponse$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsOrderResponse$inboundSchema;
  /** @deprecated use `SearchTestPartsOrderResponse$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsOrderResponse$outboundSchema;
}

/** @internal */
export const SearchTestPartsResponse$inboundSchema: z.ZodType<
  SearchTestPartsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => SearchTestPartsItem$inboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchTestPartsOrderResponse$inboundSchema,
});

/** @internal */
export type SearchTestPartsResponse$Outbound = {
  items: Array<SearchTestPartsItem$Outbound>;
  total: number;
  page: number;
  pages: number;
  limit: number;
  sort: string;
  order: string;
};

/** @internal */
export const SearchTestPartsResponse$outboundSchema: z.ZodType<
  SearchTestPartsResponse$Outbound,
  z.ZodTypeDef,
  SearchTestPartsResponse
> = z.object({
  items: z.array(z.lazy(() => SearchTestPartsItem$outboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchTestPartsOrderResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsResponse$ {
  /** @deprecated use `SearchTestPartsResponse$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsResponse$inboundSchema;
  /** @deprecated use `SearchTestPartsResponse$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsResponse$outboundSchema;
  /** @deprecated use `SearchTestPartsResponse$Outbound` instead. */
  export type Outbound = SearchTestPartsResponse$Outbound;
}

export function searchTestPartsResponseToJSON(
  searchTestPartsResponse: SearchTestPartsResponse,
): string {
  return JSON.stringify(
    SearchTestPartsResponse$outboundSchema.parse(searchTestPartsResponse),
  );
}

export function searchTestPartsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchTestPartsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchTestPartsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchTestPartsResponse' from JSON`,
  );
}
