/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Field to sort by
 */
export const SearchAssessmentItemsSort = {
  Title: "title",
  Identifier: "identifier",
  Type: "type",
  CreatedAt: "createdAt",
  UpdatedAt: "updatedAt",
} as const;
/**
 * Field to sort by
 */
export type SearchAssessmentItemsSort = ClosedEnum<
  typeof SearchAssessmentItemsSort
>;

/**
 * Sort order
 */
export const SearchAssessmentItemsQueryParamOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort order
 */
export type SearchAssessmentItemsQueryParamOrder = ClosedEnum<
  typeof SearchAssessmentItemsQueryParamOrder
>;

export type SearchAssessmentItemsRequest = {
  /**
   * Search title and identifier fields using a search term. This is a fuzzy search.
   */
  query?: string | undefined;
  /**
   * Page number for pagination
   */
  page?: string | undefined;
  /**
   * Number of items per page
   */
  limit?: string | undefined;
  /**
   * Field to sort by
   */
  sort?: SearchAssessmentItemsSort | undefined;
  /**
   * Sort order
   */
  order?: SearchAssessmentItemsQueryParamOrder | undefined;
  /**
   * Advanced filter expression using =, !=, >, >=, <, <=, ~ and logical AND/OR. Example: type='choice'
   */
  filter?: string | undefined;
};

export type Issue = {
  /**
   * Parameter name
   */
  field: string;
  /**
   * Validation message
   */
  message: string;
  /**
   * Zod issue code
   */
  code: string;
};

/**
 * Structured metadata from validation layer
 */
export type Meta = {
  /**
   * Array of individual validation errors
   */
  issues: Array<Issue>;
  /**
   * Sentry event id
   */
  eventId?: string | undefined;
};

/**
 * Assessment item interaction types that are supported by the service provider.
 */
export const SearchAssessmentItemsType = {
  Choice: "choice",
  TextEntry: "text-entry",
  ExtendedText: "extended-text",
  InlineChoice: "inline-choice",
  Match: "match",
  Order: "order",
  Associate: "associate",
  SelectPoint: "select-point",
  GraphicOrder: "graphic-order",
  GraphicAssociate: "graphic-associate",
  GraphicGapMatch: "graphic-gap-match",
  Hotspot: "hotspot",
  Hottext: "hottext",
  Slider: "slider",
  Drawing: "drawing",
  Media: "media",
  Upload: "upload",
} as const;
/**
 * Assessment item interaction types that are supported by the service provider.
 */
export type SearchAssessmentItemsType = ClosedEnum<
  typeof SearchAssessmentItemsType
>;

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const SearchAssessmentItemsResponseDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type SearchAssessmentItemsResponseDeclarationCardinality = ClosedEnum<
  typeof SearchAssessmentItemsResponseDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const SearchAssessmentItemsResponseDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type SearchAssessmentItemsResponseDeclarationBaseType = ClosedEnum<
  typeof SearchAssessmentItemsResponseDeclarationBaseType
>;

/**
 * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
 */
export type SearchAssessmentItemsCorrectResponse = {
  value: Array<string>;
};

export type SearchAssessmentItemsResponseDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: SearchAssessmentItemsResponseDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: SearchAssessmentItemsResponseDeclarationBaseType | undefined;
  /**
   * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
   */
  correctResponse: SearchAssessmentItemsCorrectResponse;
};

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const SearchAssessmentItemsOutcomeDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type SearchAssessmentItemsOutcomeDeclarationCardinality = ClosedEnum<
  typeof SearchAssessmentItemsOutcomeDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const SearchAssessmentItemsOutcomeDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type SearchAssessmentItemsOutcomeDeclarationBaseType = ClosedEnum<
  typeof SearchAssessmentItemsOutcomeDeclarationBaseType
>;

export type SearchAssessmentItemsOutcomeDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: SearchAssessmentItemsOutcomeDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: SearchAssessmentItemsOutcomeDeclarationBaseType | undefined;
};

/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export const SearchAssessmentItemsTemplateType = {
  MatchCorrect: "match_correct",
  MapResponse: "map_response",
} as const;
/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export type SearchAssessmentItemsTemplateType = ClosedEnum<
  typeof SearchAssessmentItemsTemplateType
>;

/**
 * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
 */
export type SearchAssessmentItemsInlineFeedback = {
  /**
   * Identifier of the outcome variable to be set with the inline feedback value.
   */
  outcomeIdentifier: string;
  /**
   * Identifier of the variable whose value will be assigned to the outcome variable during response processing.
   */
  variableIdentifier: string;
};

/**
 * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
 */
export type SearchAssessmentItemsResponseProcessing = {
  /**
   * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
   */
  templateType: SearchAssessmentItemsTemplateType;
  /**
   * Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
   */
  responseDeclarationIdentifier: string;
  /**
   * Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
   */
  outcomeIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
   */
  correctResponseIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
   */
  incorrectResponseIdentifier: string;
  /**
   * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
   */
  inlineFeedback?: SearchAssessmentItemsInlineFeedback | undefined;
};

export type SearchAssessmentItemsAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  adaptive: string;
  timeDependent: string;
};

export type SearchAssessmentItemsQtiResponseDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type SearchAssessmentItemsQtiCorrectResponse = {
  qtiValue: Array<string>;
};

export type SearchAssessmentItemsQtiResponseDeclaration = {
  attributes: SearchAssessmentItemsQtiResponseDeclarationAttributes;
  qtiCorrectResponse: SearchAssessmentItemsQtiCorrectResponse;
};

export type SearchAssessmentItemsQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type SearchAssessmentItemsQtiOutcomeDeclaration = {
  attributes: SearchAssessmentItemsQtiOutcomeDeclarationAttributes;
};

export type SearchAssessmentItemsQtiAssessmentStimulusRefAttributes = {
  identifier: string;
  href: string;
  title: string;
};

export type SearchAssessmentItemsQtiAssessmentStimulusRef = {
  attributes: SearchAssessmentItemsQtiAssessmentStimulusRefAttributes;
};

export type SearchAssessmentItemsQtiAssessmentItem = {
  attributes: SearchAssessmentItemsAttributes;
  qtiResponseDeclaration: Array<SearchAssessmentItemsQtiResponseDeclaration>;
  qtiOutcomeDeclaration: Array<SearchAssessmentItemsQtiOutcomeDeclaration>;
  qtiAssessmentStimulusRef: SearchAssessmentItemsQtiAssessmentStimulusRef;
  qtiItemBody?: any | undefined;
  qtiResponseProcessing?: any | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type SearchAssessmentItemsContent = {
  qtiAssessmentItem: SearchAssessmentItemsQtiAssessmentItem;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const SearchAssessmentItemsModalFeedbackShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type SearchAssessmentItemsModalFeedbackShowHide = ClosedEnum<
  typeof SearchAssessmentItemsModalFeedbackShowHide
>;

export type SearchAssessmentItemsModalFeedback = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: SearchAssessmentItemsModalFeedbackShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
   */
  title: string;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const SearchAssessmentItemsFeedbackInlineShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type SearchAssessmentItemsFeedbackInlineShowHide = ClosedEnum<
  typeof SearchAssessmentItemsFeedbackInlineShowHide
>;

export type SearchAssessmentItemsFeedbackInline = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: SearchAssessmentItemsFeedbackInlineShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const SearchAssessmentItemsFeedbackBlockShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type SearchAssessmentItemsFeedbackBlockShowHide = ClosedEnum<
  typeof SearchAssessmentItemsFeedbackBlockShowHide
>;

export type SearchAssessmentItemsFeedbackBlock = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: SearchAssessmentItemsFeedbackBlockShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

export type SearchAssessmentItemsItem = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Assessment item interaction types that are supported by the service provider.
   */
  type: SearchAssessmentItemsType;
  /**
   * QTI version of the assessment item
   */
  qtiVersion?: string | undefined;
  /**
   * Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
   */
  timeDependent?: boolean | undefined;
  /**
   * Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
   */
  adaptive?: boolean | undefined;
  responseDeclarations?:
    | Array<SearchAssessmentItemsResponseDeclaration>
    | undefined;
  outcomeDeclarations?:
    | Array<SearchAssessmentItemsOutcomeDeclaration>
    | undefined;
  /**
   * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
   */
  responseProcessing: SearchAssessmentItemsResponseProcessing;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: SearchAssessmentItemsContent;
  /**
   * Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
   */
  modalFeedback?: Array<SearchAssessmentItemsModalFeedback> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackInline?: Array<SearchAssessmentItemsFeedbackInline> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackBlock?: Array<SearchAssessmentItemsFeedbackBlock> | undefined;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export const SearchAssessmentItemsOrderResponse = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export type SearchAssessmentItemsOrderResponse = ClosedEnum<
  typeof SearchAssessmentItemsOrderResponse
>;

/**
 * Paginated response containing all assessment items available on the service provider with navigation metadata
 */
export type SearchAssessmentItemsResponse = {
  /**
   * Array of assessment items that match the search criteria
   */
  items: Array<SearchAssessmentItemsItem>;
  /**
   * The total number of entities that match the search criteria.
   */
  total: number;
  /**
   * The page number of the entities that match the search criteria.
   */
  page?: number | undefined;
  /**
   * The total number of pages of entities that match the search criteria.
   */
  pages: number;
  /**
   * The number of entities per page.
   */
  limit?: number | undefined;
  /**
   * The field to sort the entities by.
   */
  sort: string;
  /**
   * The order to sort the entities by. Either 'asc' or 'desc'.
   */
  order: SearchAssessmentItemsOrderResponse;
};

/** @internal */
export const SearchAssessmentItemsSort$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsSort
> = z.nativeEnum(SearchAssessmentItemsSort);

/** @internal */
export const SearchAssessmentItemsSort$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsSort
> = SearchAssessmentItemsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsSort$ {
  /** @deprecated use `SearchAssessmentItemsSort$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsSort$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsSort$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentItemsSort$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsQueryParamOrder$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsQueryParamOrder> = z.nativeEnum(
    SearchAssessmentItemsQueryParamOrder,
  );

/** @internal */
export const SearchAssessmentItemsQueryParamOrder$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsQueryParamOrder> =
    SearchAssessmentItemsQueryParamOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQueryParamOrder$ {
  /** @deprecated use `SearchAssessmentItemsQueryParamOrder$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQueryParamOrder$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQueryParamOrder$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQueryParamOrder$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsRequest$inboundSchema: z.ZodType<
  SearchAssessmentItemsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchAssessmentItemsSort$inboundSchema.default("createdAt"),
  order: SearchAssessmentItemsQueryParamOrder$inboundSchema.default("desc"),
  filter: z.string().optional(),
});

/** @internal */
export type SearchAssessmentItemsRequest$Outbound = {
  query?: string | undefined;
  page: string;
  limit: string;
  sort: string;
  order: string;
  filter?: string | undefined;
};

/** @internal */
export const SearchAssessmentItemsRequest$outboundSchema: z.ZodType<
  SearchAssessmentItemsRequest$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsRequest
> = z.object({
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchAssessmentItemsSort$outboundSchema.default("createdAt"),
  order: SearchAssessmentItemsQueryParamOrder$outboundSchema.default("desc"),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsRequest$ {
  /** @deprecated use `SearchAssessmentItemsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsRequest$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentItemsRequest$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsRequest$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsRequest$Outbound;
}

export function searchAssessmentItemsRequestToJSON(
  searchAssessmentItemsRequest: SearchAssessmentItemsRequest,
): string {
  return JSON.stringify(
    SearchAssessmentItemsRequest$outboundSchema.parse(
      searchAssessmentItemsRequest,
    ),
  );
}

export function searchAssessmentItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentItemsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsRequest' from JSON`,
  );
}

/** @internal */
export const Issue$inboundSchema: z.ZodType<Issue, z.ZodTypeDef, unknown> = z
  .object({
    field: z.string(),
    message: z.string(),
    code: z.string(),
  });

/** @internal */
export type Issue$Outbound = {
  field: string;
  message: string;
  code: string;
};

/** @internal */
export const Issue$outboundSchema: z.ZodType<
  Issue$Outbound,
  z.ZodTypeDef,
  Issue
> = z.object({
  field: z.string(),
  message: z.string(),
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issue$ {
  /** @deprecated use `Issue$inboundSchema` instead. */
  export const inboundSchema = Issue$inboundSchema;
  /** @deprecated use `Issue$outboundSchema` instead. */
  export const outboundSchema = Issue$outboundSchema;
  /** @deprecated use `Issue$Outbound` instead. */
  export type Outbound = Issue$Outbound;
}

export function issueToJSON(issue: Issue): string {
  return JSON.stringify(Issue$outboundSchema.parse(issue));
}

export function issueFromJSON(
  jsonString: string,
): SafeParseResult<Issue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Issue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Issue' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    issues: z.array(z.lazy(() => Issue$inboundSchema)),
    eventId: z.string().optional(),
  });

/** @internal */
export type Meta$Outbound = {
  issues: Array<Issue$Outbound>;
  eventId?: string | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    issues: z.array(z.lazy(() => Issue$outboundSchema)),
    eventId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsType$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsType
> = z.nativeEnum(SearchAssessmentItemsType);

/** @internal */
export const SearchAssessmentItemsType$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsType
> = SearchAssessmentItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsType$ {
  /** @deprecated use `SearchAssessmentItemsType$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsType$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsType$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentItemsType$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsResponseDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsResponseDeclarationCardinality> =
    z.nativeEnum(SearchAssessmentItemsResponseDeclarationCardinality);

/** @internal */
export const SearchAssessmentItemsResponseDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsResponseDeclarationCardinality> =
    SearchAssessmentItemsResponseDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsResponseDeclarationCardinality$ {
  /** @deprecated use `SearchAssessmentItemsResponseDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsResponseDeclarationCardinality$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponseDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsResponseDeclarationCardinality$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsResponseDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsResponseDeclarationBaseType> = z
    .nativeEnum(SearchAssessmentItemsResponseDeclarationBaseType);

/** @internal */
export const SearchAssessmentItemsResponseDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsResponseDeclarationBaseType> =
    SearchAssessmentItemsResponseDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsResponseDeclarationBaseType$ {
  /** @deprecated use `SearchAssessmentItemsResponseDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsResponseDeclarationBaseType$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponseDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsResponseDeclarationBaseType$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsCorrectResponse$inboundSchema: z.ZodType<
  SearchAssessmentItemsCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.array(z.string()),
});

/** @internal */
export type SearchAssessmentItemsCorrectResponse$Outbound = {
  value: Array<string>;
};

/** @internal */
export const SearchAssessmentItemsCorrectResponse$outboundSchema: z.ZodType<
  SearchAssessmentItemsCorrectResponse$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsCorrectResponse
> = z.object({
  value: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsCorrectResponse$ {
  /** @deprecated use `SearchAssessmentItemsCorrectResponse$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsCorrectResponse$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsCorrectResponse$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsCorrectResponse$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsCorrectResponse$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsCorrectResponse$Outbound;
}

export function searchAssessmentItemsCorrectResponseToJSON(
  searchAssessmentItemsCorrectResponse: SearchAssessmentItemsCorrectResponse,
): string {
  return JSON.stringify(
    SearchAssessmentItemsCorrectResponse$outboundSchema.parse(
      searchAssessmentItemsCorrectResponse,
    ),
  );
}

export function searchAssessmentItemsCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsCorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsCorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsCorrectResponse' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsResponseDeclaration$inboundSchema: z.ZodType<
  SearchAssessmentItemsResponseDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality:
    SearchAssessmentItemsResponseDeclarationCardinality$inboundSchema,
  baseType: SearchAssessmentItemsResponseDeclarationBaseType$inboundSchema
    .optional(),
  correctResponse: z.lazy(() =>
    SearchAssessmentItemsCorrectResponse$inboundSchema
  ),
});

/** @internal */
export type SearchAssessmentItemsResponseDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
  correctResponse: SearchAssessmentItemsCorrectResponse$Outbound;
};

/** @internal */
export const SearchAssessmentItemsResponseDeclaration$outboundSchema: z.ZodType<
  SearchAssessmentItemsResponseDeclaration$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsResponseDeclaration
> = z.object({
  identifier: z.string(),
  cardinality:
    SearchAssessmentItemsResponseDeclarationCardinality$outboundSchema,
  baseType: SearchAssessmentItemsResponseDeclarationBaseType$outboundSchema
    .optional(),
  correctResponse: z.lazy(() =>
    SearchAssessmentItemsCorrectResponse$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsResponseDeclaration$ {
  /** @deprecated use `SearchAssessmentItemsResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsResponseDeclaration$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsResponseDeclaration$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponseDeclaration$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsResponseDeclaration$Outbound;
}

export function searchAssessmentItemsResponseDeclarationToJSON(
  searchAssessmentItemsResponseDeclaration:
    SearchAssessmentItemsResponseDeclaration,
): string {
  return JSON.stringify(
    SearchAssessmentItemsResponseDeclaration$outboundSchema.parse(
      searchAssessmentItemsResponseDeclaration,
    ),
  );
}

export function searchAssessmentItemsResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsResponseDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsResponseDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsOutcomeDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsOutcomeDeclarationCardinality> = z
    .nativeEnum(SearchAssessmentItemsOutcomeDeclarationCardinality);

/** @internal */
export const SearchAssessmentItemsOutcomeDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsOutcomeDeclarationCardinality> =
    SearchAssessmentItemsOutcomeDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsOutcomeDeclarationCardinality$ {
  /** @deprecated use `SearchAssessmentItemsOutcomeDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsOutcomeDeclarationCardinality$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsOutcomeDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsOutcomeDeclarationCardinality$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsOutcomeDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsOutcomeDeclarationBaseType> = z
    .nativeEnum(SearchAssessmentItemsOutcomeDeclarationBaseType);

/** @internal */
export const SearchAssessmentItemsOutcomeDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsOutcomeDeclarationBaseType> =
    SearchAssessmentItemsOutcomeDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsOutcomeDeclarationBaseType$ {
  /** @deprecated use `SearchAssessmentItemsOutcomeDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsOutcomeDeclarationBaseType$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsOutcomeDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsOutcomeDeclarationBaseType$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsOutcomeDeclaration$inboundSchema: z.ZodType<
  SearchAssessmentItemsOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: SearchAssessmentItemsOutcomeDeclarationCardinality$inboundSchema,
  baseType: SearchAssessmentItemsOutcomeDeclarationBaseType$inboundSchema
    .optional(),
});

/** @internal */
export type SearchAssessmentItemsOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
};

/** @internal */
export const SearchAssessmentItemsOutcomeDeclaration$outboundSchema: z.ZodType<
  SearchAssessmentItemsOutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsOutcomeDeclaration
> = z.object({
  identifier: z.string(),
  cardinality:
    SearchAssessmentItemsOutcomeDeclarationCardinality$outboundSchema,
  baseType: SearchAssessmentItemsOutcomeDeclarationBaseType$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsOutcomeDeclaration$ {
  /** @deprecated use `SearchAssessmentItemsOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsOutcomeDeclaration$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsOutcomeDeclaration$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsOutcomeDeclaration$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsOutcomeDeclaration$Outbound;
}

export function searchAssessmentItemsOutcomeDeclarationToJSON(
  searchAssessmentItemsOutcomeDeclaration:
    SearchAssessmentItemsOutcomeDeclaration,
): string {
  return JSON.stringify(
    SearchAssessmentItemsOutcomeDeclaration$outboundSchema.parse(
      searchAssessmentItemsOutcomeDeclaration,
    ),
  );
}

export function searchAssessmentItemsOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsOutcomeDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsTemplateType
> = z.nativeEnum(SearchAssessmentItemsTemplateType);

/** @internal */
export const SearchAssessmentItemsTemplateType$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsTemplateType
> = SearchAssessmentItemsTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsTemplateType$ {
  /** @deprecated use `SearchAssessmentItemsTemplateType$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsTemplateType$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsTemplateType$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsInlineFeedback$inboundSchema: z.ZodType<
  SearchAssessmentItemsInlineFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/** @internal */
export type SearchAssessmentItemsInlineFeedback$Outbound = {
  outcomeIdentifier: string;
  variableIdentifier: string;
};

/** @internal */
export const SearchAssessmentItemsInlineFeedback$outboundSchema: z.ZodType<
  SearchAssessmentItemsInlineFeedback$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsInlineFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsInlineFeedback$ {
  /** @deprecated use `SearchAssessmentItemsInlineFeedback$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsInlineFeedback$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsInlineFeedback$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsInlineFeedback$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsInlineFeedback$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsInlineFeedback$Outbound;
}

export function searchAssessmentItemsInlineFeedbackToJSON(
  searchAssessmentItemsInlineFeedback: SearchAssessmentItemsInlineFeedback,
): string {
  return JSON.stringify(
    SearchAssessmentItemsInlineFeedback$outboundSchema.parse(
      searchAssessmentItemsInlineFeedback,
    ),
  );
}

export function searchAssessmentItemsInlineFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsInlineFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsInlineFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsInlineFeedback' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsResponseProcessing$inboundSchema: z.ZodType<
  SearchAssessmentItemsResponseProcessing,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateType: SearchAssessmentItemsTemplateType$inboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() =>
    SearchAssessmentItemsInlineFeedback$inboundSchema
  ).optional(),
});

/** @internal */
export type SearchAssessmentItemsResponseProcessing$Outbound = {
  templateType: string;
  responseDeclarationIdentifier: string;
  outcomeIdentifier: string;
  correctResponseIdentifier: string;
  incorrectResponseIdentifier: string;
  inlineFeedback?: SearchAssessmentItemsInlineFeedback$Outbound | undefined;
};

/** @internal */
export const SearchAssessmentItemsResponseProcessing$outboundSchema: z.ZodType<
  SearchAssessmentItemsResponseProcessing$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsResponseProcessing
> = z.object({
  templateType: SearchAssessmentItemsTemplateType$outboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() =>
    SearchAssessmentItemsInlineFeedback$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsResponseProcessing$ {
  /** @deprecated use `SearchAssessmentItemsResponseProcessing$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsResponseProcessing$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponseProcessing$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsResponseProcessing$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponseProcessing$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsResponseProcessing$Outbound;
}

export function searchAssessmentItemsResponseProcessingToJSON(
  searchAssessmentItemsResponseProcessing:
    SearchAssessmentItemsResponseProcessing,
): string {
  return JSON.stringify(
    SearchAssessmentItemsResponseProcessing$outboundSchema.parse(
      searchAssessmentItemsResponseProcessing,
    ),
  );
}

export function searchAssessmentItemsResponseProcessingFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsResponseProcessing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsResponseProcessing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsResponseProcessing' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsAttributes$inboundSchema: z.ZodType<
  SearchAssessmentItemsAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  "time-dependent": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "time-dependent": "timeDependent",
  });
});

/** @internal */
export type SearchAssessmentItemsAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  adaptive: string;
  "time-dependent": string;
};

/** @internal */
export const SearchAssessmentItemsAttributes$outboundSchema: z.ZodType<
  SearchAssessmentItemsAttributes$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  timeDependent: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    timeDependent: "time-dependent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsAttributes$ {
  /** @deprecated use `SearchAssessmentItemsAttributes$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsAttributes$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentItemsAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsAttributes$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsAttributes$Outbound;
}

export function searchAssessmentItemsAttributesToJSON(
  searchAssessmentItemsAttributes: SearchAssessmentItemsAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentItemsAttributes$outboundSchema.parse(
      searchAssessmentItemsAttributes,
    ),
  );
}

export function searchAssessmentItemsAttributesFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentItemsAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiResponseDeclarationAttributes$inboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiResponseDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type SearchAssessmentItemsQtiResponseDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const SearchAssessmentItemsQtiResponseDeclarationAttributes$outboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiResponseDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    SearchAssessmentItemsQtiResponseDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiResponseDeclarationAttributes$ {
  /** @deprecated use `SearchAssessmentItemsQtiResponseDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiResponseDeclarationAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiResponseDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiResponseDeclarationAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiResponseDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    SearchAssessmentItemsQtiResponseDeclarationAttributes$Outbound;
}

export function searchAssessmentItemsQtiResponseDeclarationAttributesToJSON(
  searchAssessmentItemsQtiResponseDeclarationAttributes:
    SearchAssessmentItemsQtiResponseDeclarationAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiResponseDeclarationAttributes$outboundSchema.parse(
      searchAssessmentItemsQtiResponseDeclarationAttributes,
    ),
  );
}

export function searchAssessmentItemsQtiResponseDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsQtiResponseDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiResponseDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsQtiResponseDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiCorrectResponse$inboundSchema: z.ZodType<
  SearchAssessmentItemsQtiCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type SearchAssessmentItemsQtiCorrectResponse$Outbound = {
  "qti-value": Array<string>;
};

/** @internal */
export const SearchAssessmentItemsQtiCorrectResponse$outboundSchema: z.ZodType<
  SearchAssessmentItemsQtiCorrectResponse$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsQtiCorrectResponse
> = z.object({
  qtiValue: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiCorrectResponse$ {
  /** @deprecated use `SearchAssessmentItemsQtiCorrectResponse$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiCorrectResponse$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiCorrectResponse$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiCorrectResponse$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiCorrectResponse$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsQtiCorrectResponse$Outbound;
}

export function searchAssessmentItemsQtiCorrectResponseToJSON(
  searchAssessmentItemsQtiCorrectResponse:
    SearchAssessmentItemsQtiCorrectResponse,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiCorrectResponse$outboundSchema.parse(
      searchAssessmentItemsQtiCorrectResponse,
    ),
  );
}

export function searchAssessmentItemsQtiCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsQtiCorrectResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiCorrectResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsQtiCorrectResponse' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiResponseDeclaration$inboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiResponseDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      SearchAssessmentItemsQtiResponseDeclarationAttributes$inboundSchema
    ),
    "qti-correct-response": z.lazy(() =>
      SearchAssessmentItemsQtiCorrectResponse$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-correct-response": "qtiCorrectResponse",
    });
  });

/** @internal */
export type SearchAssessmentItemsQtiResponseDeclaration$Outbound = {
  _attributes: SearchAssessmentItemsQtiResponseDeclarationAttributes$Outbound;
  "qti-correct-response": SearchAssessmentItemsQtiCorrectResponse$Outbound;
};

/** @internal */
export const SearchAssessmentItemsQtiResponseDeclaration$outboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiResponseDeclaration$Outbound,
    z.ZodTypeDef,
    SearchAssessmentItemsQtiResponseDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      SearchAssessmentItemsQtiResponseDeclarationAttributes$outboundSchema
    ),
    qtiCorrectResponse: z.lazy(() =>
      SearchAssessmentItemsQtiCorrectResponse$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiCorrectResponse: "qti-correct-response",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiResponseDeclaration$ {
  /** @deprecated use `SearchAssessmentItemsQtiResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiResponseDeclaration$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiResponseDeclaration$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiResponseDeclaration$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsQtiResponseDeclaration$Outbound;
}

export function searchAssessmentItemsQtiResponseDeclarationToJSON(
  searchAssessmentItemsQtiResponseDeclaration:
    SearchAssessmentItemsQtiResponseDeclaration,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiResponseDeclaration$outboundSchema.parse(
      searchAssessmentItemsQtiResponseDeclaration,
    ),
  );
}

export function searchAssessmentItemsQtiResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsQtiResponseDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiResponseDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsQtiResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type SearchAssessmentItemsQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const SearchAssessmentItemsQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `SearchAssessmentItemsQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes$Outbound;
}

export function searchAssessmentItemsQtiOutcomeDeclarationAttributesToJSON(
  searchAssessmentItemsQtiOutcomeDeclarationAttributes:
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      searchAssessmentItemsQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function searchAssessmentItemsQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<SearchAssessmentItemsQtiOutcomeDeclaration, z.ZodTypeDef, unknown> =
    z.object({
      _attributes: z.lazy(() =>
        SearchAssessmentItemsQtiOutcomeDeclarationAttributes$inboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        "_attributes": "attributes",
      });
    });

/** @internal */
export type SearchAssessmentItemsQtiOutcomeDeclaration$Outbound = {
  _attributes: SearchAssessmentItemsQtiOutcomeDeclarationAttributes$Outbound;
};

/** @internal */
export const SearchAssessmentItemsQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    SearchAssessmentItemsQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      SearchAssessmentItemsQtiOutcomeDeclarationAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiOutcomeDeclaration$ {
  /** @deprecated use `SearchAssessmentItemsQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsQtiOutcomeDeclaration$Outbound;
}

export function searchAssessmentItemsQtiOutcomeDeclarationToJSON(
  searchAssessmentItemsQtiOutcomeDeclaration:
    SearchAssessmentItemsQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiOutcomeDeclaration$outboundSchema.parse(
      searchAssessmentItemsQtiOutcomeDeclaration,
    ),
  );
}

export function searchAssessmentItemsQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiOutcomeDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$inboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/** @internal */
export type SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$Outbound = {
  identifier: string;
  href: string;
  title: string;
};

/** @internal */
export const SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$outboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$Outbound,
    z.ZodTypeDef,
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$ {
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$Outbound` instead. */
  export type Outbound =
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$Outbound;
}

export function searchAssessmentItemsQtiAssessmentStimulusRefAttributesToJSON(
  searchAssessmentItemsQtiAssessmentStimulusRefAttributes:
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$outboundSchema
      .parse(searchAssessmentItemsQtiAssessmentStimulusRefAttributes),
  );
}

export function searchAssessmentItemsQtiAssessmentStimulusRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsQtiAssessmentStimulusRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsQtiAssessmentStimulusRefAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiAssessmentStimulusRef$inboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiAssessmentStimulusRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type SearchAssessmentItemsQtiAssessmentStimulusRef$Outbound = {
  _attributes: SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$Outbound;
};

/** @internal */
export const SearchAssessmentItemsQtiAssessmentStimulusRef$outboundSchema:
  z.ZodType<
    SearchAssessmentItemsQtiAssessmentStimulusRef$Outbound,
    z.ZodTypeDef,
    SearchAssessmentItemsQtiAssessmentStimulusRef
  > = z.object({
    attributes: z.lazy(() =>
      SearchAssessmentItemsQtiAssessmentStimulusRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiAssessmentStimulusRef$ {
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentStimulusRef$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiAssessmentStimulusRef$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentStimulusRef$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiAssessmentStimulusRef$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentStimulusRef$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsQtiAssessmentStimulusRef$Outbound;
}

export function searchAssessmentItemsQtiAssessmentStimulusRefToJSON(
  searchAssessmentItemsQtiAssessmentStimulusRef:
    SearchAssessmentItemsQtiAssessmentStimulusRef,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiAssessmentStimulusRef$outboundSchema.parse(
      searchAssessmentItemsQtiAssessmentStimulusRef,
    ),
  );
}

export function searchAssessmentItemsQtiAssessmentStimulusRefFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentItemsQtiAssessmentStimulusRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiAssessmentStimulusRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentItemsQtiAssessmentStimulusRef' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsQtiAssessmentItem$inboundSchema: z.ZodType<
  SearchAssessmentItemsQtiAssessmentItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => SearchAssessmentItemsAttributes$inboundSchema),
  "qti-response-declaration": z.array(
    z.lazy(() => SearchAssessmentItemsQtiResponseDeclaration$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => SearchAssessmentItemsQtiOutcomeDeclaration$inboundSchema),
  ),
  "qti-assessment-stimulus-ref": z.lazy(() =>
    SearchAssessmentItemsQtiAssessmentStimulusRef$inboundSchema
  ),
  "qti-item-body": z.any().optional(),
  "qti-response-processing": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-response-declaration": "qtiResponseDeclaration",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-assessment-stimulus-ref": "qtiAssessmentStimulusRef",
    "qti-item-body": "qtiItemBody",
    "qti-response-processing": "qtiResponseProcessing",
  });
});

/** @internal */
export type SearchAssessmentItemsQtiAssessmentItem$Outbound = {
  _attributes: SearchAssessmentItemsAttributes$Outbound;
  "qti-response-declaration": Array<
    SearchAssessmentItemsQtiResponseDeclaration$Outbound
  >;
  "qti-outcome-declaration": Array<
    SearchAssessmentItemsQtiOutcomeDeclaration$Outbound
  >;
  "qti-assessment-stimulus-ref":
    SearchAssessmentItemsQtiAssessmentStimulusRef$Outbound;
  "qti-item-body"?: any | undefined;
  "qti-response-processing"?: any | undefined;
};

/** @internal */
export const SearchAssessmentItemsQtiAssessmentItem$outboundSchema: z.ZodType<
  SearchAssessmentItemsQtiAssessmentItem$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsQtiAssessmentItem
> = z.object({
  attributes: z.lazy(() => SearchAssessmentItemsAttributes$outboundSchema),
  qtiResponseDeclaration: z.array(
    z.lazy(() => SearchAssessmentItemsQtiResponseDeclaration$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => SearchAssessmentItemsQtiOutcomeDeclaration$outboundSchema),
  ),
  qtiAssessmentStimulusRef: z.lazy(() =>
    SearchAssessmentItemsQtiAssessmentStimulusRef$outboundSchema
  ),
  qtiItemBody: z.any().optional(),
  qtiResponseProcessing: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiResponseDeclaration: "qti-response-declaration",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiAssessmentStimulusRef: "qti-assessment-stimulus-ref",
    qtiItemBody: "qti-item-body",
    qtiResponseProcessing: "qti-response-processing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsQtiAssessmentItem$ {
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentItem$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsQtiAssessmentItem$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentItem$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsQtiAssessmentItem$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsQtiAssessmentItem$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsQtiAssessmentItem$Outbound;
}

export function searchAssessmentItemsQtiAssessmentItemToJSON(
  searchAssessmentItemsQtiAssessmentItem:
    SearchAssessmentItemsQtiAssessmentItem,
): string {
  return JSON.stringify(
    SearchAssessmentItemsQtiAssessmentItem$outboundSchema.parse(
      searchAssessmentItemsQtiAssessmentItem,
    ),
  );
}

export function searchAssessmentItemsQtiAssessmentItemFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsQtiAssessmentItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsQtiAssessmentItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsQtiAssessmentItem' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsContent$inboundSchema: z.ZodType<
  SearchAssessmentItemsContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-item": z.lazy(() =>
    SearchAssessmentItemsQtiAssessmentItem$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-item": "qtiAssessmentItem",
  });
});

/** @internal */
export type SearchAssessmentItemsContent$Outbound = {
  "qti-assessment-item": SearchAssessmentItemsQtiAssessmentItem$Outbound;
};

/** @internal */
export const SearchAssessmentItemsContent$outboundSchema: z.ZodType<
  SearchAssessmentItemsContent$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsContent
> = z.object({
  qtiAssessmentItem: z.lazy(() =>
    SearchAssessmentItemsQtiAssessmentItem$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentItem: "qti-assessment-item",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsContent$ {
  /** @deprecated use `SearchAssessmentItemsContent$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsContent$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsContent$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentItemsContent$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsContent$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsContent$Outbound;
}

export function searchAssessmentItemsContentToJSON(
  searchAssessmentItemsContent: SearchAssessmentItemsContent,
): string {
  return JSON.stringify(
    SearchAssessmentItemsContent$outboundSchema.parse(
      searchAssessmentItemsContent,
    ),
  );
}

export function searchAssessmentItemsContentFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentItemsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsContent' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsModalFeedbackShowHide$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsModalFeedbackShowHide> = z
    .nativeEnum(SearchAssessmentItemsModalFeedbackShowHide);

/** @internal */
export const SearchAssessmentItemsModalFeedbackShowHide$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsModalFeedbackShowHide> =
    SearchAssessmentItemsModalFeedbackShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsModalFeedbackShowHide$ {
  /** @deprecated use `SearchAssessmentItemsModalFeedbackShowHide$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsModalFeedbackShowHide$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsModalFeedbackShowHide$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsModalFeedbackShowHide$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsModalFeedback$inboundSchema: z.ZodType<
  SearchAssessmentItemsModalFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: SearchAssessmentItemsModalFeedbackShowHide$inboundSchema,
  content: z.string(),
  title: z.string(),
});

/** @internal */
export type SearchAssessmentItemsModalFeedback$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  title: string;
};

/** @internal */
export const SearchAssessmentItemsModalFeedback$outboundSchema: z.ZodType<
  SearchAssessmentItemsModalFeedback$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsModalFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: SearchAssessmentItemsModalFeedbackShowHide$outboundSchema,
  content: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsModalFeedback$ {
  /** @deprecated use `SearchAssessmentItemsModalFeedback$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsModalFeedback$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsModalFeedback$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsModalFeedback$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsModalFeedback$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsModalFeedback$Outbound;
}

export function searchAssessmentItemsModalFeedbackToJSON(
  searchAssessmentItemsModalFeedback: SearchAssessmentItemsModalFeedback,
): string {
  return JSON.stringify(
    SearchAssessmentItemsModalFeedback$outboundSchema.parse(
      searchAssessmentItemsModalFeedback,
    ),
  );
}

export function searchAssessmentItemsModalFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsModalFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsModalFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsModalFeedback' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsFeedbackInlineShowHide$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsFeedbackInlineShowHide> = z
    .nativeEnum(SearchAssessmentItemsFeedbackInlineShowHide);

/** @internal */
export const SearchAssessmentItemsFeedbackInlineShowHide$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsFeedbackInlineShowHide> =
    SearchAssessmentItemsFeedbackInlineShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsFeedbackInlineShowHide$ {
  /** @deprecated use `SearchAssessmentItemsFeedbackInlineShowHide$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsFeedbackInlineShowHide$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsFeedbackInlineShowHide$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsFeedbackInlineShowHide$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsFeedbackInline$inboundSchema: z.ZodType<
  SearchAssessmentItemsFeedbackInline,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: SearchAssessmentItemsFeedbackInlineShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type SearchAssessmentItemsFeedbackInline$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const SearchAssessmentItemsFeedbackInline$outboundSchema: z.ZodType<
  SearchAssessmentItemsFeedbackInline$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsFeedbackInline
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: SearchAssessmentItemsFeedbackInlineShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsFeedbackInline$ {
  /** @deprecated use `SearchAssessmentItemsFeedbackInline$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsFeedbackInline$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsFeedbackInline$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsFeedbackInline$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsFeedbackInline$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsFeedbackInline$Outbound;
}

export function searchAssessmentItemsFeedbackInlineToJSON(
  searchAssessmentItemsFeedbackInline: SearchAssessmentItemsFeedbackInline,
): string {
  return JSON.stringify(
    SearchAssessmentItemsFeedbackInline$outboundSchema.parse(
      searchAssessmentItemsFeedbackInline,
    ),
  );
}

export function searchAssessmentItemsFeedbackInlineFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsFeedbackInline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsFeedbackInline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsFeedbackInline' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsFeedbackBlockShowHide$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsFeedbackBlockShowHide> = z
    .nativeEnum(SearchAssessmentItemsFeedbackBlockShowHide);

/** @internal */
export const SearchAssessmentItemsFeedbackBlockShowHide$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentItemsFeedbackBlockShowHide> =
    SearchAssessmentItemsFeedbackBlockShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsFeedbackBlockShowHide$ {
  /** @deprecated use `SearchAssessmentItemsFeedbackBlockShowHide$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsFeedbackBlockShowHide$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsFeedbackBlockShowHide$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsFeedbackBlockShowHide$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsFeedbackBlock$inboundSchema: z.ZodType<
  SearchAssessmentItemsFeedbackBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: SearchAssessmentItemsFeedbackBlockShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type SearchAssessmentItemsFeedbackBlock$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const SearchAssessmentItemsFeedbackBlock$outboundSchema: z.ZodType<
  SearchAssessmentItemsFeedbackBlock$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsFeedbackBlock
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: SearchAssessmentItemsFeedbackBlockShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsFeedbackBlock$ {
  /** @deprecated use `SearchAssessmentItemsFeedbackBlock$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsFeedbackBlock$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsFeedbackBlock$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsFeedbackBlock$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsFeedbackBlock$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsFeedbackBlock$Outbound;
}

export function searchAssessmentItemsFeedbackBlockToJSON(
  searchAssessmentItemsFeedbackBlock: SearchAssessmentItemsFeedbackBlock,
): string {
  return JSON.stringify(
    SearchAssessmentItemsFeedbackBlock$outboundSchema.parse(
      searchAssessmentItemsFeedbackBlock,
    ),
  );
}

export function searchAssessmentItemsFeedbackBlockFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsFeedbackBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentItemsFeedbackBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsFeedbackBlock' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsItem$inboundSchema: z.ZodType<
  SearchAssessmentItemsItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: SearchAssessmentItemsType$inboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => SearchAssessmentItemsResponseDeclaration$inboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => SearchAssessmentItemsOutcomeDeclaration$inboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    SearchAssessmentItemsResponseProcessing$inboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => SearchAssessmentItemsContent$inboundSchema),
  modalFeedback: z.array(
    z.lazy(() => SearchAssessmentItemsModalFeedback$inboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => SearchAssessmentItemsFeedbackInline$inboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => SearchAssessmentItemsFeedbackBlock$inboundSchema),
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type SearchAssessmentItemsItem$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  type: string;
  qtiVersion: string;
  timeDependent: boolean;
  adaptive: boolean;
  responseDeclarations?:
    | Array<SearchAssessmentItemsResponseDeclaration$Outbound>
    | undefined;
  outcomeDeclarations?:
    | Array<SearchAssessmentItemsOutcomeDeclaration$Outbound>
    | undefined;
  responseProcessing: SearchAssessmentItemsResponseProcessing$Outbound;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: SearchAssessmentItemsContent$Outbound;
  modalFeedback?:
    | Array<SearchAssessmentItemsModalFeedback$Outbound>
    | undefined;
  feedbackInline?:
    | Array<SearchAssessmentItemsFeedbackInline$Outbound>
    | undefined;
  feedbackBlock?:
    | Array<SearchAssessmentItemsFeedbackBlock$Outbound>
    | undefined;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const SearchAssessmentItemsItem$outboundSchema: z.ZodType<
  SearchAssessmentItemsItem$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsItem
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: SearchAssessmentItemsType$outboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => SearchAssessmentItemsResponseDeclaration$outboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => SearchAssessmentItemsOutcomeDeclaration$outboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    SearchAssessmentItemsResponseProcessing$outboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => SearchAssessmentItemsContent$outboundSchema),
  modalFeedback: z.array(
    z.lazy(() => SearchAssessmentItemsModalFeedback$outboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => SearchAssessmentItemsFeedbackInline$outboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => SearchAssessmentItemsFeedbackBlock$outboundSchema),
  ).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsItem$ {
  /** @deprecated use `SearchAssessmentItemsItem$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsItem$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsItem$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentItemsItem$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsItem$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsItem$Outbound;
}

export function searchAssessmentItemsItemToJSON(
  searchAssessmentItemsItem: SearchAssessmentItemsItem,
): string {
  return JSON.stringify(
    SearchAssessmentItemsItem$outboundSchema.parse(searchAssessmentItemsItem),
  );
}

export function searchAssessmentItemsItemFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentItemsItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsItem' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentItemsOrderResponse$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsOrderResponse
> = z.nativeEnum(SearchAssessmentItemsOrderResponse);

/** @internal */
export const SearchAssessmentItemsOrderResponse$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentItemsOrderResponse
> = SearchAssessmentItemsOrderResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsOrderResponse$ {
  /** @deprecated use `SearchAssessmentItemsOrderResponse$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsOrderResponse$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsOrderResponse$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsOrderResponse$outboundSchema;
}

/** @internal */
export const SearchAssessmentItemsResponse$inboundSchema: z.ZodType<
  SearchAssessmentItemsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => SearchAssessmentItemsItem$inboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchAssessmentItemsOrderResponse$inboundSchema,
});

/** @internal */
export type SearchAssessmentItemsResponse$Outbound = {
  items: Array<SearchAssessmentItemsItem$Outbound>;
  total: number;
  page: number;
  pages: number;
  limit: number;
  sort: string;
  order: string;
};

/** @internal */
export const SearchAssessmentItemsResponse$outboundSchema: z.ZodType<
  SearchAssessmentItemsResponse$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsResponse
> = z.object({
  items: z.array(z.lazy(() => SearchAssessmentItemsItem$outboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchAssessmentItemsOrderResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsResponse$ {
  /** @deprecated use `SearchAssessmentItemsResponse$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentItemsResponse$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponse$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentItemsResponse$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsResponse$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsResponse$Outbound;
}

export function searchAssessmentItemsResponseToJSON(
  searchAssessmentItemsResponse: SearchAssessmentItemsResponse,
): string {
  return JSON.stringify(
    SearchAssessmentItemsResponse$outboundSchema.parse(
      searchAssessmentItemsResponse,
    ),
  );
}

export function searchAssessmentItemsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentItemsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentItemsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentItemsResponse' from JSON`,
  );
}
