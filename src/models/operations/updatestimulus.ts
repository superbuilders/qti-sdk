/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type Params = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
};

/**
 * The stimulus content to update.
 */
export type UpdateStimulusRequestBody = {
  params: Params;
  /**
   * Create or update a stimulus on the service provider with HTML content and optional configuration
   */
  body: models.Stimulus;
};

export type UpdateStimulusRequest = {
  /**
   * Stimulus identifier
   */
  identifier: string;
  /**
   * The stimulus content to update.
   */
  requestBody: UpdateStimulusRequestBody;
};

export type UpdateStimulusCatalogInfo = {
  /**
   * Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
   */
  id: string;
  /**
   * This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
   */
  support: string;
  /**
   * A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
   */
  content: string;
};

/**
 * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
 */
export type UpdateStimulusStylesheet = {
  /**
   * The identifier or location of the external stylesheet.
   */
  href: string;
  /**
   * The type of the external stylesheet.
   */
  type: string;
};

export type UpdateStimulusAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  xmlLang: string;
  title: string;
};

export type UpdateStimulusQtiStylesheetAttributes = {
  href: string;
  type: string;
};

export type UpdateStimulusQtiStylesheet = {
  attributes: UpdateStimulusQtiStylesheetAttributes;
};

export type UpdateStimulusQtiCatalogAttributes = {
  id: string;
};

export type UpdateStimulusQtiCardAttributes = {
  support: string;
};

export type UpdateStimulusQtiCard = {
  attributes: UpdateStimulusQtiCardAttributes;
  qtiHtmlContent: { [k: string]: any };
};

export type UpdateStimulusQtiCatalog = {
  attributes: UpdateStimulusQtiCatalogAttributes;
  qtiCard: UpdateStimulusQtiCard;
};

export type UpdateStimulusQtiCatalogInfo = {
  qtiCatalog: UpdateStimulusQtiCatalog;
};

export type UpdateStimulusQtiAssessmentStimulus = {
  attributes: UpdateStimulusAttributes;
  qtiStimulusBody: { [k: string]: any };
  qtiStylesheet?: UpdateStimulusQtiStylesheet | undefined;
  qtiCatalogInfo?: UpdateStimulusQtiCatalogInfo | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type UpdateStimulusContent = {
  qtiAssessmentStimulus: UpdateStimulusQtiAssessmentStimulus;
};

/**
 * Complete stimulus data structure returned from the database including parsed content and metadata
 */
export type UpdateStimulusResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Array of catalog cards.
   */
  catalogInfo: Array<UpdateStimulusCatalogInfo>;
  /**
   * A human readable label that can be used to describe the Stimulus.
   */
  label?: string | undefined;
  /**
   * The default language for the Stimulus.
   */
  language?: string | undefined;
  /**
   * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
   */
  stylesheet?: UpdateStimulusStylesheet | undefined;
  /**
   * The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
   */
  toolName?: string | undefined;
  /**
   * The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
   */
  toolVersion?: string | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: UpdateStimulusContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z
  .object({
    identifier: z.string(),
  });

/** @internal */
export type Params$Outbound = {
  identifier: string;
};

/** @internal */
export const Params$outboundSchema: z.ZodType<
  Params$Outbound,
  z.ZodTypeDef,
  Params
> = z.object({
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
  /** @deprecated use `Params$inboundSchema` instead. */
  export const inboundSchema = Params$inboundSchema;
  /** @deprecated use `Params$outboundSchema` instead. */
  export const outboundSchema = Params$outboundSchema;
  /** @deprecated use `Params$Outbound` instead. */
  export type Outbound = Params$Outbound;
}

export function paramsToJSON(params: Params): string {
  return JSON.stringify(Params$outboundSchema.parse(params));
}

export function paramsFromJSON(
  jsonString: string,
): SafeParseResult<Params, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Params$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Params' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusRequestBody$inboundSchema: z.ZodType<
  UpdateStimulusRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  params: z.lazy(() => Params$inboundSchema),
  body: models.Stimulus$inboundSchema,
});

/** @internal */
export type UpdateStimulusRequestBody$Outbound = {
  params: Params$Outbound;
  body: models.Stimulus$Outbound;
};

/** @internal */
export const UpdateStimulusRequestBody$outboundSchema: z.ZodType<
  UpdateStimulusRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateStimulusRequestBody
> = z.object({
  params: z.lazy(() => Params$outboundSchema),
  body: models.Stimulus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusRequestBody$ {
  /** @deprecated use `UpdateStimulusRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusRequestBody$inboundSchema;
  /** @deprecated use `UpdateStimulusRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusRequestBody$outboundSchema;
  /** @deprecated use `UpdateStimulusRequestBody$Outbound` instead. */
  export type Outbound = UpdateStimulusRequestBody$Outbound;
}

export function updateStimulusRequestBodyToJSON(
  updateStimulusRequestBody: UpdateStimulusRequestBody,
): string {
  return JSON.stringify(
    UpdateStimulusRequestBody$outboundSchema.parse(updateStimulusRequestBody),
  );
}

export function updateStimulusRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusRequest$inboundSchema: z.ZodType<
  UpdateStimulusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  RequestBody: z.lazy(() => UpdateStimulusRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateStimulusRequest$Outbound = {
  identifier: string;
  RequestBody: UpdateStimulusRequestBody$Outbound;
};

/** @internal */
export const UpdateStimulusRequest$outboundSchema: z.ZodType<
  UpdateStimulusRequest$Outbound,
  z.ZodTypeDef,
  UpdateStimulusRequest
> = z.object({
  identifier: z.string(),
  requestBody: z.lazy(() => UpdateStimulusRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusRequest$ {
  /** @deprecated use `UpdateStimulusRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusRequest$inboundSchema;
  /** @deprecated use `UpdateStimulusRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusRequest$outboundSchema;
  /** @deprecated use `UpdateStimulusRequest$Outbound` instead. */
  export type Outbound = UpdateStimulusRequest$Outbound;
}

export function updateStimulusRequestToJSON(
  updateStimulusRequest: UpdateStimulusRequest,
): string {
  return JSON.stringify(
    UpdateStimulusRequest$outboundSchema.parse(updateStimulusRequest),
  );
}

export function updateStimulusRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusRequest' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusCatalogInfo$inboundSchema: z.ZodType<
  UpdateStimulusCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/** @internal */
export type UpdateStimulusCatalogInfo$Outbound = {
  id: string;
  support: string;
  content: string;
};

/** @internal */
export const UpdateStimulusCatalogInfo$outboundSchema: z.ZodType<
  UpdateStimulusCatalogInfo$Outbound,
  z.ZodTypeDef,
  UpdateStimulusCatalogInfo
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusCatalogInfo$ {
  /** @deprecated use `UpdateStimulusCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusCatalogInfo$inboundSchema;
  /** @deprecated use `UpdateStimulusCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusCatalogInfo$outboundSchema;
  /** @deprecated use `UpdateStimulusCatalogInfo$Outbound` instead. */
  export type Outbound = UpdateStimulusCatalogInfo$Outbound;
}

export function updateStimulusCatalogInfoToJSON(
  updateStimulusCatalogInfo: UpdateStimulusCatalogInfo,
): string {
  return JSON.stringify(
    UpdateStimulusCatalogInfo$outboundSchema.parse(updateStimulusCatalogInfo),
  );
}

export function updateStimulusCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusCatalogInfo' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusStylesheet$inboundSchema: z.ZodType<
  UpdateStimulusStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateStimulusStylesheet$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateStimulusStylesheet$outboundSchema: z.ZodType<
  UpdateStimulusStylesheet$Outbound,
  z.ZodTypeDef,
  UpdateStimulusStylesheet
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusStylesheet$ {
  /** @deprecated use `UpdateStimulusStylesheet$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusStylesheet$inboundSchema;
  /** @deprecated use `UpdateStimulusStylesheet$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusStylesheet$outboundSchema;
  /** @deprecated use `UpdateStimulusStylesheet$Outbound` instead. */
  export type Outbound = UpdateStimulusStylesheet$Outbound;
}

export function updateStimulusStylesheetToJSON(
  updateStimulusStylesheet: UpdateStimulusStylesheet,
): string {
  return JSON.stringify(
    UpdateStimulusStylesheet$outboundSchema.parse(updateStimulusStylesheet),
  );
}

export function updateStimulusStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusStylesheet' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusAttributes$inboundSchema: z.ZodType<
  UpdateStimulusAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  "xml:lang": z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "xml:lang": "xmlLang",
  });
});

/** @internal */
export type UpdateStimulusAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  "xml:lang": string;
  title: string;
};

/** @internal */
export const UpdateStimulusAttributes$outboundSchema: z.ZodType<
  UpdateStimulusAttributes$Outbound,
  z.ZodTypeDef,
  UpdateStimulusAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  xmlLang: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    xmlLang: "xml:lang",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusAttributes$ {
  /** @deprecated use `UpdateStimulusAttributes$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusAttributes$inboundSchema;
  /** @deprecated use `UpdateStimulusAttributes$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusAttributes$outboundSchema;
  /** @deprecated use `UpdateStimulusAttributes$Outbound` instead. */
  export type Outbound = UpdateStimulusAttributes$Outbound;
}

export function updateStimulusAttributesToJSON(
  updateStimulusAttributes: UpdateStimulusAttributes,
): string {
  return JSON.stringify(
    UpdateStimulusAttributes$outboundSchema.parse(updateStimulusAttributes),
  );
}

export function updateStimulusAttributesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiStylesheetAttributes$inboundSchema: z.ZodType<
  UpdateStimulusQtiStylesheetAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateStimulusQtiStylesheetAttributes$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateStimulusQtiStylesheetAttributes$outboundSchema: z.ZodType<
  UpdateStimulusQtiStylesheetAttributes$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiStylesheetAttributes
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiStylesheetAttributes$ {
  /** @deprecated use `UpdateStimulusQtiStylesheetAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateStimulusQtiStylesheetAttributes$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiStylesheetAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStimulusQtiStylesheetAttributes$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiStylesheetAttributes$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiStylesheetAttributes$Outbound;
}

export function updateStimulusQtiStylesheetAttributesToJSON(
  updateStimulusQtiStylesheetAttributes: UpdateStimulusQtiStylesheetAttributes,
): string {
  return JSON.stringify(
    UpdateStimulusQtiStylesheetAttributes$outboundSchema.parse(
      updateStimulusQtiStylesheetAttributes,
    ),
  );
}

export function updateStimulusQtiStylesheetAttributesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiStylesheetAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStimulusQtiStylesheetAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiStylesheetAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiStylesheet$inboundSchema: z.ZodType<
  UpdateStimulusQtiStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    UpdateStimulusQtiStylesheetAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type UpdateStimulusQtiStylesheet$Outbound = {
  _attributes: UpdateStimulusQtiStylesheetAttributes$Outbound;
};

/** @internal */
export const UpdateStimulusQtiStylesheet$outboundSchema: z.ZodType<
  UpdateStimulusQtiStylesheet$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiStylesheet
> = z.object({
  attributes: z.lazy(() =>
    UpdateStimulusQtiStylesheetAttributes$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiStylesheet$ {
  /** @deprecated use `UpdateStimulusQtiStylesheet$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusQtiStylesheet$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiStylesheet$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusQtiStylesheet$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiStylesheet$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiStylesheet$Outbound;
}

export function updateStimulusQtiStylesheetToJSON(
  updateStimulusQtiStylesheet: UpdateStimulusQtiStylesheet,
): string {
  return JSON.stringify(
    UpdateStimulusQtiStylesheet$outboundSchema.parse(
      updateStimulusQtiStylesheet,
    ),
  );
}

export function updateStimulusQtiStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusQtiStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiStylesheet' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiCatalogAttributes$inboundSchema: z.ZodType<
  UpdateStimulusQtiCatalogAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateStimulusQtiCatalogAttributes$Outbound = {
  id: string;
};

/** @internal */
export const UpdateStimulusQtiCatalogAttributes$outboundSchema: z.ZodType<
  UpdateStimulusQtiCatalogAttributes$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiCatalogAttributes
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiCatalogAttributes$ {
  /** @deprecated use `UpdateStimulusQtiCatalogAttributes$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusQtiCatalogAttributes$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiCatalogAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStimulusQtiCatalogAttributes$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiCatalogAttributes$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiCatalogAttributes$Outbound;
}

export function updateStimulusQtiCatalogAttributesToJSON(
  updateStimulusQtiCatalogAttributes: UpdateStimulusQtiCatalogAttributes,
): string {
  return JSON.stringify(
    UpdateStimulusQtiCatalogAttributes$outboundSchema.parse(
      updateStimulusQtiCatalogAttributes,
    ),
  );
}

export function updateStimulusQtiCatalogAttributesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiCatalogAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStimulusQtiCatalogAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiCatalogAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiCardAttributes$inboundSchema: z.ZodType<
  UpdateStimulusQtiCardAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  support: z.string(),
});

/** @internal */
export type UpdateStimulusQtiCardAttributes$Outbound = {
  support: string;
};

/** @internal */
export const UpdateStimulusQtiCardAttributes$outboundSchema: z.ZodType<
  UpdateStimulusQtiCardAttributes$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiCardAttributes
> = z.object({
  support: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiCardAttributes$ {
  /** @deprecated use `UpdateStimulusQtiCardAttributes$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusQtiCardAttributes$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiCardAttributes$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusQtiCardAttributes$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiCardAttributes$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiCardAttributes$Outbound;
}

export function updateStimulusQtiCardAttributesToJSON(
  updateStimulusQtiCardAttributes: UpdateStimulusQtiCardAttributes,
): string {
  return JSON.stringify(
    UpdateStimulusQtiCardAttributes$outboundSchema.parse(
      updateStimulusQtiCardAttributes,
    ),
  );
}

export function updateStimulusQtiCardAttributesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiCardAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusQtiCardAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiCardAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiCard$inboundSchema: z.ZodType<
  UpdateStimulusQtiCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => UpdateStimulusQtiCardAttributes$inboundSchema),
  "qti-html-content": z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-html-content": "qtiHtmlContent",
  });
});

/** @internal */
export type UpdateStimulusQtiCard$Outbound = {
  _attributes: UpdateStimulusQtiCardAttributes$Outbound;
  "qti-html-content": { [k: string]: any };
};

/** @internal */
export const UpdateStimulusQtiCard$outboundSchema: z.ZodType<
  UpdateStimulusQtiCard$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiCard
> = z.object({
  attributes: z.lazy(() => UpdateStimulusQtiCardAttributes$outboundSchema),
  qtiHtmlContent: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiHtmlContent: "qti-html-content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiCard$ {
  /** @deprecated use `UpdateStimulusQtiCard$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusQtiCard$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiCard$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusQtiCard$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiCard$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiCard$Outbound;
}

export function updateStimulusQtiCardToJSON(
  updateStimulusQtiCard: UpdateStimulusQtiCard,
): string {
  return JSON.stringify(
    UpdateStimulusQtiCard$outboundSchema.parse(updateStimulusQtiCard),
  );
}

export function updateStimulusQtiCardFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusQtiCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiCard' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiCatalog$inboundSchema: z.ZodType<
  UpdateStimulusQtiCatalog,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => UpdateStimulusQtiCatalogAttributes$inboundSchema),
  "qti-card": z.lazy(() => UpdateStimulusQtiCard$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-card": "qtiCard",
  });
});

/** @internal */
export type UpdateStimulusQtiCatalog$Outbound = {
  _attributes: UpdateStimulusQtiCatalogAttributes$Outbound;
  "qti-card": UpdateStimulusQtiCard$Outbound;
};

/** @internal */
export const UpdateStimulusQtiCatalog$outboundSchema: z.ZodType<
  UpdateStimulusQtiCatalog$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiCatalog
> = z.object({
  attributes: z.lazy(() => UpdateStimulusQtiCatalogAttributes$outboundSchema),
  qtiCard: z.lazy(() => UpdateStimulusQtiCard$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiCard: "qti-card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiCatalog$ {
  /** @deprecated use `UpdateStimulusQtiCatalog$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusQtiCatalog$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiCatalog$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusQtiCatalog$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiCatalog$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiCatalog$Outbound;
}

export function updateStimulusQtiCatalogToJSON(
  updateStimulusQtiCatalog: UpdateStimulusQtiCatalog,
): string {
  return JSON.stringify(
    UpdateStimulusQtiCatalog$outboundSchema.parse(updateStimulusQtiCatalog),
  );
}

export function updateStimulusQtiCatalogFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiCatalog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusQtiCatalog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiCatalog' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiCatalogInfo$inboundSchema: z.ZodType<
  UpdateStimulusQtiCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-catalog": z.lazy(() => UpdateStimulusQtiCatalog$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-catalog": "qtiCatalog",
  });
});

/** @internal */
export type UpdateStimulusQtiCatalogInfo$Outbound = {
  "qti-catalog": UpdateStimulusQtiCatalog$Outbound;
};

/** @internal */
export const UpdateStimulusQtiCatalogInfo$outboundSchema: z.ZodType<
  UpdateStimulusQtiCatalogInfo$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiCatalogInfo
> = z.object({
  qtiCatalog: z.lazy(() => UpdateStimulusQtiCatalog$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiCatalog: "qti-catalog",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiCatalogInfo$ {
  /** @deprecated use `UpdateStimulusQtiCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusQtiCatalogInfo$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusQtiCatalogInfo$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiCatalogInfo$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiCatalogInfo$Outbound;
}

export function updateStimulusQtiCatalogInfoToJSON(
  updateStimulusQtiCatalogInfo: UpdateStimulusQtiCatalogInfo,
): string {
  return JSON.stringify(
    UpdateStimulusQtiCatalogInfo$outboundSchema.parse(
      updateStimulusQtiCatalogInfo,
    ),
  );
}

export function updateStimulusQtiCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusQtiCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiCatalogInfo' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusQtiAssessmentStimulus$inboundSchema: z.ZodType<
  UpdateStimulusQtiAssessmentStimulus,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => UpdateStimulusAttributes$inboundSchema),
  "qti-stimulus-body": z.record(z.any()),
  "qti-stylesheet": z.lazy(() => UpdateStimulusQtiStylesheet$inboundSchema)
    .optional(),
  "qti-catalog-info": z.lazy(() => UpdateStimulusQtiCatalogInfo$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-stimulus-body": "qtiStimulusBody",
    "qti-stylesheet": "qtiStylesheet",
    "qti-catalog-info": "qtiCatalogInfo",
  });
});

/** @internal */
export type UpdateStimulusQtiAssessmentStimulus$Outbound = {
  _attributes: UpdateStimulusAttributes$Outbound;
  "qti-stimulus-body": { [k: string]: any };
  "qti-stylesheet"?: UpdateStimulusQtiStylesheet$Outbound | undefined;
  "qti-catalog-info"?: UpdateStimulusQtiCatalogInfo$Outbound | undefined;
};

/** @internal */
export const UpdateStimulusQtiAssessmentStimulus$outboundSchema: z.ZodType<
  UpdateStimulusQtiAssessmentStimulus$Outbound,
  z.ZodTypeDef,
  UpdateStimulusQtiAssessmentStimulus
> = z.object({
  attributes: z.lazy(() => UpdateStimulusAttributes$outboundSchema),
  qtiStimulusBody: z.record(z.any()),
  qtiStylesheet: z.lazy(() => UpdateStimulusQtiStylesheet$outboundSchema)
    .optional(),
  qtiCatalogInfo: z.lazy(() => UpdateStimulusQtiCatalogInfo$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiStimulusBody: "qti-stimulus-body",
    qtiStylesheet: "qti-stylesheet",
    qtiCatalogInfo: "qti-catalog-info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusQtiAssessmentStimulus$ {
  /** @deprecated use `UpdateStimulusQtiAssessmentStimulus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateStimulusQtiAssessmentStimulus$inboundSchema;
  /** @deprecated use `UpdateStimulusQtiAssessmentStimulus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStimulusQtiAssessmentStimulus$outboundSchema;
  /** @deprecated use `UpdateStimulusQtiAssessmentStimulus$Outbound` instead. */
  export type Outbound = UpdateStimulusQtiAssessmentStimulus$Outbound;
}

export function updateStimulusQtiAssessmentStimulusToJSON(
  updateStimulusQtiAssessmentStimulus: UpdateStimulusQtiAssessmentStimulus,
): string {
  return JSON.stringify(
    UpdateStimulusQtiAssessmentStimulus$outboundSchema.parse(
      updateStimulusQtiAssessmentStimulus,
    ),
  );
}

export function updateStimulusQtiAssessmentStimulusFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusQtiAssessmentStimulus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStimulusQtiAssessmentStimulus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusQtiAssessmentStimulus' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusContent$inboundSchema: z.ZodType<
  UpdateStimulusContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-stimulus": z.lazy(() =>
    UpdateStimulusQtiAssessmentStimulus$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-stimulus": "qtiAssessmentStimulus",
  });
});

/** @internal */
export type UpdateStimulusContent$Outbound = {
  "qti-assessment-stimulus": UpdateStimulusQtiAssessmentStimulus$Outbound;
};

/** @internal */
export const UpdateStimulusContent$outboundSchema: z.ZodType<
  UpdateStimulusContent$Outbound,
  z.ZodTypeDef,
  UpdateStimulusContent
> = z.object({
  qtiAssessmentStimulus: z.lazy(() =>
    UpdateStimulusQtiAssessmentStimulus$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentStimulus: "qti-assessment-stimulus",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusContent$ {
  /** @deprecated use `UpdateStimulusContent$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusContent$inboundSchema;
  /** @deprecated use `UpdateStimulusContent$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusContent$outboundSchema;
  /** @deprecated use `UpdateStimulusContent$Outbound` instead. */
  export type Outbound = UpdateStimulusContent$Outbound;
}

export function updateStimulusContentToJSON(
  updateStimulusContent: UpdateStimulusContent,
): string {
  return JSON.stringify(
    UpdateStimulusContent$outboundSchema.parse(updateStimulusContent),
  );
}

export function updateStimulusContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusContent' from JSON`,
  );
}

/** @internal */
export const UpdateStimulusResponse$inboundSchema: z.ZodType<
  UpdateStimulusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => UpdateStimulusCatalogInfo$inboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => UpdateStimulusStylesheet$inboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateStimulusContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type UpdateStimulusResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  catalogInfo: Array<UpdateStimulusCatalogInfo$Outbound>;
  label?: string | undefined;
  language: string;
  stylesheet?: UpdateStimulusStylesheet$Outbound | undefined;
  toolName?: string | undefined;
  toolVersion?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: UpdateStimulusContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const UpdateStimulusResponse$outboundSchema: z.ZodType<
  UpdateStimulusResponse$Outbound,
  z.ZodTypeDef,
  UpdateStimulusResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => UpdateStimulusCatalogInfo$outboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => UpdateStimulusStylesheet$outboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateStimulusContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStimulusResponse$ {
  /** @deprecated use `UpdateStimulusResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateStimulusResponse$inboundSchema;
  /** @deprecated use `UpdateStimulusResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateStimulusResponse$outboundSchema;
  /** @deprecated use `UpdateStimulusResponse$Outbound` instead. */
  export type Outbound = UpdateStimulusResponse$Outbound;
}

export function updateStimulusResponseToJSON(
  updateStimulusResponse: UpdateStimulusResponse,
): string {
  return JSON.stringify(
    UpdateStimulusResponse$outboundSchema.parse(updateStimulusResponse),
  );
}

export function updateStimulusResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStimulusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStimulusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStimulusResponse' from JSON`,
  );
}
