/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTestPartRequest = {
  /**
   * The unique identifier of the parent assessment test
   */
  assessmentTestIdentifier: string;
  /**
   * The unique identifier of the test part to delete
   */
  identifier: string;
};

/** @internal */
export const DeleteTestPartRequest$inboundSchema: z.ZodType<
  DeleteTestPartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  identifier: z.string(),
});

/** @internal */
export type DeleteTestPartRequest$Outbound = {
  assessmentTestIdentifier: string;
  identifier: string;
};

/** @internal */
export const DeleteTestPartRequest$outboundSchema: z.ZodType<
  DeleteTestPartRequest$Outbound,
  z.ZodTypeDef,
  DeleteTestPartRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTestPartRequest$ {
  /** @deprecated use `DeleteTestPartRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTestPartRequest$inboundSchema;
  /** @deprecated use `DeleteTestPartRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTestPartRequest$outboundSchema;
  /** @deprecated use `DeleteTestPartRequest$Outbound` instead. */
  export type Outbound = DeleteTestPartRequest$Outbound;
}

export function deleteTestPartRequestToJSON(
  deleteTestPartRequest: DeleteTestPartRequest,
): string {
  return JSON.stringify(
    DeleteTestPartRequest$outboundSchema.parse(deleteTestPartRequest),
  );
}

export function deleteTestPartRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTestPartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTestPartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTestPartRequest' from JSON`,
  );
}
