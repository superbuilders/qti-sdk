/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateStimulusCatalogInfo = {
  /**
   * Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
   */
  id: string;
  /**
   * This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
   */
  support: string;
  /**
   * A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
   */
  content: string;
};

/**
 * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
 */
export type CreateStimulusStylesheet = {
  /**
   * The identifier or location of the external stylesheet.
   */
  href: string;
  /**
   * The type of the external stylesheet.
   */
  type: string;
};

export type CreateStimulusAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  xmlLang: string;
  title: string;
};

export type CreateStimulusQtiStylesheetAttributes = {
  href: string;
  type: string;
};

export type CreateStimulusQtiStylesheet = {
  attributes: CreateStimulusQtiStylesheetAttributes;
};

export type CreateStimulusQtiCatalogAttributes = {
  id: string;
};

export type CreateStimulusQtiCardAttributes = {
  support: string;
};

export type CreateStimulusQtiCard = {
  attributes: CreateStimulusQtiCardAttributes;
  qtiHtmlContent: { [k: string]: any };
};

export type CreateStimulusQtiCatalog = {
  attributes: CreateStimulusQtiCatalogAttributes;
  qtiCard: CreateStimulusQtiCard;
};

export type CreateStimulusQtiCatalogInfo = {
  qtiCatalog: CreateStimulusQtiCatalog;
};

export type CreateStimulusQtiAssessmentStimulus = {
  attributes: CreateStimulusAttributes;
  qtiStimulusBody: { [k: string]: any };
  qtiStylesheet?: CreateStimulusQtiStylesheet | undefined;
  qtiCatalogInfo?: CreateStimulusQtiCatalogInfo | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type CreateStimulusContent = {
  qtiAssessmentStimulus: CreateStimulusQtiAssessmentStimulus;
};

/**
 * Complete stimulus data structure returned from the database including parsed content and metadata
 */
export type CreateStimulusResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Array of catalog cards.
   */
  catalogInfo: Array<CreateStimulusCatalogInfo>;
  /**
   * A human readable label that can be used to describe the Stimulus.
   */
  label?: string | undefined;
  /**
   * The default language for the Stimulus.
   */
  language?: string | undefined;
  /**
   * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
   */
  stylesheet?: CreateStimulusStylesheet | undefined;
  /**
   * The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
   */
  toolName?: string | undefined;
  /**
   * The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
   */
  toolVersion?: string | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: CreateStimulusContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/** @internal */
export const CreateStimulusCatalogInfo$inboundSchema: z.ZodType<
  CreateStimulusCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/** @internal */
export type CreateStimulusCatalogInfo$Outbound = {
  id: string;
  support: string;
  content: string;
};

/** @internal */
export const CreateStimulusCatalogInfo$outboundSchema: z.ZodType<
  CreateStimulusCatalogInfo$Outbound,
  z.ZodTypeDef,
  CreateStimulusCatalogInfo
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusCatalogInfo$ {
  /** @deprecated use `CreateStimulusCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusCatalogInfo$inboundSchema;
  /** @deprecated use `CreateStimulusCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusCatalogInfo$outboundSchema;
  /** @deprecated use `CreateStimulusCatalogInfo$Outbound` instead. */
  export type Outbound = CreateStimulusCatalogInfo$Outbound;
}

export function createStimulusCatalogInfoToJSON(
  createStimulusCatalogInfo: CreateStimulusCatalogInfo,
): string {
  return JSON.stringify(
    CreateStimulusCatalogInfo$outboundSchema.parse(createStimulusCatalogInfo),
  );
}

export function createStimulusCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusCatalogInfo' from JSON`,
  );
}

/** @internal */
export const CreateStimulusStylesheet$inboundSchema: z.ZodType<
  CreateStimulusStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateStimulusStylesheet$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateStimulusStylesheet$outboundSchema: z.ZodType<
  CreateStimulusStylesheet$Outbound,
  z.ZodTypeDef,
  CreateStimulusStylesheet
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusStylesheet$ {
  /** @deprecated use `CreateStimulusStylesheet$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusStylesheet$inboundSchema;
  /** @deprecated use `CreateStimulusStylesheet$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusStylesheet$outboundSchema;
  /** @deprecated use `CreateStimulusStylesheet$Outbound` instead. */
  export type Outbound = CreateStimulusStylesheet$Outbound;
}

export function createStimulusStylesheetToJSON(
  createStimulusStylesheet: CreateStimulusStylesheet,
): string {
  return JSON.stringify(
    CreateStimulusStylesheet$outboundSchema.parse(createStimulusStylesheet),
  );
}

export function createStimulusStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusStylesheet' from JSON`,
  );
}

/** @internal */
export const CreateStimulusAttributes$inboundSchema: z.ZodType<
  CreateStimulusAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  "xml:lang": z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "xml:lang": "xmlLang",
  });
});

/** @internal */
export type CreateStimulusAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  "xml:lang": string;
  title: string;
};

/** @internal */
export const CreateStimulusAttributes$outboundSchema: z.ZodType<
  CreateStimulusAttributes$Outbound,
  z.ZodTypeDef,
  CreateStimulusAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  xmlLang: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    xmlLang: "xml:lang",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusAttributes$ {
  /** @deprecated use `CreateStimulusAttributes$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusAttributes$inboundSchema;
  /** @deprecated use `CreateStimulusAttributes$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusAttributes$outboundSchema;
  /** @deprecated use `CreateStimulusAttributes$Outbound` instead. */
  export type Outbound = CreateStimulusAttributes$Outbound;
}

export function createStimulusAttributesToJSON(
  createStimulusAttributes: CreateStimulusAttributes,
): string {
  return JSON.stringify(
    CreateStimulusAttributes$outboundSchema.parse(createStimulusAttributes),
  );
}

export function createStimulusAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusAttributes' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiStylesheetAttributes$inboundSchema: z.ZodType<
  CreateStimulusQtiStylesheetAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateStimulusQtiStylesheetAttributes$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateStimulusQtiStylesheetAttributes$outboundSchema: z.ZodType<
  CreateStimulusQtiStylesheetAttributes$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiStylesheetAttributes
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiStylesheetAttributes$ {
  /** @deprecated use `CreateStimulusQtiStylesheetAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateStimulusQtiStylesheetAttributes$inboundSchema;
  /** @deprecated use `CreateStimulusQtiStylesheetAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateStimulusQtiStylesheetAttributes$outboundSchema;
  /** @deprecated use `CreateStimulusQtiStylesheetAttributes$Outbound` instead. */
  export type Outbound = CreateStimulusQtiStylesheetAttributes$Outbound;
}

export function createStimulusQtiStylesheetAttributesToJSON(
  createStimulusQtiStylesheetAttributes: CreateStimulusQtiStylesheetAttributes,
): string {
  return JSON.stringify(
    CreateStimulusQtiStylesheetAttributes$outboundSchema.parse(
      createStimulusQtiStylesheetAttributes,
    ),
  );
}

export function createStimulusQtiStylesheetAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiStylesheetAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateStimulusQtiStylesheetAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiStylesheetAttributes' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiStylesheet$inboundSchema: z.ZodType<
  CreateStimulusQtiStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    CreateStimulusQtiStylesheetAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type CreateStimulusQtiStylesheet$Outbound = {
  _attributes: CreateStimulusQtiStylesheetAttributes$Outbound;
};

/** @internal */
export const CreateStimulusQtiStylesheet$outboundSchema: z.ZodType<
  CreateStimulusQtiStylesheet$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiStylesheet
> = z.object({
  attributes: z.lazy(() =>
    CreateStimulusQtiStylesheetAttributes$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiStylesheet$ {
  /** @deprecated use `CreateStimulusQtiStylesheet$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusQtiStylesheet$inboundSchema;
  /** @deprecated use `CreateStimulusQtiStylesheet$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusQtiStylesheet$outboundSchema;
  /** @deprecated use `CreateStimulusQtiStylesheet$Outbound` instead. */
  export type Outbound = CreateStimulusQtiStylesheet$Outbound;
}

export function createStimulusQtiStylesheetToJSON(
  createStimulusQtiStylesheet: CreateStimulusQtiStylesheet,
): string {
  return JSON.stringify(
    CreateStimulusQtiStylesheet$outboundSchema.parse(
      createStimulusQtiStylesheet,
    ),
  );
}

export function createStimulusQtiStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusQtiStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiStylesheet' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiCatalogAttributes$inboundSchema: z.ZodType<
  CreateStimulusQtiCatalogAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateStimulusQtiCatalogAttributes$Outbound = {
  id: string;
};

/** @internal */
export const CreateStimulusQtiCatalogAttributes$outboundSchema: z.ZodType<
  CreateStimulusQtiCatalogAttributes$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiCatalogAttributes
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiCatalogAttributes$ {
  /** @deprecated use `CreateStimulusQtiCatalogAttributes$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusQtiCatalogAttributes$inboundSchema;
  /** @deprecated use `CreateStimulusQtiCatalogAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateStimulusQtiCatalogAttributes$outboundSchema;
  /** @deprecated use `CreateStimulusQtiCatalogAttributes$Outbound` instead. */
  export type Outbound = CreateStimulusQtiCatalogAttributes$Outbound;
}

export function createStimulusQtiCatalogAttributesToJSON(
  createStimulusQtiCatalogAttributes: CreateStimulusQtiCatalogAttributes,
): string {
  return JSON.stringify(
    CreateStimulusQtiCatalogAttributes$outboundSchema.parse(
      createStimulusQtiCatalogAttributes,
    ),
  );
}

export function createStimulusQtiCatalogAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiCatalogAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateStimulusQtiCatalogAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiCatalogAttributes' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiCardAttributes$inboundSchema: z.ZodType<
  CreateStimulusQtiCardAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  support: z.string(),
});

/** @internal */
export type CreateStimulusQtiCardAttributes$Outbound = {
  support: string;
};

/** @internal */
export const CreateStimulusQtiCardAttributes$outboundSchema: z.ZodType<
  CreateStimulusQtiCardAttributes$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiCardAttributes
> = z.object({
  support: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiCardAttributes$ {
  /** @deprecated use `CreateStimulusQtiCardAttributes$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusQtiCardAttributes$inboundSchema;
  /** @deprecated use `CreateStimulusQtiCardAttributes$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusQtiCardAttributes$outboundSchema;
  /** @deprecated use `CreateStimulusQtiCardAttributes$Outbound` instead. */
  export type Outbound = CreateStimulusQtiCardAttributes$Outbound;
}

export function createStimulusQtiCardAttributesToJSON(
  createStimulusQtiCardAttributes: CreateStimulusQtiCardAttributes,
): string {
  return JSON.stringify(
    CreateStimulusQtiCardAttributes$outboundSchema.parse(
      createStimulusQtiCardAttributes,
    ),
  );
}

export function createStimulusQtiCardAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiCardAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusQtiCardAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiCardAttributes' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiCard$inboundSchema: z.ZodType<
  CreateStimulusQtiCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => CreateStimulusQtiCardAttributes$inboundSchema),
  "qti-html-content": z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-html-content": "qtiHtmlContent",
  });
});

/** @internal */
export type CreateStimulusQtiCard$Outbound = {
  _attributes: CreateStimulusQtiCardAttributes$Outbound;
  "qti-html-content": { [k: string]: any };
};

/** @internal */
export const CreateStimulusQtiCard$outboundSchema: z.ZodType<
  CreateStimulusQtiCard$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiCard
> = z.object({
  attributes: z.lazy(() => CreateStimulusQtiCardAttributes$outboundSchema),
  qtiHtmlContent: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiHtmlContent: "qti-html-content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiCard$ {
  /** @deprecated use `CreateStimulusQtiCard$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusQtiCard$inboundSchema;
  /** @deprecated use `CreateStimulusQtiCard$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusQtiCard$outboundSchema;
  /** @deprecated use `CreateStimulusQtiCard$Outbound` instead. */
  export type Outbound = CreateStimulusQtiCard$Outbound;
}

export function createStimulusQtiCardToJSON(
  createStimulusQtiCard: CreateStimulusQtiCard,
): string {
  return JSON.stringify(
    CreateStimulusQtiCard$outboundSchema.parse(createStimulusQtiCard),
  );
}

export function createStimulusQtiCardFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusQtiCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiCard' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiCatalog$inboundSchema: z.ZodType<
  CreateStimulusQtiCatalog,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => CreateStimulusQtiCatalogAttributes$inboundSchema),
  "qti-card": z.lazy(() => CreateStimulusQtiCard$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-card": "qtiCard",
  });
});

/** @internal */
export type CreateStimulusQtiCatalog$Outbound = {
  _attributes: CreateStimulusQtiCatalogAttributes$Outbound;
  "qti-card": CreateStimulusQtiCard$Outbound;
};

/** @internal */
export const CreateStimulusQtiCatalog$outboundSchema: z.ZodType<
  CreateStimulusQtiCatalog$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiCatalog
> = z.object({
  attributes: z.lazy(() => CreateStimulusQtiCatalogAttributes$outboundSchema),
  qtiCard: z.lazy(() => CreateStimulusQtiCard$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiCard: "qti-card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiCatalog$ {
  /** @deprecated use `CreateStimulusQtiCatalog$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusQtiCatalog$inboundSchema;
  /** @deprecated use `CreateStimulusQtiCatalog$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusQtiCatalog$outboundSchema;
  /** @deprecated use `CreateStimulusQtiCatalog$Outbound` instead. */
  export type Outbound = CreateStimulusQtiCatalog$Outbound;
}

export function createStimulusQtiCatalogToJSON(
  createStimulusQtiCatalog: CreateStimulusQtiCatalog,
): string {
  return JSON.stringify(
    CreateStimulusQtiCatalog$outboundSchema.parse(createStimulusQtiCatalog),
  );
}

export function createStimulusQtiCatalogFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiCatalog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusQtiCatalog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiCatalog' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiCatalogInfo$inboundSchema: z.ZodType<
  CreateStimulusQtiCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-catalog": z.lazy(() => CreateStimulusQtiCatalog$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-catalog": "qtiCatalog",
  });
});

/** @internal */
export type CreateStimulusQtiCatalogInfo$Outbound = {
  "qti-catalog": CreateStimulusQtiCatalog$Outbound;
};

/** @internal */
export const CreateStimulusQtiCatalogInfo$outboundSchema: z.ZodType<
  CreateStimulusQtiCatalogInfo$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiCatalogInfo
> = z.object({
  qtiCatalog: z.lazy(() => CreateStimulusQtiCatalog$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiCatalog: "qti-catalog",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiCatalogInfo$ {
  /** @deprecated use `CreateStimulusQtiCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusQtiCatalogInfo$inboundSchema;
  /** @deprecated use `CreateStimulusQtiCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusQtiCatalogInfo$outboundSchema;
  /** @deprecated use `CreateStimulusQtiCatalogInfo$Outbound` instead. */
  export type Outbound = CreateStimulusQtiCatalogInfo$Outbound;
}

export function createStimulusQtiCatalogInfoToJSON(
  createStimulusQtiCatalogInfo: CreateStimulusQtiCatalogInfo,
): string {
  return JSON.stringify(
    CreateStimulusQtiCatalogInfo$outboundSchema.parse(
      createStimulusQtiCatalogInfo,
    ),
  );
}

export function createStimulusQtiCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusQtiCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiCatalogInfo' from JSON`,
  );
}

/** @internal */
export const CreateStimulusQtiAssessmentStimulus$inboundSchema: z.ZodType<
  CreateStimulusQtiAssessmentStimulus,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => CreateStimulusAttributes$inboundSchema),
  "qti-stimulus-body": z.record(z.any()),
  "qti-stylesheet": z.lazy(() => CreateStimulusQtiStylesheet$inboundSchema)
    .optional(),
  "qti-catalog-info": z.lazy(() => CreateStimulusQtiCatalogInfo$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-stimulus-body": "qtiStimulusBody",
    "qti-stylesheet": "qtiStylesheet",
    "qti-catalog-info": "qtiCatalogInfo",
  });
});

/** @internal */
export type CreateStimulusQtiAssessmentStimulus$Outbound = {
  _attributes: CreateStimulusAttributes$Outbound;
  "qti-stimulus-body": { [k: string]: any };
  "qti-stylesheet"?: CreateStimulusQtiStylesheet$Outbound | undefined;
  "qti-catalog-info"?: CreateStimulusQtiCatalogInfo$Outbound | undefined;
};

/** @internal */
export const CreateStimulusQtiAssessmentStimulus$outboundSchema: z.ZodType<
  CreateStimulusQtiAssessmentStimulus$Outbound,
  z.ZodTypeDef,
  CreateStimulusQtiAssessmentStimulus
> = z.object({
  attributes: z.lazy(() => CreateStimulusAttributes$outboundSchema),
  qtiStimulusBody: z.record(z.any()),
  qtiStylesheet: z.lazy(() => CreateStimulusQtiStylesheet$outboundSchema)
    .optional(),
  qtiCatalogInfo: z.lazy(() => CreateStimulusQtiCatalogInfo$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiStimulusBody: "qti-stimulus-body",
    qtiStylesheet: "qti-stylesheet",
    qtiCatalogInfo: "qti-catalog-info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusQtiAssessmentStimulus$ {
  /** @deprecated use `CreateStimulusQtiAssessmentStimulus$inboundSchema` instead. */
  export const inboundSchema =
    CreateStimulusQtiAssessmentStimulus$inboundSchema;
  /** @deprecated use `CreateStimulusQtiAssessmentStimulus$outboundSchema` instead. */
  export const outboundSchema =
    CreateStimulusQtiAssessmentStimulus$outboundSchema;
  /** @deprecated use `CreateStimulusQtiAssessmentStimulus$Outbound` instead. */
  export type Outbound = CreateStimulusQtiAssessmentStimulus$Outbound;
}

export function createStimulusQtiAssessmentStimulusToJSON(
  createStimulusQtiAssessmentStimulus: CreateStimulusQtiAssessmentStimulus,
): string {
  return JSON.stringify(
    CreateStimulusQtiAssessmentStimulus$outboundSchema.parse(
      createStimulusQtiAssessmentStimulus,
    ),
  );
}

export function createStimulusQtiAssessmentStimulusFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusQtiAssessmentStimulus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateStimulusQtiAssessmentStimulus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusQtiAssessmentStimulus' from JSON`,
  );
}

/** @internal */
export const CreateStimulusContent$inboundSchema: z.ZodType<
  CreateStimulusContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-stimulus": z.lazy(() =>
    CreateStimulusQtiAssessmentStimulus$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-stimulus": "qtiAssessmentStimulus",
  });
});

/** @internal */
export type CreateStimulusContent$Outbound = {
  "qti-assessment-stimulus": CreateStimulusQtiAssessmentStimulus$Outbound;
};

/** @internal */
export const CreateStimulusContent$outboundSchema: z.ZodType<
  CreateStimulusContent$Outbound,
  z.ZodTypeDef,
  CreateStimulusContent
> = z.object({
  qtiAssessmentStimulus: z.lazy(() =>
    CreateStimulusQtiAssessmentStimulus$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentStimulus: "qti-assessment-stimulus",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusContent$ {
  /** @deprecated use `CreateStimulusContent$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusContent$inboundSchema;
  /** @deprecated use `CreateStimulusContent$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusContent$outboundSchema;
  /** @deprecated use `CreateStimulusContent$Outbound` instead. */
  export type Outbound = CreateStimulusContent$Outbound;
}

export function createStimulusContentToJSON(
  createStimulusContent: CreateStimulusContent,
): string {
  return JSON.stringify(
    CreateStimulusContent$outboundSchema.parse(createStimulusContent),
  );
}

export function createStimulusContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusContent' from JSON`,
  );
}

/** @internal */
export const CreateStimulusResponse$inboundSchema: z.ZodType<
  CreateStimulusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => CreateStimulusCatalogInfo$inboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => CreateStimulusStylesheet$inboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateStimulusContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type CreateStimulusResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  catalogInfo: Array<CreateStimulusCatalogInfo$Outbound>;
  label?: string | undefined;
  language: string;
  stylesheet?: CreateStimulusStylesheet$Outbound | undefined;
  toolName?: string | undefined;
  toolVersion?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: CreateStimulusContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const CreateStimulusResponse$outboundSchema: z.ZodType<
  CreateStimulusResponse$Outbound,
  z.ZodTypeDef,
  CreateStimulusResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => CreateStimulusCatalogInfo$outboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => CreateStimulusStylesheet$outboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateStimulusContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStimulusResponse$ {
  /** @deprecated use `CreateStimulusResponse$inboundSchema` instead. */
  export const inboundSchema = CreateStimulusResponse$inboundSchema;
  /** @deprecated use `CreateStimulusResponse$outboundSchema` instead. */
  export const outboundSchema = CreateStimulusResponse$outboundSchema;
  /** @deprecated use `CreateStimulusResponse$Outbound` instead. */
  export type Outbound = CreateStimulusResponse$Outbound;
}

export function createStimulusResponseToJSON(
  createStimulusResponse: CreateStimulusResponse,
): string {
  return JSON.stringify(
    CreateStimulusResponse$outboundSchema.parse(createStimulusResponse),
  );
}

export function createStimulusResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateStimulusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStimulusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStimulusResponse' from JSON`,
  );
}
