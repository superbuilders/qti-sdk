/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTestPartRequest = {
  /**
   * The unique identifier of the parent assessment test
   */
  assessmentTestIdentifier: string;
  /**
   * The unique identifier of the test part to retrieve
   */
  identifier: string;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const GetTestPartNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type GetTestPartNavigationMode = ClosedEnum<
  typeof GetTestPartNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const GetTestPartSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type GetTestPartSubmissionMode = ClosedEnum<
  typeof GetTestPartSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type GetTestPartQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type GetTestPartQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?: Array<GetTestPartQtiAssessmentItemRef> | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type GetTestPartResponse = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: GetTestPartNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: GetTestPartSubmissionMode;
  qtiAssessmentSection: Array<GetTestPartQtiAssessmentSection>;
};

/** @internal */
export const GetTestPartRequest$inboundSchema: z.ZodType<
  GetTestPartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetTestPartRequest$Outbound = {
  assessmentTestIdentifier: string;
  identifier: string;
};

/** @internal */
export const GetTestPartRequest$outboundSchema: z.ZodType<
  GetTestPartRequest$Outbound,
  z.ZodTypeDef,
  GetTestPartRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartRequest$ {
  /** @deprecated use `GetTestPartRequest$inboundSchema` instead. */
  export const inboundSchema = GetTestPartRequest$inboundSchema;
  /** @deprecated use `GetTestPartRequest$outboundSchema` instead. */
  export const outboundSchema = GetTestPartRequest$outboundSchema;
  /** @deprecated use `GetTestPartRequest$Outbound` instead. */
  export type Outbound = GetTestPartRequest$Outbound;
}

export function getTestPartRequestToJSON(
  getTestPartRequest: GetTestPartRequest,
): string {
  return JSON.stringify(
    GetTestPartRequest$outboundSchema.parse(getTestPartRequest),
  );
}

export function getTestPartRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTestPartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTestPartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTestPartRequest' from JSON`,
  );
}

/** @internal */
export const GetTestPartNavigationMode$inboundSchema: z.ZodNativeEnum<
  typeof GetTestPartNavigationMode
> = z.nativeEnum(GetTestPartNavigationMode);

/** @internal */
export const GetTestPartNavigationMode$outboundSchema: z.ZodNativeEnum<
  typeof GetTestPartNavigationMode
> = GetTestPartNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartNavigationMode$ {
  /** @deprecated use `GetTestPartNavigationMode$inboundSchema` instead. */
  export const inboundSchema = GetTestPartNavigationMode$inboundSchema;
  /** @deprecated use `GetTestPartNavigationMode$outboundSchema` instead. */
  export const outboundSchema = GetTestPartNavigationMode$outboundSchema;
}

/** @internal */
export const GetTestPartSubmissionMode$inboundSchema: z.ZodNativeEnum<
  typeof GetTestPartSubmissionMode
> = z.nativeEnum(GetTestPartSubmissionMode);

/** @internal */
export const GetTestPartSubmissionMode$outboundSchema: z.ZodNativeEnum<
  typeof GetTestPartSubmissionMode
> = GetTestPartSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartSubmissionMode$ {
  /** @deprecated use `GetTestPartSubmissionMode$inboundSchema` instead. */
  export const inboundSchema = GetTestPartSubmissionMode$inboundSchema;
  /** @deprecated use `GetTestPartSubmissionMode$outboundSchema` instead. */
  export const outboundSchema = GetTestPartSubmissionMode$outboundSchema;
}

/** @internal */
export const GetTestPartQtiAssessmentItemRef$inboundSchema: z.ZodType<
  GetTestPartQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type GetTestPartQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const GetTestPartQtiAssessmentItemRef$outboundSchema: z.ZodType<
  GetTestPartQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  GetTestPartQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartQtiAssessmentItemRef$ {
  /** @deprecated use `GetTestPartQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema = GetTestPartQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `GetTestPartQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema = GetTestPartQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `GetTestPartQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = GetTestPartQtiAssessmentItemRef$Outbound;
}

export function getTestPartQtiAssessmentItemRefToJSON(
  getTestPartQtiAssessmentItemRef: GetTestPartQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    GetTestPartQtiAssessmentItemRef$outboundSchema.parse(
      getTestPartQtiAssessmentItemRef,
    ),
  );
}

export function getTestPartQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<GetTestPartQtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTestPartQtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTestPartQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const GetTestPartQtiAssessmentSection$inboundSchema: z.ZodType<
  GetTestPartQtiAssessmentSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => GetTestPartQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type GetTestPartQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<GetTestPartQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const GetTestPartQtiAssessmentSection$outboundSchema: z.ZodType<
  GetTestPartQtiAssessmentSection$Outbound,
  z.ZodTypeDef,
  GetTestPartQtiAssessmentSection
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => GetTestPartQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartQtiAssessmentSection$ {
  /** @deprecated use `GetTestPartQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema = GetTestPartQtiAssessmentSection$inboundSchema;
  /** @deprecated use `GetTestPartQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema = GetTestPartQtiAssessmentSection$outboundSchema;
  /** @deprecated use `GetTestPartQtiAssessmentSection$Outbound` instead. */
  export type Outbound = GetTestPartQtiAssessmentSection$Outbound;
}

export function getTestPartQtiAssessmentSectionToJSON(
  getTestPartQtiAssessmentSection: GetTestPartQtiAssessmentSection,
): string {
  return JSON.stringify(
    GetTestPartQtiAssessmentSection$outboundSchema.parse(
      getTestPartQtiAssessmentSection,
    ),
  );
}

export function getTestPartQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<GetTestPartQtiAssessmentSection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTestPartQtiAssessmentSection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTestPartQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const GetTestPartResponse$inboundSchema: z.ZodType<
  GetTestPartResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: GetTestPartNavigationMode$inboundSchema,
  submissionMode: GetTestPartSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(
    z.lazy(() => GetTestPartQtiAssessmentSection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type GetTestPartResponse$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<GetTestPartQtiAssessmentSection$Outbound>;
};

/** @internal */
export const GetTestPartResponse$outboundSchema: z.ZodType<
  GetTestPartResponse$Outbound,
  z.ZodTypeDef,
  GetTestPartResponse
> = z.object({
  identifier: z.string(),
  navigationMode: GetTestPartNavigationMode$outboundSchema,
  submissionMode: GetTestPartSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(
    z.lazy(() => GetTestPartQtiAssessmentSection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartResponse$ {
  /** @deprecated use `GetTestPartResponse$inboundSchema` instead. */
  export const inboundSchema = GetTestPartResponse$inboundSchema;
  /** @deprecated use `GetTestPartResponse$outboundSchema` instead. */
  export const outboundSchema = GetTestPartResponse$outboundSchema;
  /** @deprecated use `GetTestPartResponse$Outbound` instead. */
  export type Outbound = GetTestPartResponse$Outbound;
}

export function getTestPartResponseToJSON(
  getTestPartResponse: GetTestPartResponse,
): string {
  return JSON.stringify(
    GetTestPartResponse$outboundSchema.parse(getTestPartResponse),
  );
}

export function getTestPartResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTestPartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTestPartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTestPartResponse' from JSON`,
  );
}
