/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAssessmentTestRequest = {
  /**
   * The unique identifier of the assessment test to retrieve
   */
  identifier: string;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const GetAssessmentTestNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type GetAssessmentTestNavigationMode = ClosedEnum<
  typeof GetAssessmentTestNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const GetAssessmentTestSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type GetAssessmentTestSubmissionMode = ClosedEnum<
  typeof GetAssessmentTestSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type GetAssessmentTestQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type GetAssessmentTestQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<GetAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type GetAssessmentTestQtiTestPart = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: GetAssessmentTestNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: GetAssessmentTestSubmissionMode;
  qtiAssessmentSection: Array<GetAssessmentTestQtiAssessmentSection>;
};

/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export const GetAssessmentTestCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export type GetAssessmentTestCardinality = ClosedEnum<
  typeof GetAssessmentTestCardinality
>;

/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export const GetAssessmentTestBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export type GetAssessmentTestBaseType = ClosedEnum<
  typeof GetAssessmentTestBaseType
>;

/**
 * Optional default value configuration for outcome variables
 */
export type GetAssessmentTestDefaultValue = {
  /**
   * The default value to assign to the outcome variable
   */
  value?: any | undefined;
};

export type GetAssessmentTestQtiOutcomeDeclaration = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
   */
  cardinality?: GetAssessmentTestCardinality | undefined;
  /**
   * Data type of the outcome variable, determining how values are stored and processed
   */
  baseType: GetAssessmentTestBaseType;
  /**
   * Expected maximum value for this outcome variable in normal circumstances
   */
  normalMaximum?: number | undefined;
  /**
   * Expected minimum value for this outcome variable in normal circumstances
   */
  normalMinimum?: number | undefined;
  /**
   * Optional default value configuration for outcome variables
   */
  defaultValue?: GetAssessmentTestDefaultValue | undefined;
};

export type GetAssessmentTestAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  toolName: string;
  toolVersion: string;
};

export type GetAssessmentTestQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type GetAssessmentTestQtiDefaultValue = {
  qtiValue?: any | undefined;
};

export type GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration = {
  attributes: GetAssessmentTestQtiOutcomeDeclarationAttributes;
  qtiDefaultValue?: GetAssessmentTestQtiDefaultValue | undefined;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
};

export type GetAssessmentTestQtiTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type GetAssessmentTestQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
};

export type GetAssessmentTestQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef = {
  attributes: GetAssessmentTestQtiAssessmentItemRefAttributes;
};

export type GetAssessmentTestQtiAssessmentTestQtiAssessmentSection = {
  attributes: GetAssessmentTestQtiAssessmentSectionAttributes;
  qtiAssessmentItemRef?:
    | Array<GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

export type GetAssessmentTestQtiAssessmentTestQtiTestPart = {
  attributes: GetAssessmentTestQtiTestPartAttributes;
  qtiAssessmentSection: Array<
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection
  >;
};

export type GetAssessmentTestQtiAssessmentTest = {
  attributes: GetAssessmentTestAttributes;
  qtiOutcomeDeclaration: Array<
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration
  >;
  qtiTestPart: Array<GetAssessmentTestQtiAssessmentTestQtiTestPart>;
};

/**
 * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
 */
export type GetAssessmentTestContent = {
  qtiAssessmentTest: GetAssessmentTestQtiAssessmentTest;
};

/**
 * Complete assessment test data including all test parts, sections, items, and configuration settings
 */
export type GetAssessmentTestResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Version of the specification used for this assessment test
   */
  qtiVersion?: string | undefined;
  qtiTestPart: Array<GetAssessmentTestQtiTestPart>;
  /**
   * Array of outcome variable declarations for storing assessment results and computed values
   */
  qtiOutcomeDeclaration: Array<GetAssessmentTestQtiOutcomeDeclaration>;
  /**
   * Time limit for the entire assessment test in seconds. When not specified, there is no time limit
   */
  timeLimit?: number | undefined;
  /**
   * Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
   */
  maxAttempts?: number | undefined;
  /**
   * Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
   */
  toolsEnabled?: { [k: string]: boolean } | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
   */
  content: GetAssessmentTestContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
  /**
   * Indicates whether the generated XML is valid according to schema validation
   */
  isValidXml: boolean;
};

/** @internal */
export const GetAssessmentTestRequest$inboundSchema: z.ZodType<
  GetAssessmentTestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
});

/** @internal */
export type GetAssessmentTestRequest$Outbound = {
  identifier: string;
};

/** @internal */
export const GetAssessmentTestRequest$outboundSchema: z.ZodType<
  GetAssessmentTestRequest$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestRequest
> = z.object({
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestRequest$ {
  /** @deprecated use `GetAssessmentTestRequest$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestRequest$inboundSchema;
  /** @deprecated use `GetAssessmentTestRequest$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestRequest$outboundSchema;
  /** @deprecated use `GetAssessmentTestRequest$Outbound` instead. */
  export type Outbound = GetAssessmentTestRequest$Outbound;
}

export function getAssessmentTestRequestToJSON(
  getAssessmentTestRequest: GetAssessmentTestRequest,
): string {
  return JSON.stringify(
    GetAssessmentTestRequest$outboundSchema.parse(getAssessmentTestRequest),
  );
}

export function getAssessmentTestRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentTestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestRequest' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestNavigationMode$inboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestNavigationMode
> = z.nativeEnum(GetAssessmentTestNavigationMode);

/** @internal */
export const GetAssessmentTestNavigationMode$outboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestNavigationMode
> = GetAssessmentTestNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestNavigationMode$ {
  /** @deprecated use `GetAssessmentTestNavigationMode$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestNavigationMode$inboundSchema;
  /** @deprecated use `GetAssessmentTestNavigationMode$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestNavigationMode$outboundSchema;
}

/** @internal */
export const GetAssessmentTestSubmissionMode$inboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestSubmissionMode
> = z.nativeEnum(GetAssessmentTestSubmissionMode);

/** @internal */
export const GetAssessmentTestSubmissionMode$outboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestSubmissionMode
> = GetAssessmentTestSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestSubmissionMode$ {
  /** @deprecated use `GetAssessmentTestSubmissionMode$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestSubmissionMode$inboundSchema;
  /** @deprecated use `GetAssessmentTestSubmissionMode$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestSubmissionMode$outboundSchema;
}

/** @internal */
export const GetAssessmentTestQtiAssessmentItemRef$inboundSchema: z.ZodType<
  GetAssessmentTestQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type GetAssessmentTestQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentItemRef$outboundSchema: z.ZodType<
  GetAssessmentTestQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function getAssessmentTestQtiAssessmentItemRefToJSON(
  getAssessmentTestQtiAssessmentItemRef: GetAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentItemRef$outboundSchema.parse(
      getAssessmentTestQtiAssessmentItemRef,
    ),
  );
}

export function getAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestQtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentSection$inboundSchema: z.ZodType<
  GetAssessmentTestQtiAssessmentSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => GetAssessmentTestQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type GetAssessmentTestQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<GetAssessmentTestQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentSection$outboundSchema: z.ZodType<
  GetAssessmentTestQtiAssessmentSection$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestQtiAssessmentSection
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => GetAssessmentTestQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiAssessmentSection$Outbound;
}

export function getAssessmentTestQtiAssessmentSectionToJSON(
  getAssessmentTestQtiAssessmentSection: GetAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentSection$outboundSchema.parse(
      getAssessmentTestQtiAssessmentSection,
    ),
  );
}

export function getAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestQtiAssessmentSection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentSection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiTestPart$inboundSchema: z.ZodType<
  GetAssessmentTestQtiTestPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: GetAssessmentTestNavigationMode$inboundSchema,
  submissionMode: GetAssessmentTestSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(
    z.lazy(() => GetAssessmentTestQtiAssessmentSection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type GetAssessmentTestQtiTestPart$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<
    GetAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const GetAssessmentTestQtiTestPart$outboundSchema: z.ZodType<
  GetAssessmentTestQtiTestPart$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestQtiTestPart
> = z.object({
  identifier: z.string(),
  navigationMode: GetAssessmentTestNavigationMode$outboundSchema,
  submissionMode: GetAssessmentTestSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(
    z.lazy(() => GetAssessmentTestQtiAssessmentSection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiTestPart$ {
  /** @deprecated use `GetAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiTestPart$Outbound;
}

export function getAssessmentTestQtiTestPartToJSON(
  getAssessmentTestQtiTestPart: GetAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiTestPart$outboundSchema.parse(
      getAssessmentTestQtiTestPart,
    ),
  );
}

export function getAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestQtiTestPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentTestQtiTestPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestCardinality$inboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestCardinality
> = z.nativeEnum(GetAssessmentTestCardinality);

/** @internal */
export const GetAssessmentTestCardinality$outboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestCardinality
> = GetAssessmentTestCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestCardinality$ {
  /** @deprecated use `GetAssessmentTestCardinality$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestCardinality$inboundSchema;
  /** @deprecated use `GetAssessmentTestCardinality$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestCardinality$outboundSchema;
}

/** @internal */
export const GetAssessmentTestBaseType$inboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestBaseType
> = z.nativeEnum(GetAssessmentTestBaseType);

/** @internal */
export const GetAssessmentTestBaseType$outboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentTestBaseType
> = GetAssessmentTestBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestBaseType$ {
  /** @deprecated use `GetAssessmentTestBaseType$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestBaseType$inboundSchema;
  /** @deprecated use `GetAssessmentTestBaseType$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestBaseType$outboundSchema;
}

/** @internal */
export const GetAssessmentTestDefaultValue$inboundSchema: z.ZodType<
  GetAssessmentTestDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
});

/** @internal */
export type GetAssessmentTestDefaultValue$Outbound = {
  value?: any | undefined;
};

/** @internal */
export const GetAssessmentTestDefaultValue$outboundSchema: z.ZodType<
  GetAssessmentTestDefaultValue$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestDefaultValue
> = z.object({
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestDefaultValue$ {
  /** @deprecated use `GetAssessmentTestDefaultValue$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestDefaultValue$inboundSchema;
  /** @deprecated use `GetAssessmentTestDefaultValue$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestDefaultValue$outboundSchema;
  /** @deprecated use `GetAssessmentTestDefaultValue$Outbound` instead. */
  export type Outbound = GetAssessmentTestDefaultValue$Outbound;
}

export function getAssessmentTestDefaultValueToJSON(
  getAssessmentTestDefaultValue: GetAssessmentTestDefaultValue,
): string {
  return JSON.stringify(
    GetAssessmentTestDefaultValue$outboundSchema.parse(
      getAssessmentTestDefaultValue,
    ),
  );
}

export function getAssessmentTestDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentTestDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestDefaultValue' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiOutcomeDeclaration$inboundSchema: z.ZodType<
  GetAssessmentTestQtiOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: GetAssessmentTestCardinality$inboundSchema.default("single"),
  baseType: GetAssessmentTestBaseType$inboundSchema,
  normalMaximum: z.number().optional(),
  normalMinimum: z.number().optional(),
  defaultValue: z.lazy(() => GetAssessmentTestDefaultValue$inboundSchema)
    .optional(),
});

/** @internal */
export type GetAssessmentTestQtiOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
  defaultValue?: GetAssessmentTestDefaultValue$Outbound | undefined;
};

/** @internal */
export const GetAssessmentTestQtiOutcomeDeclaration$outboundSchema: z.ZodType<
  GetAssessmentTestQtiOutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestQtiOutcomeDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: GetAssessmentTestCardinality$outboundSchema.default("single"),
  baseType: GetAssessmentTestBaseType$outboundSchema,
  normalMaximum: z.number().optional(),
  normalMinimum: z.number().optional(),
  defaultValue: z.lazy(() => GetAssessmentTestDefaultValue$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `GetAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function getAssessmentTestQtiOutcomeDeclarationToJSON(
  getAssessmentTestQtiOutcomeDeclaration:
    GetAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiOutcomeDeclaration$outboundSchema.parse(
      getAssessmentTestQtiOutcomeDeclaration,
    ),
  );
}

export function getAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestQtiOutcomeDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiOutcomeDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestAttributes$inboundSchema: z.ZodType<
  GetAssessmentTestAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  "tool-name": z.string(),
  "tool-version": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "tool-name": "toolName",
    "tool-version": "toolVersion",
  });
});

/** @internal */
export type GetAssessmentTestAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  "tool-name": string;
  "tool-version": string;
};

/** @internal */
export const GetAssessmentTestAttributes$outboundSchema: z.ZodType<
  GetAssessmentTestAttributes$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  toolName: z.string(),
  toolVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    toolName: "tool-name",
    toolVersion: "tool-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestAttributes$ {
  /** @deprecated use `GetAssessmentTestAttributes$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentTestAttributes$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentTestAttributes$Outbound` instead. */
  export type Outbound = GetAssessmentTestAttributes$Outbound;
}

export function getAssessmentTestAttributesToJSON(
  getAssessmentTestAttributes: GetAssessmentTestAttributes,
): string {
  return JSON.stringify(
    GetAssessmentTestAttributes$outboundSchema.parse(
      getAssessmentTestAttributes,
    ),
  );
}

export function getAssessmentTestAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentTestAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    GetAssessmentTestQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    "base-type": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "base-type": "baseType",
    });
  });

/** @internal */
export type GetAssessmentTestQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  "base-type": string;
};

/** @internal */
export const GetAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    GetAssessmentTestQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    GetAssessmentTestQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      baseType: "base-type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `GetAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    GetAssessmentTestQtiOutcomeDeclarationAttributes$Outbound;
}

export function getAssessmentTestQtiOutcomeDeclarationAttributesToJSON(
  getAssessmentTestQtiOutcomeDeclarationAttributes:
    GetAssessmentTestQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      getAssessmentTestQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function getAssessmentTestQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentTestQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentTestQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiDefaultValue$inboundSchema: z.ZodType<
  GetAssessmentTestQtiDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type GetAssessmentTestQtiDefaultValue$Outbound = {
  "qti-value"?: any | undefined;
};

/** @internal */
export const GetAssessmentTestQtiDefaultValue$outboundSchema: z.ZodType<
  GetAssessmentTestQtiDefaultValue$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestQtiDefaultValue
> = z.object({
  qtiValue: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiDefaultValue$ {
  /** @deprecated use `GetAssessmentTestQtiDefaultValue$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestQtiDefaultValue$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiDefaultValue$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestQtiDefaultValue$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiDefaultValue$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiDefaultValue$Outbound;
}

export function getAssessmentTestQtiDefaultValueToJSON(
  getAssessmentTestQtiDefaultValue: GetAssessmentTestQtiDefaultValue,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiDefaultValue$outboundSchema.parse(
      getAssessmentTestQtiDefaultValue,
    ),
  );
}

export function getAssessmentTestQtiDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestQtiDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentTestQtiDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiDefaultValue' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      GetAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema
    ),
    "qti-default-value": z.lazy(() =>
      GetAssessmentTestQtiDefaultValue$inboundSchema
    ).optional(),
    "normal-maximum": z.number().optional(),
    "normal-minimum": z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-default-value": "qtiDefaultValue",
      "normal-maximum": "normalMaximum",
      "normal-minimum": "normalMinimum",
    });
  });

/** @internal */
export type GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound = {
  _attributes: GetAssessmentTestQtiOutcomeDeclarationAttributes$Outbound;
  "qti-default-value"?: GetAssessmentTestQtiDefaultValue$Outbound | undefined;
  "normal-maximum"?: number | undefined;
  "normal-minimum"?: number | undefined;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      GetAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema
    ),
    qtiDefaultValue: z.lazy(() =>
      GetAssessmentTestQtiDefaultValue$outboundSchema
    ).optional(),
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiDefaultValue: "qti-default-value",
      normalMaximum: "normal-maximum",
      normalMinimum: "normal-minimum",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function getAssessmentTestQtiAssessmentTestQtiOutcomeDeclarationToJSON(
  getAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration:
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      .parse(getAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration),
  );
}

export function getAssessmentTestQtiAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiTestPartAttributes$inboundSchema: z.ZodType<
  GetAssessmentTestQtiTestPartAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  "navigation-mode": z.string(),
  "submission-mode": z.string(),
}).transform((v) => {
  return remap$(v, {
    "navigation-mode": "navigationMode",
    "submission-mode": "submissionMode",
  });
});

/** @internal */
export type GetAssessmentTestQtiTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const GetAssessmentTestQtiTestPartAttributes$outboundSchema: z.ZodType<
  GetAssessmentTestQtiTestPartAttributes$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestQtiTestPartAttributes
> = z.object({
  identifier: z.string(),
  navigationMode: z.string(),
  submissionMode: z.string(),
}).transform((v) => {
  return remap$(v, {
    navigationMode: "navigation-mode",
    submissionMode: "submission-mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiTestPartAttributes$ {
  /** @deprecated use `GetAssessmentTestQtiTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiTestPartAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiTestPartAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiTestPartAttributes$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiTestPartAttributes$Outbound;
}

export function getAssessmentTestQtiTestPartAttributesToJSON(
  getAssessmentTestQtiTestPartAttributes:
    GetAssessmentTestQtiTestPartAttributes,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiTestPartAttributes$outboundSchema.parse(
      getAssessmentTestQtiTestPartAttributes,
    ),
  );
}

export function getAssessmentTestQtiTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestQtiTestPartAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiTestPartAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/** @internal */
export type GetAssessmentTestQtiAssessmentSectionAttributes$Outbound = {
  identifier: string;
  title: string;
  visible: string;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    GetAssessmentTestQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentSectionAttributes$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound =
    GetAssessmentTestQtiAssessmentSectionAttributes$Outbound;
}

export function getAssessmentTestQtiAssessmentSectionAttributesToJSON(
  getAssessmentTestQtiAssessmentSectionAttributes:
    GetAssessmentTestQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentSectionAttributes$outboundSchema.parse(
      getAssessmentTestQtiAssessmentSectionAttributes,
    ),
  );
}

export function getAssessmentTestQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentTestQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentSectionAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentTestQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type GetAssessmentTestQtiAssessmentItemRefAttributes$Outbound = {
  identifier: string;
  href: string;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    GetAssessmentTestQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound =
    GetAssessmentTestQtiAssessmentItemRefAttributes$Outbound;
}

export function getAssessmentTestQtiAssessmentItemRefAttributesToJSON(
  getAssessmentTestQtiAssessmentItemRefAttributes:
    GetAssessmentTestQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema.parse(
      getAssessmentTestQtiAssessmentItemRefAttributes,
    ),
  );
}

export function getAssessmentTestQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentTestQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentTestQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      GetAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound = {
  _attributes: GetAssessmentTestQtiAssessmentItemRefAttributes$Outbound;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef
  > = z.object({
    attributes: z.lazy(() =>
      GetAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function getAssessmentTestQtiAssessmentTestQtiAssessmentItemRefToJSON(
  getAssessmentTestQtiAssessmentTestQtiAssessmentItemRef:
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema.parse(
      getAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
    ),
  );
}

export function getAssessmentTestQtiAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      GetAssessmentTestQtiAssessmentSectionAttributes$inboundSchema
    ),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound = {
  _attributes: GetAssessmentTestQtiAssessmentSectionAttributes$Outbound;
  "qti-assessment-item-ref"?:
    | Array<GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection
  > = z.object({
    attributes: z.lazy(() =>
      GetAssessmentTestQtiAssessmentSectionAttributes$outboundSchema
    ),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        GetAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound;
}

export function getAssessmentTestQtiAssessmentTestQtiAssessmentSectionToJSON(
  getAssessmentTestQtiAssessmentTestQtiAssessmentSection:
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema.parse(
      getAssessmentTestQtiAssessmentTestQtiAssessmentSection,
    ),
  );
}

export function getAssessmentTestQtiAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentTestQtiAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiTestPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      GetAssessmentTestQtiTestPartAttributes$inboundSchema
    ),
    "qti-assessment-section": z.array(
      z.lazy(() =>
        GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-section": "qtiAssessmentSection",
    });
  });

/** @internal */
export type GetAssessmentTestQtiAssessmentTestQtiTestPart$Outbound = {
  _attributes: GetAssessmentTestQtiTestPartAttributes$Outbound;
  "qti-assessment-section": Array<
    GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema:
  z.ZodType<
    GetAssessmentTestQtiAssessmentTestQtiTestPart$Outbound,
    z.ZodTypeDef,
    GetAssessmentTestQtiAssessmentTestQtiTestPart
  > = z.object({
    attributes: z.lazy(() =>
      GetAssessmentTestQtiTestPartAttributes$outboundSchema
    ),
    qtiAssessmentSection: z.array(
      z.lazy(() =>
        GetAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentTestQtiTestPart$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiAssessmentTestQtiTestPart$Outbound;
}

export function getAssessmentTestQtiAssessmentTestQtiTestPartToJSON(
  getAssessmentTestQtiAssessmentTestQtiTestPart:
    GetAssessmentTestQtiAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema.parse(
      getAssessmentTestQtiAssessmentTestQtiTestPart,
    ),
  );
}

export function getAssessmentTestQtiAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentTestQtiAssessmentTestQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentTestQtiAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestQtiAssessmentTest$inboundSchema: z.ZodType<
  GetAssessmentTestQtiAssessmentTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => GetAssessmentTestAttributes$inboundSchema),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
    ),
  ),
  "qti-test-part": z.array(
    z.lazy(() => GetAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-test-part": "qtiTestPart",
  });
});

/** @internal */
export type GetAssessmentTestQtiAssessmentTest$Outbound = {
  _attributes: GetAssessmentTestAttributes$Outbound;
  "qti-outcome-declaration": Array<
    GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  "qti-test-part": Array<
    GetAssessmentTestQtiAssessmentTestQtiTestPart$Outbound
  >;
};

/** @internal */
export const GetAssessmentTestQtiAssessmentTest$outboundSchema: z.ZodType<
  GetAssessmentTestQtiAssessmentTest$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestQtiAssessmentTest
> = z.object({
  attributes: z.lazy(() => GetAssessmentTestAttributes$outboundSchema),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      GetAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
    ),
  ),
  qtiTestPart: z.array(
    z.lazy(() => GetAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiTestPart: "qti-test-part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestQtiAssessmentTest$ {
  /** @deprecated use `GetAssessmentTestQtiAssessmentTest$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestQtiAssessmentTest$inboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTest$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestQtiAssessmentTest$outboundSchema;
  /** @deprecated use `GetAssessmentTestQtiAssessmentTest$Outbound` instead. */
  export type Outbound = GetAssessmentTestQtiAssessmentTest$Outbound;
}

export function getAssessmentTestQtiAssessmentTestToJSON(
  getAssessmentTestQtiAssessmentTest: GetAssessmentTestQtiAssessmentTest,
): string {
  return JSON.stringify(
    GetAssessmentTestQtiAssessmentTest$outboundSchema.parse(
      getAssessmentTestQtiAssessmentTest,
    ),
  );
}

export function getAssessmentTestQtiAssessmentTestFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestQtiAssessmentTest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentTestQtiAssessmentTest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestQtiAssessmentTest' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestContent$inboundSchema: z.ZodType<
  GetAssessmentTestContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-test": z.lazy(() =>
    GetAssessmentTestQtiAssessmentTest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-test": "qtiAssessmentTest",
  });
});

/** @internal */
export type GetAssessmentTestContent$Outbound = {
  "qti-assessment-test": GetAssessmentTestQtiAssessmentTest$Outbound;
};

/** @internal */
export const GetAssessmentTestContent$outboundSchema: z.ZodType<
  GetAssessmentTestContent$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestContent
> = z.object({
  qtiAssessmentTest: z.lazy(() =>
    GetAssessmentTestQtiAssessmentTest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentTest: "qti-assessment-test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestContent$ {
  /** @deprecated use `GetAssessmentTestContent$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestContent$inboundSchema;
  /** @deprecated use `GetAssessmentTestContent$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestContent$outboundSchema;
  /** @deprecated use `GetAssessmentTestContent$Outbound` instead. */
  export type Outbound = GetAssessmentTestContent$Outbound;
}

export function getAssessmentTestContentToJSON(
  getAssessmentTestContent: GetAssessmentTestContent,
): string {
  return JSON.stringify(
    GetAssessmentTestContent$outboundSchema.parse(getAssessmentTestContent),
  );
}

export function getAssessmentTestContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentTestContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestContent' from JSON`,
  );
}

/** @internal */
export const GetAssessmentTestResponse$inboundSchema: z.ZodType<
  GetAssessmentTestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  "qti-test-part": z.array(
    z.lazy(() => GetAssessmentTestQtiTestPart$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => GetAssessmentTestQtiOutcomeDeclaration$inboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetAssessmentTestContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-test-part": "qtiTestPart",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "__v": "v",
  });
});

/** @internal */
export type GetAssessmentTestResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  qtiVersion: string;
  "qti-test-part": Array<GetAssessmentTestQtiTestPart$Outbound>;
  "qti-outcome-declaration": Array<
    GetAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  timeLimit?: number | undefined;
  maxAttempts?: number | undefined;
  toolsEnabled?: { [k: string]: boolean } | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: GetAssessmentTestContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
  isValidXml: boolean;
};

/** @internal */
export const GetAssessmentTestResponse$outboundSchema: z.ZodType<
  GetAssessmentTestResponse$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  qtiTestPart: z.array(
    z.lazy(() => GetAssessmentTestQtiTestPart$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => GetAssessmentTestQtiOutcomeDeclaration$outboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetAssessmentTestContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiTestPart: "qti-test-part",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestResponse$ {
  /** @deprecated use `GetAssessmentTestResponse$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestResponse$inboundSchema;
  /** @deprecated use `GetAssessmentTestResponse$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestResponse$outboundSchema;
  /** @deprecated use `GetAssessmentTestResponse$Outbound` instead. */
  export type Outbound = GetAssessmentTestResponse$Outbound;
}

export function getAssessmentTestResponseToJSON(
  getAssessmentTestResponse: GetAssessmentTestResponse,
): string {
  return JSON.stringify(
    GetAssessmentTestResponse$outboundSchema.parse(getAssessmentTestResponse),
  );
}

export function getAssessmentTestResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentTestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentTestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentTestResponse' from JSON`,
  );
}
