/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const CreateAssessmentTestRawNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type CreateAssessmentTestRawNavigationMode = ClosedEnum<
  typeof CreateAssessmentTestRawNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const CreateAssessmentTestRawSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type CreateAssessmentTestRawSubmissionMode = ClosedEnum<
  typeof CreateAssessmentTestRawSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type CreateAssessmentTestRawQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type CreateAssessmentTestRawQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<CreateAssessmentTestRawQtiAssessmentItemRef>
    | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type CreateAssessmentTestRawQtiTestPartResponse = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: CreateAssessmentTestRawNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: CreateAssessmentTestRawSubmissionMode;
  qtiAssessmentSection: Array<CreateAssessmentTestRawQtiAssessmentSection>;
};

/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export const CreateAssessmentTestRawCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export type CreateAssessmentTestRawCardinality = ClosedEnum<
  typeof CreateAssessmentTestRawCardinality
>;

/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export const CreateAssessmentTestRawBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export type CreateAssessmentTestRawBaseType = ClosedEnum<
  typeof CreateAssessmentTestRawBaseType
>;

/**
 * Optional default value configuration for outcome variables
 */
export type CreateAssessmentTestRawDefaultValue = {
  /**
   * The default value to assign to the outcome variable
   */
  value?: any | undefined;
};

export type CreateAssessmentTestRawQtiOutcomeDeclarationResponse = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
   */
  cardinality?: CreateAssessmentTestRawCardinality | undefined;
  /**
   * Data type of the outcome variable, determining how values are stored and processed
   */
  baseType: CreateAssessmentTestRawBaseType;
  /**
   * Expected maximum value for this outcome variable in normal circumstances
   */
  normalMaximum?: number | undefined;
  /**
   * Expected minimum value for this outcome variable in normal circumstances
   */
  normalMinimum?: number | undefined;
  /**
   * Optional default value configuration for outcome variables
   */
  defaultValue?: CreateAssessmentTestRawDefaultValue | undefined;
};

export type CreateAssessmentTestRawAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  toolName: string;
  toolVersion: string;
};

export type CreateAssessmentTestRawQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type CreateAssessmentTestRawQtiDefaultValue = {
  qtiValue?: any | undefined;
};

export type CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration = {
  attributes: CreateAssessmentTestRawQtiOutcomeDeclarationAttributes;
  qtiDefaultValue?: CreateAssessmentTestRawQtiDefaultValue | undefined;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
};

export type CreateAssessmentTestRawQtiTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type CreateAssessmentTestRawQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
};

export type CreateAssessmentTestRawQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef = {
  attributes: CreateAssessmentTestRawQtiAssessmentItemRefAttributes;
};

export type CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection = {
  attributes: CreateAssessmentTestRawQtiAssessmentSectionAttributes;
  qtiAssessmentItemRef?:
    | Array<CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

export type CreateAssessmentTestRawQtiAssessmentTestQtiTestPart = {
  attributes: CreateAssessmentTestRawQtiTestPartAttributes;
  qtiAssessmentSection: Array<
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection
  >;
};

export type CreateAssessmentTestRawQtiAssessmentTest = {
  attributes: CreateAssessmentTestRawAttributes;
  qtiOutcomeDeclaration: Array<
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration
  >;
  qtiTestPart: Array<CreateAssessmentTestRawQtiAssessmentTestQtiTestPart>;
};

/**
 * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
 */
export type CreateAssessmentTestRawContent = {
  qtiAssessmentTest: CreateAssessmentTestRawQtiAssessmentTest;
};

/**
 * Complete assessment test data including all test parts, sections, items, and configuration settings
 */
export type CreateAssessmentTestRawResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Version of the specification used for this assessment test
   */
  qtiVersion?: string | undefined;
  qtiTestPart: Array<CreateAssessmentTestRawQtiTestPartResponse>;
  /**
   * Array of outcome variable declarations for storing assessment results and computed values
   */
  qtiOutcomeDeclaration: Array<
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse
  >;
  /**
   * Time limit for the entire assessment test in seconds. When not specified, there is no time limit
   */
  timeLimit?: number | undefined;
  /**
   * Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
   */
  maxAttempts?: number | undefined;
  /**
   * Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
   */
  toolsEnabled?: { [k: string]: boolean } | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
   */
  content: CreateAssessmentTestRawContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
  /**
   * Indicates whether the generated XML is valid according to schema validation
   */
  isValidXml: boolean;
};

/** @internal */
export const CreateAssessmentTestRawNavigationMode$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentTestRawNavigationMode> = z.nativeEnum(
    CreateAssessmentTestRawNavigationMode,
  );

/** @internal */
export const CreateAssessmentTestRawNavigationMode$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentTestRawNavigationMode> =
    CreateAssessmentTestRawNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawNavigationMode$ {
  /** @deprecated use `CreateAssessmentTestRawNavigationMode$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawNavigationMode$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawNavigationMode$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestRawSubmissionMode$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentTestRawSubmissionMode> = z.nativeEnum(
    CreateAssessmentTestRawSubmissionMode,
  );

/** @internal */
export const CreateAssessmentTestRawSubmissionMode$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentTestRawSubmissionMode> =
    CreateAssessmentTestRawSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawSubmissionMode$ {
  /** @deprecated use `CreateAssessmentTestRawSubmissionMode$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawSubmissionMode$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawSubmissionMode$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentItemRef
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentItemRef$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawQtiAssessmentItemRef$Outbound;
}

export function createAssessmentTestRawQtiAssessmentItemRefToJSON(
  createAssessmentTestRawQtiAssessmentItemRef:
    CreateAssessmentTestRawQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentItemRef$outboundSchema.parse(
      createAssessmentTestRawQtiAssessmentItemRef,
    ),
  );
}

export function createAssessmentTestRawQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentItemRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentSection$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _id: z.string(),
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    "qti-assessment-item-ref": z.array(
      z.lazy(() => CreateAssessmentTestRawQtiAssessmentItemRef$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<CreateAssessmentTestRawQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentSection$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentSection
  > = z.object({
    id: z.string(),
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    qtiAssessmentItemRef: z.array(
      z.lazy(() => CreateAssessmentTestRawQtiAssessmentItemRef$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentSection$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentSection$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentSection$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentSection$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawQtiAssessmentSection$Outbound;
}

export function createAssessmentTestRawQtiAssessmentSectionToJSON(
  createAssessmentTestRawQtiAssessmentSection:
    CreateAssessmentTestRawQtiAssessmentSection,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentSection$outboundSchema.parse(
      createAssessmentTestRawQtiAssessmentSection,
    ),
  );
}

export function createAssessmentTestRawQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentSection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiTestPartResponse$inboundSchema:
  z.ZodType<CreateAssessmentTestRawQtiTestPartResponse, z.ZodTypeDef, unknown> =
    z.object({
      identifier: z.string(),
      navigationMode: CreateAssessmentTestRawNavigationMode$inboundSchema,
      submissionMode: CreateAssessmentTestRawSubmissionMode$inboundSchema,
      "qti-assessment-section": z.array(
        z.lazy(() => CreateAssessmentTestRawQtiAssessmentSection$inboundSchema),
      ),
    }).transform((v) => {
      return remap$(v, {
        "qti-assessment-section": "qtiAssessmentSection",
      });
    });

/** @internal */
export type CreateAssessmentTestRawQtiTestPartResponse$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<
    CreateAssessmentTestRawQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const CreateAssessmentTestRawQtiTestPartResponse$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiTestPartResponse$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiTestPartResponse
  > = z.object({
    identifier: z.string(),
    navigationMode: CreateAssessmentTestRawNavigationMode$outboundSchema,
    submissionMode: CreateAssessmentTestRawSubmissionMode$outboundSchema,
    qtiAssessmentSection: z.array(
      z.lazy(() => CreateAssessmentTestRawQtiAssessmentSection$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiTestPartResponse$ {
  /** @deprecated use `CreateAssessmentTestRawQtiTestPartResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiTestPartResponse$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiTestPartResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiTestPartResponse$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiTestPartResponse$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawQtiTestPartResponse$Outbound;
}

export function createAssessmentTestRawQtiTestPartResponseToJSON(
  createAssessmentTestRawQtiTestPartResponse:
    CreateAssessmentTestRawQtiTestPartResponse,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiTestPartResponse$outboundSchema.parse(
      createAssessmentTestRawQtiTestPartResponse,
    ),
  );
}

export function createAssessmentTestRawQtiTestPartResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiTestPartResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiTestPartResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiTestPartResponse' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawCardinality$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestRawCardinality
> = z.nativeEnum(CreateAssessmentTestRawCardinality);

/** @internal */
export const CreateAssessmentTestRawCardinality$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestRawCardinality
> = CreateAssessmentTestRawCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawCardinality$ {
  /** @deprecated use `CreateAssessmentTestRawCardinality$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestRawCardinality$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawCardinality$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawCardinality$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestRawBaseType$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestRawBaseType
> = z.nativeEnum(CreateAssessmentTestRawBaseType);

/** @internal */
export const CreateAssessmentTestRawBaseType$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentTestRawBaseType
> = CreateAssessmentTestRawBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawBaseType$ {
  /** @deprecated use `CreateAssessmentTestRawBaseType$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestRawBaseType$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawBaseType$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestRawBaseType$outboundSchema;
}

/** @internal */
export const CreateAssessmentTestRawDefaultValue$inboundSchema: z.ZodType<
  CreateAssessmentTestRawDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
});

/** @internal */
export type CreateAssessmentTestRawDefaultValue$Outbound = {
  value?: any | undefined;
};

/** @internal */
export const CreateAssessmentTestRawDefaultValue$outboundSchema: z.ZodType<
  CreateAssessmentTestRawDefaultValue$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawDefaultValue
> = z.object({
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawDefaultValue$ {
  /** @deprecated use `CreateAssessmentTestRawDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawDefaultValue$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawDefaultValue$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawDefaultValue$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawDefaultValue$Outbound;
}

export function createAssessmentTestRawDefaultValueToJSON(
  createAssessmentTestRawDefaultValue: CreateAssessmentTestRawDefaultValue,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawDefaultValue$outboundSchema.parse(
      createAssessmentTestRawDefaultValue,
    ),
  );
}

export function createAssessmentTestRawDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestRawDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawDefaultValue' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: CreateAssessmentTestRawCardinality$inboundSchema.default(
      "single",
    ),
    baseType: CreateAssessmentTestRawBaseType$inboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() =>
      CreateAssessmentTestRawDefaultValue$inboundSchema
    ).optional(),
  });

/** @internal */
export type CreateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
  defaultValue?: CreateAssessmentTestRawDefaultValue$Outbound | undefined;
};

/** @internal */
export const CreateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse
  > = z.object({
    identifier: z.string(),
    cardinality: CreateAssessmentTestRawCardinality$outboundSchema.default(
      "single",
    ),
    baseType: CreateAssessmentTestRawBaseType$outboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() =>
      CreateAssessmentTestRawDefaultValue$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiOutcomeDeclarationResponse$ {
  /** @deprecated use `CreateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound;
}

export function createAssessmentTestRawQtiOutcomeDeclarationResponseToJSON(
  createAssessmentTestRawQtiOutcomeDeclarationResponse:
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema.parse(
      createAssessmentTestRawQtiOutcomeDeclarationResponse,
    ),
  );
}

export function createAssessmentTestRawQtiOutcomeDeclarationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiOutcomeDeclarationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiOutcomeDeclarationResponse' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawAttributes$inboundSchema: z.ZodType<
  CreateAssessmentTestRawAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  "tool-name": z.string(),
  "tool-version": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "tool-name": "toolName",
    "tool-version": "toolVersion",
  });
});

/** @internal */
export type CreateAssessmentTestRawAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  "tool-name": string;
  "tool-version": string;
};

/** @internal */
export const CreateAssessmentTestRawAttributes$outboundSchema: z.ZodType<
  CreateAssessmentTestRawAttributes$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  toolName: z.string(),
  toolVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    toolName: "tool-name",
    toolVersion: "tool-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawAttributes$ {
  /** @deprecated use `CreateAssessmentTestRawAttributes$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestRawAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawAttributes$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawAttributes$Outbound;
}

export function createAssessmentTestRawAttributesToJSON(
  createAssessmentTestRawAttributes: CreateAssessmentTestRawAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawAttributes$outboundSchema.parse(
      createAssessmentTestRawAttributes,
    ),
  );
}

export function createAssessmentTestRawAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestRawAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestRawAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    "base-type": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "base-type": "baseType",
    });
  });

/** @internal */
export type CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  "base-type": string;
};

/** @internal */
export const CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      baseType: "base-type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound;
}

export function createAssessmentTestRawQtiOutcomeDeclarationAttributesToJSON(
  createAssessmentTestRawQtiOutcomeDeclarationAttributes:
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      createAssessmentTestRawQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function createAssessmentTestRawQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiDefaultValue$inboundSchema: z.ZodType<
  CreateAssessmentTestRawQtiDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type CreateAssessmentTestRawQtiDefaultValue$Outbound = {
  "qti-value"?: any | undefined;
};

/** @internal */
export const CreateAssessmentTestRawQtiDefaultValue$outboundSchema: z.ZodType<
  CreateAssessmentTestRawQtiDefaultValue$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawQtiDefaultValue
> = z.object({
  qtiValue: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiDefaultValue$ {
  /** @deprecated use `CreateAssessmentTestRawQtiDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiDefaultValue$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiDefaultValue$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiDefaultValue$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawQtiDefaultValue$Outbound;
}

export function createAssessmentTestRawQtiDefaultValueToJSON(
  createAssessmentTestRawQtiDefaultValue:
    CreateAssessmentTestRawQtiDefaultValue,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiDefaultValue$outboundSchema.parse(
      createAssessmentTestRawQtiDefaultValue,
    ),
  );
}

export function createAssessmentTestRawQtiDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestRawQtiDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawQtiDefaultValue' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$inboundSchema
    ),
    "qti-default-value": z.lazy(() =>
      CreateAssessmentTestRawQtiDefaultValue$inboundSchema
    ).optional(),
    "normal-maximum": z.number().optional(),
    "normal-minimum": z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-default-value": "qtiDefaultValue",
      "normal-maximum": "normalMaximum",
      "normal-minimum": "normalMinimum",
    });
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound =
  {
    _attributes:
      CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$Outbound;
    "qti-default-value"?:
      | CreateAssessmentTestRawQtiDefaultValue$Outbound
      | undefined;
    "normal-maximum"?: number | undefined;
    "normal-minimum"?: number | undefined;
  };

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiOutcomeDeclarationAttributes$outboundSchema
    ),
    qtiDefaultValue: z.lazy(() =>
      CreateAssessmentTestRawQtiDefaultValue$outboundSchema
    ).optional(),
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiDefaultValue: "qti-default-value",
      normalMaximum: "normal-maximum",
      normalMinimum: "normal-minimum",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function createAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclarationToJSON(
  createAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration:
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      .parse(createAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration),
  );
}

export function createAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiTestPartAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiTestPartAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    "navigation-mode": z.string(),
    "submission-mode": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "navigation-mode": "navigationMode",
      "submission-mode": "submissionMode",
    });
  });

/** @internal */
export type CreateAssessmentTestRawQtiTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const CreateAssessmentTestRawQtiTestPartAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiTestPartAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiTestPartAttributes
  > = z.object({
    identifier: z.string(),
    navigationMode: z.string(),
    submissionMode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      navigationMode: "navigation-mode",
      submissionMode: "submission-mode",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiTestPartAttributes$ {
  /** @deprecated use `CreateAssessmentTestRawQtiTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiTestPartAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiTestPartAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiTestPartAttributes$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawQtiTestPartAttributes$Outbound;
}

export function createAssessmentTestRawQtiTestPartAttributesToJSON(
  createAssessmentTestRawQtiTestPartAttributes:
    CreateAssessmentTestRawQtiTestPartAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiTestPartAttributes$outboundSchema.parse(
      createAssessmentTestRawQtiTestPartAttributes,
    ),
  );
}

export function createAssessmentTestRawQtiTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiTestPartAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiTestPartAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound = {
  identifier: string;
  title: string;
  visible: string;
};

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentSectionAttributes$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound;
}

export function createAssessmentTestRawQtiAssessmentSectionAttributesToJSON(
  createAssessmentTestRawQtiAssessmentSectionAttributes:
    CreateAssessmentTestRawQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema.parse(
      createAssessmentTestRawQtiAssessmentSectionAttributes,
    ),
  );
}

export function createAssessmentTestRawQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound = {
  identifier: string;
  href: string;
};

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound;
}

export function createAssessmentTestRawQtiAssessmentItemRefAttributesToJSON(
  createAssessmentTestRawQtiAssessmentItemRefAttributes:
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema.parse(
      createAssessmentTestRawQtiAssessmentItemRefAttributes,
    ),
  );
}

export function createAssessmentTestRawQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentItemRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound =
  {
    _attributes: CreateAssessmentTestRawQtiAssessmentItemRefAttributes$Outbound;
  };

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentItemRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function createAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRefToJSON(
  createAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef:
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      .parse(createAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef),
  );
}

export function createAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentSectionAttributes$inboundSchema
    ),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound =
  {
    _attributes: CreateAssessmentTestRawQtiAssessmentSectionAttributes$Outbound;
    "qti-assessment-item-ref"?:
      | Array<
        CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$Outbound
      >
      | undefined;
  };

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentSectionAttributes$outboundSchema
    ),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound;
}

export function createAssessmentTestRawQtiAssessmentTestQtiAssessmentSectionToJSON(
  createAssessmentTestRawQtiAssessmentTestQtiAssessmentSection:
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema
      .parse(createAssessmentTestRawQtiAssessmentTestQtiAssessmentSection),
  );
}

export function createAssessmentTestRawQtiAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiTestPartAttributes$inboundSchema
    ),
    "qti-assessment-section": z.array(
      z.lazy(() =>
        CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-section": "qtiAssessmentSection",
    });
  });

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound = {
  _attributes: CreateAssessmentTestRawQtiTestPartAttributes$Outbound;
  "qti-assessment-section": Array<
    CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentTestRawQtiTestPartAttributes$outboundSchema
    ),
    qtiAssessmentSection: z.array(
      z.lazy(() =>
        CreateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound =
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound;
}

export function createAssessmentTestRawQtiAssessmentTestQtiTestPartToJSON(
  createAssessmentTestRawQtiAssessmentTestQtiTestPart:
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema.parse(
      createAssessmentTestRawQtiAssessmentTestQtiTestPart,
    ),
  );
}

export function createAssessmentTestRawQtiAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentTestQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTest$inboundSchema: z.ZodType<
  CreateAssessmentTestRawQtiAssessmentTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => CreateAssessmentTestRawAttributes$inboundSchema),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
    ),
  ),
  "qti-test-part": z.array(
    z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-test-part": "qtiTestPart",
  });
});

/** @internal */
export type CreateAssessmentTestRawQtiAssessmentTest$Outbound = {
  _attributes: CreateAssessmentTestRawAttributes$Outbound;
  "qti-outcome-declaration": Array<
    CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  "qti-test-part": Array<
    CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$Outbound
  >;
};

/** @internal */
export const CreateAssessmentTestRawQtiAssessmentTest$outboundSchema: z.ZodType<
  CreateAssessmentTestRawQtiAssessmentTest$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawQtiAssessmentTest
> = z.object({
  attributes: z.lazy(() => CreateAssessmentTestRawAttributes$outboundSchema),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
    ),
  ),
  qtiTestPart: z.array(
    z.lazy(() =>
      CreateAssessmentTestRawQtiAssessmentTestQtiTestPart$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiTestPart: "qti-test-part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawQtiAssessmentTest$ {
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTest$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawQtiAssessmentTest$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawQtiAssessmentTest$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawQtiAssessmentTest$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawQtiAssessmentTest$Outbound;
}

export function createAssessmentTestRawQtiAssessmentTestToJSON(
  createAssessmentTestRawQtiAssessmentTest:
    CreateAssessmentTestRawQtiAssessmentTest,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawQtiAssessmentTest$outboundSchema.parse(
      createAssessmentTestRawQtiAssessmentTest,
    ),
  );
}

export function createAssessmentTestRawQtiAssessmentTestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentTestRawQtiAssessmentTest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentTestRawQtiAssessmentTest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentTestRawQtiAssessmentTest' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawContent$inboundSchema: z.ZodType<
  CreateAssessmentTestRawContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-test": z.lazy(() =>
    CreateAssessmentTestRawQtiAssessmentTest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-test": "qtiAssessmentTest",
  });
});

/** @internal */
export type CreateAssessmentTestRawContent$Outbound = {
  "qti-assessment-test": CreateAssessmentTestRawQtiAssessmentTest$Outbound;
};

/** @internal */
export const CreateAssessmentTestRawContent$outboundSchema: z.ZodType<
  CreateAssessmentTestRawContent$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawContent
> = z.object({
  qtiAssessmentTest: z.lazy(() =>
    CreateAssessmentTestRawQtiAssessmentTest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentTest: "qti-assessment-test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawContent$ {
  /** @deprecated use `CreateAssessmentTestRawContent$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestRawContent$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawContent$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestRawContent$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawContent$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawContent$Outbound;
}

export function createAssessmentTestRawContentToJSON(
  createAssessmentTestRawContent: CreateAssessmentTestRawContent,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawContent$outboundSchema.parse(
      createAssessmentTestRawContent,
    ),
  );
}

export function createAssessmentTestRawContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestRawContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestRawContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawContent' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentTestRawResponse$inboundSchema: z.ZodType<
  CreateAssessmentTestRawResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  "qti-test-part": z.array(
    z.lazy(() => CreateAssessmentTestRawQtiTestPartResponse$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      CreateAssessmentTestRawQtiOutcomeDeclarationResponse$inboundSchema
    ),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateAssessmentTestRawContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-test-part": "qtiTestPart",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "__v": "v",
  });
});

/** @internal */
export type CreateAssessmentTestRawResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  qtiVersion: string;
  "qti-test-part": Array<CreateAssessmentTestRawQtiTestPartResponse$Outbound>;
  "qti-outcome-declaration": Array<
    CreateAssessmentTestRawQtiOutcomeDeclarationResponse$Outbound
  >;
  timeLimit?: number | undefined;
  maxAttempts?: number | undefined;
  toolsEnabled?: { [k: string]: boolean } | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: CreateAssessmentTestRawContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
  isValidXml: boolean;
};

/** @internal */
export const CreateAssessmentTestRawResponse$outboundSchema: z.ZodType<
  CreateAssessmentTestRawResponse$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  qtiTestPart: z.array(
    z.lazy(() => CreateAssessmentTestRawQtiTestPartResponse$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      CreateAssessmentTestRawQtiOutcomeDeclarationResponse$outboundSchema
    ),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateAssessmentTestRawContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiTestPart: "qti-test-part",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawResponse$ {
  /** @deprecated use `CreateAssessmentTestRawResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestRawResponse$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentTestRawResponse$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawResponse$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawResponse$Outbound;
}

export function createAssessmentTestRawResponseToJSON(
  createAssessmentTestRawResponse: CreateAssessmentTestRawResponse,
): string {
  return JSON.stringify(
    CreateAssessmentTestRawResponse$outboundSchema.parse(
      createAssessmentTestRawResponse,
    ),
  );
}

export function createAssessmentTestRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentTestRawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentTestRawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentTestRawResponse' from JSON`,
  );
}
