/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateAssessmentTestRequest = {
  /**
   * Assessment test identifier to update
   */
  identifier: string;
  /**
   * The assessment test to update
   */
  assessmentTest: models.AssessmentTest;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const UpdateAssessmentTestNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type UpdateAssessmentTestNavigationMode = ClosedEnum<
  typeof UpdateAssessmentTestNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const UpdateAssessmentTestSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type UpdateAssessmentTestSubmissionMode = ClosedEnum<
  typeof UpdateAssessmentTestSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type UpdateAssessmentTestQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type UpdateAssessmentTestQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<UpdateAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type UpdateAssessmentTestQtiTestPart = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: UpdateAssessmentTestNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: UpdateAssessmentTestSubmissionMode;
  qtiAssessmentSection: Array<UpdateAssessmentTestQtiAssessmentSection>;
};

/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export const UpdateAssessmentTestCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export type UpdateAssessmentTestCardinality = ClosedEnum<
  typeof UpdateAssessmentTestCardinality
>;

/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export const UpdateAssessmentTestBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export type UpdateAssessmentTestBaseType = ClosedEnum<
  typeof UpdateAssessmentTestBaseType
>;

/**
 * Optional default value configuration for outcome variables
 */
export type UpdateAssessmentTestDefaultValue = {
  /**
   * The default value to assign to the outcome variable
   */
  value?: any | undefined;
};

export type UpdateAssessmentTestQtiOutcomeDeclaration = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
   */
  cardinality?: UpdateAssessmentTestCardinality | undefined;
  /**
   * Data type of the outcome variable, determining how values are stored and processed
   */
  baseType: UpdateAssessmentTestBaseType;
  /**
   * Expected maximum value for this outcome variable in normal circumstances
   */
  normalMaximum?: number | undefined;
  /**
   * Expected minimum value for this outcome variable in normal circumstances
   */
  normalMinimum?: number | undefined;
  /**
   * Optional default value configuration for outcome variables
   */
  defaultValue?: UpdateAssessmentTestDefaultValue | undefined;
};

export type UpdateAssessmentTestAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  toolName: string;
  toolVersion: string;
};

export type UpdateAssessmentTestQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type UpdateAssessmentTestQtiDefaultValue = {
  qtiValue?: any | undefined;
};

export type UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration = {
  attributes: UpdateAssessmentTestQtiOutcomeDeclarationAttributes;
  qtiDefaultValue?: UpdateAssessmentTestQtiDefaultValue | undefined;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
};

export type UpdateAssessmentTestQtiTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type UpdateAssessmentTestQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
};

export type UpdateAssessmentTestQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef = {
  attributes: UpdateAssessmentTestQtiAssessmentItemRefAttributes;
};

export type UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection = {
  attributes: UpdateAssessmentTestQtiAssessmentSectionAttributes;
  qtiAssessmentItemRef?:
    | Array<UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

export type UpdateAssessmentTestQtiAssessmentTestQtiTestPart = {
  attributes: UpdateAssessmentTestQtiTestPartAttributes;
  qtiAssessmentSection: Array<
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection
  >;
};

export type UpdateAssessmentTestQtiAssessmentTest = {
  attributes: UpdateAssessmentTestAttributes;
  qtiOutcomeDeclaration: Array<
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration
  >;
  qtiTestPart: Array<UpdateAssessmentTestQtiAssessmentTestQtiTestPart>;
};

/**
 * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
 */
export type UpdateAssessmentTestContent = {
  qtiAssessmentTest: UpdateAssessmentTestQtiAssessmentTest;
};

/**
 * Complete assessment test data including all test parts, sections, items, and configuration settings
 */
export type UpdateAssessmentTestResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Version of the specification used for this assessment test
   */
  qtiVersion?: string | undefined;
  qtiTestPart: Array<UpdateAssessmentTestQtiTestPart>;
  /**
   * Array of outcome variable declarations for storing assessment results and computed values
   */
  qtiOutcomeDeclaration: Array<UpdateAssessmentTestQtiOutcomeDeclaration>;
  /**
   * Time limit for the entire assessment test in seconds. When not specified, there is no time limit
   */
  timeLimit?: number | undefined;
  /**
   * Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
   */
  maxAttempts?: number | undefined;
  /**
   * Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
   */
  toolsEnabled?: { [k: string]: boolean } | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
   */
  content: UpdateAssessmentTestContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
  /**
   * Indicates whether the generated XML is valid according to schema validation
   */
  isValidXml: boolean;
};

/** @internal */
export const UpdateAssessmentTestRequest$inboundSchema: z.ZodType<
  UpdateAssessmentTestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  AssessmentTest: models.AssessmentTest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AssessmentTest": "assessmentTest",
  });
});

/** @internal */
export type UpdateAssessmentTestRequest$Outbound = {
  identifier: string;
  AssessmentTest: models.AssessmentTest$Outbound;
};

/** @internal */
export const UpdateAssessmentTestRequest$outboundSchema: z.ZodType<
  UpdateAssessmentTestRequest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestRequest
> = z.object({
  identifier: z.string(),
  assessmentTest: models.AssessmentTest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    assessmentTest: "AssessmentTest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestRequest$ {
  /** @deprecated use `UpdateAssessmentTestRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestRequest$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestRequest$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestRequest$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestRequest$Outbound;
}

export function updateAssessmentTestRequestToJSON(
  updateAssessmentTestRequest: UpdateAssessmentTestRequest,
): string {
  return JSON.stringify(
    UpdateAssessmentTestRequest$outboundSchema.parse(
      updateAssessmentTestRequest,
    ),
  );
}

export function updateAssessmentTestRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestNavigationMode$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestNavigationMode
> = z.nativeEnum(UpdateAssessmentTestNavigationMode);

/** @internal */
export const UpdateAssessmentTestNavigationMode$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestNavigationMode
> = UpdateAssessmentTestNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestNavigationMode$ {
  /** @deprecated use `UpdateAssessmentTestNavigationMode$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestNavigationMode$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestNavigationMode$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestSubmissionMode$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestSubmissionMode
> = z.nativeEnum(UpdateAssessmentTestSubmissionMode);

/** @internal */
export const UpdateAssessmentTestSubmissionMode$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestSubmissionMode
> = UpdateAssessmentTestSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestSubmissionMode$ {
  /** @deprecated use `UpdateAssessmentTestSubmissionMode$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestSubmissionMode$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestSubmissionMode$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentItemRef$inboundSchema: z.ZodType<
  UpdateAssessmentTestQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type UpdateAssessmentTestQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const UpdateAssessmentTestQtiAssessmentItemRef$outboundSchema: z.ZodType<
  UpdateAssessmentTestQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function updateAssessmentTestQtiAssessmentItemRefToJSON(
  updateAssessmentTestQtiAssessmentItemRef:
    UpdateAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentItemRef$outboundSchema.parse(
      updateAssessmentTestQtiAssessmentItemRef,
    ),
  );
}

export function updateAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentItemRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentSection$inboundSchema: z.ZodType<
  UpdateAssessmentTestQtiAssessmentSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => UpdateAssessmentTestQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type UpdateAssessmentTestQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<UpdateAssessmentTestQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const UpdateAssessmentTestQtiAssessmentSection$outboundSchema: z.ZodType<
  UpdateAssessmentTestQtiAssessmentSection$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestQtiAssessmentSection
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => UpdateAssessmentTestQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestQtiAssessmentSection$Outbound;
}

export function updateAssessmentTestQtiAssessmentSectionToJSON(
  updateAssessmentTestQtiAssessmentSection:
    UpdateAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentSection$outboundSchema.parse(
      updateAssessmentTestQtiAssessmentSection,
    ),
  );
}

export function updateAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentSection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiTestPart$inboundSchema: z.ZodType<
  UpdateAssessmentTestQtiTestPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: UpdateAssessmentTestNavigationMode$inboundSchema,
  submissionMode: UpdateAssessmentTestSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(
    z.lazy(() => UpdateAssessmentTestQtiAssessmentSection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type UpdateAssessmentTestQtiTestPart$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<
    UpdateAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestQtiTestPart$outboundSchema: z.ZodType<
  UpdateAssessmentTestQtiTestPart$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestQtiTestPart
> = z.object({
  identifier: z.string(),
  navigationMode: UpdateAssessmentTestNavigationMode$outboundSchema,
  submissionMode: UpdateAssessmentTestSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(
    z.lazy(() => UpdateAssessmentTestQtiAssessmentSection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiTestPart$ {
  /** @deprecated use `UpdateAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestQtiTestPart$Outbound;
}

export function updateAssessmentTestQtiTestPartToJSON(
  updateAssessmentTestQtiTestPart: UpdateAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiTestPart$outboundSchema.parse(
      updateAssessmentTestQtiTestPart,
    ),
  );
}

export function updateAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestQtiTestPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestQtiTestPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestCardinality$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestCardinality
> = z.nativeEnum(UpdateAssessmentTestCardinality);

/** @internal */
export const UpdateAssessmentTestCardinality$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestCardinality
> = UpdateAssessmentTestCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestCardinality$ {
  /** @deprecated use `UpdateAssessmentTestCardinality$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestCardinality$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestCardinality$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestCardinality$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestBaseType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestBaseType
> = z.nativeEnum(UpdateAssessmentTestBaseType);

/** @internal */
export const UpdateAssessmentTestBaseType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentTestBaseType
> = UpdateAssessmentTestBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestBaseType$ {
  /** @deprecated use `UpdateAssessmentTestBaseType$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestBaseType$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestBaseType$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestBaseType$outboundSchema;
}

/** @internal */
export const UpdateAssessmentTestDefaultValue$inboundSchema: z.ZodType<
  UpdateAssessmentTestDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
});

/** @internal */
export type UpdateAssessmentTestDefaultValue$Outbound = {
  value?: any | undefined;
};

/** @internal */
export const UpdateAssessmentTestDefaultValue$outboundSchema: z.ZodType<
  UpdateAssessmentTestDefaultValue$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestDefaultValue
> = z.object({
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestDefaultValue$ {
  /** @deprecated use `UpdateAssessmentTestDefaultValue$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestDefaultValue$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestDefaultValue$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestDefaultValue$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestDefaultValue$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestDefaultValue$Outbound;
}

export function updateAssessmentTestDefaultValueToJSON(
  updateAssessmentTestDefaultValue: UpdateAssessmentTestDefaultValue,
): string {
  return JSON.stringify(
    UpdateAssessmentTestDefaultValue$outboundSchema.parse(
      updateAssessmentTestDefaultValue,
    ),
  );
}

export function updateAssessmentTestDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestDefaultValue' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiOutcomeDeclaration$inboundSchema: z.ZodType<
  UpdateAssessmentTestQtiOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: UpdateAssessmentTestCardinality$inboundSchema.default("single"),
  baseType: UpdateAssessmentTestBaseType$inboundSchema,
  normalMaximum: z.number().optional(),
  normalMinimum: z.number().optional(),
  defaultValue: z.lazy(() => UpdateAssessmentTestDefaultValue$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateAssessmentTestQtiOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
  defaultValue?: UpdateAssessmentTestDefaultValue$Outbound | undefined;
};

/** @internal */
export const UpdateAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    identifier: z.string(),
    cardinality: UpdateAssessmentTestCardinality$outboundSchema.default(
      "single",
    ),
    baseType: UpdateAssessmentTestBaseType$outboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() => UpdateAssessmentTestDefaultValue$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `UpdateAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function updateAssessmentTestQtiOutcomeDeclarationToJSON(
  updateAssessmentTestQtiOutcomeDeclaration:
    UpdateAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiOutcomeDeclaration$outboundSchema.parse(
      updateAssessmentTestQtiOutcomeDeclaration,
    ),
  );
}

export function updateAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiOutcomeDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestAttributes$inboundSchema: z.ZodType<
  UpdateAssessmentTestAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  "tool-name": z.string(),
  "tool-version": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "tool-name": "toolName",
    "tool-version": "toolVersion",
  });
});

/** @internal */
export type UpdateAssessmentTestAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  "tool-name": string;
  "tool-version": string;
};

/** @internal */
export const UpdateAssessmentTestAttributes$outboundSchema: z.ZodType<
  UpdateAssessmentTestAttributes$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  toolName: z.string(),
  toolVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    toolName: "tool-name",
    toolVersion: "tool-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestAttributes$ {
  /** @deprecated use `UpdateAssessmentTestAttributes$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestAttributes$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestAttributes$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestAttributes$Outbound;
}

export function updateAssessmentTestAttributesToJSON(
  updateAssessmentTestAttributes: UpdateAssessmentTestAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestAttributes$outboundSchema.parse(
      updateAssessmentTestAttributes,
    ),
  );
}

export function updateAssessmentTestAttributesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    "base-type": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "base-type": "baseType",
    });
  });

/** @internal */
export type UpdateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  "base-type": string;
};

/** @internal */
export const UpdateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      baseType: "base-type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `UpdateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound;
}

export function updateAssessmentTestQtiOutcomeDeclarationAttributesToJSON(
  updateAssessmentTestQtiOutcomeDeclarationAttributes:
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      updateAssessmentTestQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function updateAssessmentTestQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiDefaultValue$inboundSchema: z.ZodType<
  UpdateAssessmentTestQtiDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type UpdateAssessmentTestQtiDefaultValue$Outbound = {
  "qti-value"?: any | undefined;
};

/** @internal */
export const UpdateAssessmentTestQtiDefaultValue$outboundSchema: z.ZodType<
  UpdateAssessmentTestQtiDefaultValue$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestQtiDefaultValue
> = z.object({
  qtiValue: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiDefaultValue$ {
  /** @deprecated use `UpdateAssessmentTestQtiDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiDefaultValue$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiDefaultValue$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiDefaultValue$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestQtiDefaultValue$Outbound;
}

export function updateAssessmentTestQtiDefaultValueToJSON(
  updateAssessmentTestQtiDefaultValue: UpdateAssessmentTestQtiDefaultValue,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiDefaultValue$outboundSchema.parse(
      updateAssessmentTestQtiDefaultValue,
    ),
  );
}

export function updateAssessmentTestQtiDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestQtiDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestQtiDefaultValue' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestQtiOutcomeDeclarationAttributes$inboundSchema
    ),
    "qti-default-value": z.lazy(() =>
      UpdateAssessmentTestQtiDefaultValue$inboundSchema
    ).optional(),
    "normal-maximum": z.number().optional(),
    "normal-minimum": z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-default-value": "qtiDefaultValue",
      "normal-maximum": "normalMaximum",
      "normal-minimum": "normalMinimum",
    });
  });

/** @internal */
export type UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound =
  {
    _attributes: UpdateAssessmentTestQtiOutcomeDeclarationAttributes$Outbound;
    "qti-default-value"?:
      | UpdateAssessmentTestQtiDefaultValue$Outbound
      | undefined;
    "normal-maximum"?: number | undefined;
    "normal-minimum"?: number | undefined;
  };

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestQtiOutcomeDeclarationAttributes$outboundSchema
    ),
    qtiDefaultValue: z.lazy(() =>
      UpdateAssessmentTestQtiDefaultValue$outboundSchema
    ).optional(),
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiDefaultValue: "qti-default-value",
      normalMaximum: "normal-maximum",
      normalMinimum: "normal-minimum",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function updateAssessmentTestQtiAssessmentTestQtiOutcomeDeclarationToJSON(
  updateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration:
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      .parse(updateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration),
  );
}

export function updateAssessmentTestQtiAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiTestPartAttributes$inboundSchema: z.ZodType<
  UpdateAssessmentTestQtiTestPartAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  "navigation-mode": z.string(),
  "submission-mode": z.string(),
}).transform((v) => {
  return remap$(v, {
    "navigation-mode": "navigationMode",
    "submission-mode": "submissionMode",
  });
});

/** @internal */
export type UpdateAssessmentTestQtiTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const UpdateAssessmentTestQtiTestPartAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiTestPartAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiTestPartAttributes
  > = z.object({
    identifier: z.string(),
    navigationMode: z.string(),
    submissionMode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      navigationMode: "navigation-mode",
      submissionMode: "submission-mode",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiTestPartAttributes$ {
  /** @deprecated use `UpdateAssessmentTestQtiTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiTestPartAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiTestPartAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiTestPartAttributes$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestQtiTestPartAttributes$Outbound;
}

export function updateAssessmentTestQtiTestPartAttributesToJSON(
  updateAssessmentTestQtiTestPartAttributes:
    UpdateAssessmentTestQtiTestPartAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiTestPartAttributes$outboundSchema.parse(
      updateAssessmentTestQtiTestPartAttributes,
    ),
  );
}

export function updateAssessmentTestQtiTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiTestPartAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiTestPartAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/** @internal */
export type UpdateAssessmentTestQtiAssessmentSectionAttributes$Outbound = {
  identifier: string;
  title: string;
  visible: string;
};

/** @internal */
export const UpdateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentSectionAttributes$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestQtiAssessmentSectionAttributes$Outbound;
}

export function updateAssessmentTestQtiAssessmentSectionAttributesToJSON(
  updateAssessmentTestQtiAssessmentSectionAttributes:
    UpdateAssessmentTestQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema.parse(
      updateAssessmentTestQtiAssessmentSectionAttributes,
    ),
  );
}

export function updateAssessmentTestQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type UpdateAssessmentTestQtiAssessmentItemRefAttributes$Outbound = {
  identifier: string;
  href: string;
};

/** @internal */
export const UpdateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestQtiAssessmentItemRefAttributes$Outbound;
}

export function updateAssessmentTestQtiAssessmentItemRefAttributesToJSON(
  updateAssessmentTestQtiAssessmentItemRefAttributes:
    UpdateAssessmentTestQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema.parse(
      updateAssessmentTestQtiAssessmentItemRefAttributes,
    ),
  );
}

export function updateAssessmentTestQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentItemRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound =
  {
    _attributes: UpdateAssessmentTestQtiAssessmentItemRefAttributes$Outbound;
  };

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentItemRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function updateAssessmentTestQtiAssessmentTestQtiAssessmentItemRefToJSON(
  updateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef:
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      .parse(updateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef),
  );
}

export function updateAssessmentTestQtiAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentSectionAttributes$inboundSchema
    ),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound =
  {
    _attributes: UpdateAssessmentTestQtiAssessmentSectionAttributes$Outbound;
    "qti-assessment-item-ref"?:
      | Array<
        UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$Outbound
      >
      | undefined;
  };

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentSectionAttributes$outboundSchema
    ),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound;
}

export function updateAssessmentTestQtiAssessmentTestQtiAssessmentSectionToJSON(
  updateAssessmentTestQtiAssessmentTestQtiAssessmentSection:
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema
      .parse(updateAssessmentTestQtiAssessmentTestQtiAssessmentSection),
  );
}

export function updateAssessmentTestQtiAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentTestQtiTestPartAttributes$inboundSchema
    ),
    "qti-assessment-section": z.array(
      z.lazy(() =>
        UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-section": "qtiAssessmentSection",
    });
  });

/** @internal */
export type UpdateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound = {
  _attributes: UpdateAssessmentTestQtiTestPartAttributes$Outbound;
  "qti-assessment-section": Array<
    UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentTestQtiTestPartAttributes$outboundSchema
    ),
    qtiAssessmentSection: z.array(
      z.lazy(() =>
        UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentTestQtiTestPart$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound;
}

export function updateAssessmentTestQtiAssessmentTestQtiTestPartToJSON(
  updateAssessmentTestQtiAssessmentTestQtiTestPart:
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema.parse(
      updateAssessmentTestQtiAssessmentTestQtiTestPart,
    ),
  );
}

export function updateAssessmentTestQtiAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentTestQtiAssessmentTestQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTest$inboundSchema: z.ZodType<
  UpdateAssessmentTestQtiAssessmentTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => UpdateAssessmentTestAttributes$inboundSchema),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
    ),
  ),
  "qti-test-part": z.array(
    z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentTestQtiTestPart$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-test-part": "qtiTestPart",
  });
});

/** @internal */
export type UpdateAssessmentTestQtiAssessmentTest$Outbound = {
  _attributes: UpdateAssessmentTestAttributes$Outbound;
  "qti-outcome-declaration": Array<
    UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  "qti-test-part": Array<
    UpdateAssessmentTestQtiAssessmentTestQtiTestPart$Outbound
  >;
};

/** @internal */
export const UpdateAssessmentTestQtiAssessmentTest$outboundSchema: z.ZodType<
  UpdateAssessmentTestQtiAssessmentTest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestQtiAssessmentTest
> = z.object({
  attributes: z.lazy(() => UpdateAssessmentTestAttributes$outboundSchema),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
    ),
  ),
  qtiTestPart: z.array(
    z.lazy(() =>
      UpdateAssessmentTestQtiAssessmentTestQtiTestPart$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiTestPart: "qti-test-part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestQtiAssessmentTest$ {
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestQtiAssessmentTest$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestQtiAssessmentTest$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestQtiAssessmentTest$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestQtiAssessmentTest$Outbound;
}

export function updateAssessmentTestQtiAssessmentTestToJSON(
  updateAssessmentTestQtiAssessmentTest: UpdateAssessmentTestQtiAssessmentTest,
): string {
  return JSON.stringify(
    UpdateAssessmentTestQtiAssessmentTest$outboundSchema.parse(
      updateAssessmentTestQtiAssessmentTest,
    ),
  );
}

export function updateAssessmentTestQtiAssessmentTestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestQtiAssessmentTest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentTestQtiAssessmentTest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestQtiAssessmentTest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestContent$inboundSchema: z.ZodType<
  UpdateAssessmentTestContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-test": z.lazy(() =>
    UpdateAssessmentTestQtiAssessmentTest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-test": "qtiAssessmentTest",
  });
});

/** @internal */
export type UpdateAssessmentTestContent$Outbound = {
  "qti-assessment-test": UpdateAssessmentTestQtiAssessmentTest$Outbound;
};

/** @internal */
export const UpdateAssessmentTestContent$outboundSchema: z.ZodType<
  UpdateAssessmentTestContent$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestContent
> = z.object({
  qtiAssessmentTest: z.lazy(() =>
    UpdateAssessmentTestQtiAssessmentTest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentTest: "qti-assessment-test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestContent$ {
  /** @deprecated use `UpdateAssessmentTestContent$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestContent$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestContent$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestContent$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestContent$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestContent$Outbound;
}

export function updateAssessmentTestContentToJSON(
  updateAssessmentTestContent: UpdateAssessmentTestContent,
): string {
  return JSON.stringify(
    UpdateAssessmentTestContent$outboundSchema.parse(
      updateAssessmentTestContent,
    ),
  );
}

export function updateAssessmentTestContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestContent' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentTestResponse$inboundSchema: z.ZodType<
  UpdateAssessmentTestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  "qti-test-part": z.array(
    z.lazy(() => UpdateAssessmentTestQtiTestPart$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => UpdateAssessmentTestQtiOutcomeDeclaration$inboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentTestContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-test-part": "qtiTestPart",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "__v": "v",
  });
});

/** @internal */
export type UpdateAssessmentTestResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  qtiVersion: string;
  "qti-test-part": Array<UpdateAssessmentTestQtiTestPart$Outbound>;
  "qti-outcome-declaration": Array<
    UpdateAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  timeLimit?: number | undefined;
  maxAttempts?: number | undefined;
  toolsEnabled?: { [k: string]: boolean } | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: UpdateAssessmentTestContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
  isValidXml: boolean;
};

/** @internal */
export const UpdateAssessmentTestResponse$outboundSchema: z.ZodType<
  UpdateAssessmentTestResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentTestResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  qtiTestPart: z.array(
    z.lazy(() => UpdateAssessmentTestQtiTestPart$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => UpdateAssessmentTestQtiOutcomeDeclaration$outboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentTestContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
  isValidXml: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiTestPart: "qti-test-part",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestResponse$ {
  /** @deprecated use `UpdateAssessmentTestResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentTestResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentTestResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestResponse$Outbound;
}

export function updateAssessmentTestResponseToJSON(
  updateAssessmentTestResponse: UpdateAssessmentTestResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentTestResponse$outboundSchema.parse(
      updateAssessmentTestResponse,
    ),
  );
}

export function updateAssessmentTestResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentTestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentTestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentTestResponse' from JSON`,
  );
}
