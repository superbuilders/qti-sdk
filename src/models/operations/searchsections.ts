/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Field to sort by
 */
export const SearchSectionsSort = {
  Title: "title",
  Identifier: "identifier",
  CreatedAt: "createdAt",
  UpdatedAt: "updatedAt",
} as const;
/**
 * Field to sort by
 */
export type SearchSectionsSort = ClosedEnum<typeof SearchSectionsSort>;

/**
 * Sort order
 */
export const SearchSectionsQueryParamOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort order
 */
export type SearchSectionsQueryParamOrder = ClosedEnum<
  typeof SearchSectionsQueryParamOrder
>;

export type SearchSectionsRequest = {
  /**
   * Root assessment test identifier
   */
  assessmentTestIdentifier: string;
  /**
   * Parent test part identifier
   */
  testPartIdentifier: string;
  /**
   * Search title and identifier fields using a search term. This is a fuzzy search.
   */
  query?: string | undefined;
  /**
   * Page number for pagination
   */
  page?: string | undefined;
  /**
   * Number of items per page
   */
  limit?: string | undefined;
  /**
   * Field to sort by
   */
  sort?: SearchSectionsSort | undefined;
  /**
   * Sort order
   */
  order?: SearchSectionsQueryParamOrder | undefined;
};

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type SearchSectionsQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type SearchSectionsItem = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?: Array<SearchSectionsQtiAssessmentItemRef> | undefined;
};

/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export const SearchSectionsOrderResponse = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export type SearchSectionsOrderResponse = ClosedEnum<
  typeof SearchSectionsOrderResponse
>;

/**
 * Paginated response containing all assessment sections that exist in the specified test part on the service provider, including complete section data and navigation metadata.
 */
export type SearchSectionsResponse = {
  /**
   * Array of assessment sections belonging to the specified test part, each containing complete section data and item references.
   */
  items: Array<SearchSectionsItem>;
  /**
   * The total number of entities that match the search criteria.
   */
  total: number;
  /**
   * The page number of the entities that match the search criteria.
   */
  page?: number | undefined;
  /**
   * The total number of pages of entities that match the search criteria.
   */
  pages: number;
  /**
   * The number of entities per page.
   */
  limit?: number | undefined;
  /**
   * The field to sort the entities by.
   */
  sort: string;
  /**
   * The order to sort the entities by. Either 'asc' or 'desc'.
   */
  order: SearchSectionsOrderResponse;
};

/** @internal */
export const SearchSectionsSort$inboundSchema: z.ZodNativeEnum<
  typeof SearchSectionsSort
> = z.nativeEnum(SearchSectionsSort);

/** @internal */
export const SearchSectionsSort$outboundSchema: z.ZodNativeEnum<
  typeof SearchSectionsSort
> = SearchSectionsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsSort$ {
  /** @deprecated use `SearchSectionsSort$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsSort$inboundSchema;
  /** @deprecated use `SearchSectionsSort$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsSort$outboundSchema;
}

/** @internal */
export const SearchSectionsQueryParamOrder$inboundSchema: z.ZodNativeEnum<
  typeof SearchSectionsQueryParamOrder
> = z.nativeEnum(SearchSectionsQueryParamOrder);

/** @internal */
export const SearchSectionsQueryParamOrder$outboundSchema: z.ZodNativeEnum<
  typeof SearchSectionsQueryParamOrder
> = SearchSectionsQueryParamOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsQueryParamOrder$ {
  /** @deprecated use `SearchSectionsQueryParamOrder$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsQueryParamOrder$inboundSchema;
  /** @deprecated use `SearchSectionsQueryParamOrder$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsQueryParamOrder$outboundSchema;
}

/** @internal */
export const SearchSectionsRequest$inboundSchema: z.ZodType<
  SearchSectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchSectionsSort$inboundSchema.optional(),
  order: SearchSectionsQueryParamOrder$inboundSchema.default("desc"),
});

/** @internal */
export type SearchSectionsRequest$Outbound = {
  assessmentTestIdentifier: string;
  testPartIdentifier: string;
  query?: string | undefined;
  page: string;
  limit: string;
  sort?: string | undefined;
  order: string;
};

/** @internal */
export const SearchSectionsRequest$outboundSchema: z.ZodType<
  SearchSectionsRequest$Outbound,
  z.ZodTypeDef,
  SearchSectionsRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchSectionsSort$outboundSchema.optional(),
  order: SearchSectionsQueryParamOrder$outboundSchema.default("desc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsRequest$ {
  /** @deprecated use `SearchSectionsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsRequest$inboundSchema;
  /** @deprecated use `SearchSectionsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsRequest$outboundSchema;
  /** @deprecated use `SearchSectionsRequest$Outbound` instead. */
  export type Outbound = SearchSectionsRequest$Outbound;
}

export function searchSectionsRequestToJSON(
  searchSectionsRequest: SearchSectionsRequest,
): string {
  return JSON.stringify(
    SearchSectionsRequest$outboundSchema.parse(searchSectionsRequest),
  );
}

export function searchSectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchSectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchSectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchSectionsRequest' from JSON`,
  );
}

/** @internal */
export const SearchSectionsQtiAssessmentItemRef$inboundSchema: z.ZodType<
  SearchSectionsQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type SearchSectionsQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const SearchSectionsQtiAssessmentItemRef$outboundSchema: z.ZodType<
  SearchSectionsQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  SearchSectionsQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsQtiAssessmentItemRef$ {
  /** @deprecated use `SearchSectionsQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `SearchSectionsQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    SearchSectionsQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `SearchSectionsQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = SearchSectionsQtiAssessmentItemRef$Outbound;
}

export function searchSectionsQtiAssessmentItemRefToJSON(
  searchSectionsQtiAssessmentItemRef: SearchSectionsQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    SearchSectionsQtiAssessmentItemRef$outboundSchema.parse(
      searchSectionsQtiAssessmentItemRef,
    ),
  );
}

export function searchSectionsQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<SearchSectionsQtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchSectionsQtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchSectionsQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const SearchSectionsItem$inboundSchema: z.ZodType<
  SearchSectionsItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => SearchSectionsQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type SearchSectionsItem$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<SearchSectionsQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const SearchSectionsItem$outboundSchema: z.ZodType<
  SearchSectionsItem$Outbound,
  z.ZodTypeDef,
  SearchSectionsItem
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => SearchSectionsQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsItem$ {
  /** @deprecated use `SearchSectionsItem$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsItem$inboundSchema;
  /** @deprecated use `SearchSectionsItem$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsItem$outboundSchema;
  /** @deprecated use `SearchSectionsItem$Outbound` instead. */
  export type Outbound = SearchSectionsItem$Outbound;
}

export function searchSectionsItemToJSON(
  searchSectionsItem: SearchSectionsItem,
): string {
  return JSON.stringify(
    SearchSectionsItem$outboundSchema.parse(searchSectionsItem),
  );
}

export function searchSectionsItemFromJSON(
  jsonString: string,
): SafeParseResult<SearchSectionsItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchSectionsItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchSectionsItem' from JSON`,
  );
}

/** @internal */
export const SearchSectionsOrderResponse$inboundSchema: z.ZodNativeEnum<
  typeof SearchSectionsOrderResponse
> = z.nativeEnum(SearchSectionsOrderResponse);

/** @internal */
export const SearchSectionsOrderResponse$outboundSchema: z.ZodNativeEnum<
  typeof SearchSectionsOrderResponse
> = SearchSectionsOrderResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsOrderResponse$ {
  /** @deprecated use `SearchSectionsOrderResponse$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsOrderResponse$inboundSchema;
  /** @deprecated use `SearchSectionsOrderResponse$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsOrderResponse$outboundSchema;
}

/** @internal */
export const SearchSectionsResponse$inboundSchema: z.ZodType<
  SearchSectionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => SearchSectionsItem$inboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchSectionsOrderResponse$inboundSchema,
});

/** @internal */
export type SearchSectionsResponse$Outbound = {
  items: Array<SearchSectionsItem$Outbound>;
  total: number;
  page: number;
  pages: number;
  limit: number;
  sort: string;
  order: string;
};

/** @internal */
export const SearchSectionsResponse$outboundSchema: z.ZodType<
  SearchSectionsResponse$Outbound,
  z.ZodTypeDef,
  SearchSectionsResponse
> = z.object({
  items: z.array(z.lazy(() => SearchSectionsItem$outboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchSectionsOrderResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsResponse$ {
  /** @deprecated use `SearchSectionsResponse$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsResponse$inboundSchema;
  /** @deprecated use `SearchSectionsResponse$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsResponse$outboundSchema;
  /** @deprecated use `SearchSectionsResponse$Outbound` instead. */
  export type Outbound = SearchSectionsResponse$Outbound;
}

export function searchSectionsResponseToJSON(
  searchSectionsResponse: SearchSectionsResponse,
): string {
  return JSON.stringify(
    SearchSectionsResponse$outboundSchema.parse(searchSectionsResponse),
  );
}

export function searchSectionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchSectionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchSectionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchSectionsResponse' from JSON`,
  );
}
