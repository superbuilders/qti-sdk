/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAssessmentItemRequest = {
  /**
   * The unique identifier of the assessment item to retrieve
   */
  identifier: string;
};

/**
 * Assessment item interaction types that are supported by the service provider.
 */
export const GetAssessmentItemType = {
  Choice: "choice",
  TextEntry: "text-entry",
  ExtendedText: "extended-text",
  InlineChoice: "inline-choice",
  Match: "match",
  Order: "order",
  Associate: "associate",
  SelectPoint: "select-point",
  GraphicOrder: "graphic-order",
  GraphicAssociate: "graphic-associate",
  GraphicGapMatch: "graphic-gap-match",
  Hotspot: "hotspot",
  Hottext: "hottext",
  Slider: "slider",
  Drawing: "drawing",
  Media: "media",
  Upload: "upload",
} as const;
/**
 * Assessment item interaction types that are supported by the service provider.
 */
export type GetAssessmentItemType = ClosedEnum<typeof GetAssessmentItemType>;

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const GetAssessmentItemResponseDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type GetAssessmentItemResponseDeclarationCardinality = ClosedEnum<
  typeof GetAssessmentItemResponseDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const GetAssessmentItemResponseDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type GetAssessmentItemResponseDeclarationBaseType = ClosedEnum<
  typeof GetAssessmentItemResponseDeclarationBaseType
>;

/**
 * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
 */
export type GetAssessmentItemCorrectResponse = {
  value: Array<string>;
};

export type GetAssessmentItemResponseDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: GetAssessmentItemResponseDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: GetAssessmentItemResponseDeclarationBaseType | undefined;
  /**
   * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
   */
  correctResponse: GetAssessmentItemCorrectResponse;
};

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const GetAssessmentItemOutcomeDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type GetAssessmentItemOutcomeDeclarationCardinality = ClosedEnum<
  typeof GetAssessmentItemOutcomeDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const GetAssessmentItemOutcomeDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type GetAssessmentItemOutcomeDeclarationBaseType = ClosedEnum<
  typeof GetAssessmentItemOutcomeDeclarationBaseType
>;

export type GetAssessmentItemOutcomeDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: GetAssessmentItemOutcomeDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: GetAssessmentItemOutcomeDeclarationBaseType | undefined;
};

/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export const GetAssessmentItemTemplateType = {
  MatchCorrect: "match_correct",
  MapResponse: "map_response",
} as const;
/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export type GetAssessmentItemTemplateType = ClosedEnum<
  typeof GetAssessmentItemTemplateType
>;

/**
 * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
 */
export type GetAssessmentItemInlineFeedback = {
  /**
   * Identifier of the outcome variable to be set with the inline feedback value.
   */
  outcomeIdentifier: string;
  /**
   * Identifier of the variable whose value will be assigned to the outcome variable during response processing.
   */
  variableIdentifier: string;
};

/**
 * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
 */
export type GetAssessmentItemResponseProcessing = {
  /**
   * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
   */
  templateType: GetAssessmentItemTemplateType;
  /**
   * Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
   */
  responseDeclarationIdentifier: string;
  /**
   * Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
   */
  outcomeIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
   */
  correctResponseIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
   */
  incorrectResponseIdentifier: string;
  /**
   * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
   */
  inlineFeedback?: GetAssessmentItemInlineFeedback | undefined;
};

export type GetAssessmentItemAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  adaptive: string;
  timeDependent: string;
};

export type GetAssessmentItemQtiResponseDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type GetAssessmentItemQtiCorrectResponse = {
  qtiValue: Array<string>;
};

export type GetAssessmentItemQtiResponseDeclaration = {
  attributes: GetAssessmentItemQtiResponseDeclarationAttributes;
  qtiCorrectResponse: GetAssessmentItemQtiCorrectResponse;
};

export type GetAssessmentItemQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type GetAssessmentItemQtiOutcomeDeclaration = {
  attributes: GetAssessmentItemQtiOutcomeDeclarationAttributes;
};

export type GetAssessmentItemQtiAssessmentStimulusRefAttributes = {
  identifier: string;
  href: string;
  title: string;
};

export type GetAssessmentItemQtiAssessmentStimulusRef = {
  attributes: GetAssessmentItemQtiAssessmentStimulusRefAttributes;
};

export type GetAssessmentItemQtiAssessmentItem = {
  attributes: GetAssessmentItemAttributes;
  qtiResponseDeclaration: Array<GetAssessmentItemQtiResponseDeclaration>;
  qtiOutcomeDeclaration: Array<GetAssessmentItemQtiOutcomeDeclaration>;
  qtiAssessmentStimulusRef: GetAssessmentItemQtiAssessmentStimulusRef;
  qtiItemBody?: any | undefined;
  qtiResponseProcessing?: any | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type GetAssessmentItemContent = {
  qtiAssessmentItem: GetAssessmentItemQtiAssessmentItem;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const GetAssessmentItemModalFeedbackShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type GetAssessmentItemModalFeedbackShowHide = ClosedEnum<
  typeof GetAssessmentItemModalFeedbackShowHide
>;

export type GetAssessmentItemModalFeedback = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: GetAssessmentItemModalFeedbackShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
   */
  title: string;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const GetAssessmentItemFeedbackInlineShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type GetAssessmentItemFeedbackInlineShowHide = ClosedEnum<
  typeof GetAssessmentItemFeedbackInlineShowHide
>;

export type GetAssessmentItemFeedbackInline = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: GetAssessmentItemFeedbackInlineShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const GetAssessmentItemFeedbackBlockShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type GetAssessmentItemFeedbackBlockShowHide = ClosedEnum<
  typeof GetAssessmentItemFeedbackBlockShowHide
>;

export type GetAssessmentItemFeedbackBlock = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: GetAssessmentItemFeedbackBlockShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Assessment item retrieved successfully
 */
export type GetAssessmentItemResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Assessment item interaction types that are supported by the service provider.
   */
  type: GetAssessmentItemType;
  /**
   * QTI version of the assessment item
   */
  qtiVersion?: string | undefined;
  /**
   * Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
   */
  timeDependent?: boolean | undefined;
  /**
   * Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
   */
  adaptive?: boolean | undefined;
  responseDeclarations?:
    | Array<GetAssessmentItemResponseDeclaration>
    | undefined;
  outcomeDeclarations?: Array<GetAssessmentItemOutcomeDeclaration> | undefined;
  /**
   * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
   */
  responseProcessing: GetAssessmentItemResponseProcessing;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: GetAssessmentItemContent;
  /**
   * Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
   */
  modalFeedback?: Array<GetAssessmentItemModalFeedback> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackInline?: Array<GetAssessmentItemFeedbackInline> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackBlock?: Array<GetAssessmentItemFeedbackBlock> | undefined;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/** @internal */
export const GetAssessmentItemRequest$inboundSchema: z.ZodType<
  GetAssessmentItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
});

/** @internal */
export type GetAssessmentItemRequest$Outbound = {
  identifier: string;
};

/** @internal */
export const GetAssessmentItemRequest$outboundSchema: z.ZodType<
  GetAssessmentItemRequest$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemRequest
> = z.object({
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemRequest$ {
  /** @deprecated use `GetAssessmentItemRequest$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemRequest$inboundSchema;
  /** @deprecated use `GetAssessmentItemRequest$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemRequest$outboundSchema;
  /** @deprecated use `GetAssessmentItemRequest$Outbound` instead. */
  export type Outbound = GetAssessmentItemRequest$Outbound;
}

export function getAssessmentItemRequestToJSON(
  getAssessmentItemRequest: GetAssessmentItemRequest,
): string {
  return JSON.stringify(
    GetAssessmentItemRequest$outboundSchema.parse(getAssessmentItemRequest),
  );
}

export function getAssessmentItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemRequest' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemType$inboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentItemType
> = z.nativeEnum(GetAssessmentItemType);

/** @internal */
export const GetAssessmentItemType$outboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentItemType
> = GetAssessmentItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemType$ {
  /** @deprecated use `GetAssessmentItemType$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemType$inboundSchema;
  /** @deprecated use `GetAssessmentItemType$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemType$outboundSchema;
}

/** @internal */
export const GetAssessmentItemResponseDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemResponseDeclarationCardinality> = z
    .nativeEnum(GetAssessmentItemResponseDeclarationCardinality);

/** @internal */
export const GetAssessmentItemResponseDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemResponseDeclarationCardinality> =
    GetAssessmentItemResponseDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemResponseDeclarationCardinality$ {
  /** @deprecated use `GetAssessmentItemResponseDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemResponseDeclarationCardinality$inboundSchema;
  /** @deprecated use `GetAssessmentItemResponseDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemResponseDeclarationCardinality$outboundSchema;
}

/** @internal */
export const GetAssessmentItemResponseDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemResponseDeclarationBaseType> = z
    .nativeEnum(GetAssessmentItemResponseDeclarationBaseType);

/** @internal */
export const GetAssessmentItemResponseDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemResponseDeclarationBaseType> =
    GetAssessmentItemResponseDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemResponseDeclarationBaseType$ {
  /** @deprecated use `GetAssessmentItemResponseDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemResponseDeclarationBaseType$inboundSchema;
  /** @deprecated use `GetAssessmentItemResponseDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemResponseDeclarationBaseType$outboundSchema;
}

/** @internal */
export const GetAssessmentItemCorrectResponse$inboundSchema: z.ZodType<
  GetAssessmentItemCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.array(z.string()),
});

/** @internal */
export type GetAssessmentItemCorrectResponse$Outbound = {
  value: Array<string>;
};

/** @internal */
export const GetAssessmentItemCorrectResponse$outboundSchema: z.ZodType<
  GetAssessmentItemCorrectResponse$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemCorrectResponse
> = z.object({
  value: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemCorrectResponse$ {
  /** @deprecated use `GetAssessmentItemCorrectResponse$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemCorrectResponse$inboundSchema;
  /** @deprecated use `GetAssessmentItemCorrectResponse$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemCorrectResponse$outboundSchema;
  /** @deprecated use `GetAssessmentItemCorrectResponse$Outbound` instead. */
  export type Outbound = GetAssessmentItemCorrectResponse$Outbound;
}

export function getAssessmentItemCorrectResponseToJSON(
  getAssessmentItemCorrectResponse: GetAssessmentItemCorrectResponse,
): string {
  return JSON.stringify(
    GetAssessmentItemCorrectResponse$outboundSchema.parse(
      getAssessmentItemCorrectResponse,
    ),
  );
}

export function getAssessmentItemCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemCorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemCorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemCorrectResponse' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemResponseDeclaration$inboundSchema: z.ZodType<
  GetAssessmentItemResponseDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: GetAssessmentItemResponseDeclarationCardinality$inboundSchema,
  baseType: GetAssessmentItemResponseDeclarationBaseType$inboundSchema
    .optional(),
  correctResponse: z.lazy(() => GetAssessmentItemCorrectResponse$inboundSchema),
});

/** @internal */
export type GetAssessmentItemResponseDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
  correctResponse: GetAssessmentItemCorrectResponse$Outbound;
};

/** @internal */
export const GetAssessmentItemResponseDeclaration$outboundSchema: z.ZodType<
  GetAssessmentItemResponseDeclaration$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemResponseDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: GetAssessmentItemResponseDeclarationCardinality$outboundSchema,
  baseType: GetAssessmentItemResponseDeclarationBaseType$outboundSchema
    .optional(),
  correctResponse: z.lazy(() =>
    GetAssessmentItemCorrectResponse$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemResponseDeclaration$ {
  /** @deprecated use `GetAssessmentItemResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemResponseDeclaration$inboundSchema;
  /** @deprecated use `GetAssessmentItemResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemResponseDeclaration$outboundSchema;
  /** @deprecated use `GetAssessmentItemResponseDeclaration$Outbound` instead. */
  export type Outbound = GetAssessmentItemResponseDeclaration$Outbound;
}

export function getAssessmentItemResponseDeclarationToJSON(
  getAssessmentItemResponseDeclaration: GetAssessmentItemResponseDeclaration,
): string {
  return JSON.stringify(
    GetAssessmentItemResponseDeclaration$outboundSchema.parse(
      getAssessmentItemResponseDeclaration,
    ),
  );
}

export function getAssessmentItemResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemResponseDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemResponseDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemOutcomeDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemOutcomeDeclarationCardinality> = z
    .nativeEnum(GetAssessmentItemOutcomeDeclarationCardinality);

/** @internal */
export const GetAssessmentItemOutcomeDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemOutcomeDeclarationCardinality> =
    GetAssessmentItemOutcomeDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemOutcomeDeclarationCardinality$ {
  /** @deprecated use `GetAssessmentItemOutcomeDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemOutcomeDeclarationCardinality$inboundSchema;
  /** @deprecated use `GetAssessmentItemOutcomeDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemOutcomeDeclarationCardinality$outboundSchema;
}

/** @internal */
export const GetAssessmentItemOutcomeDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemOutcomeDeclarationBaseType> = z
    .nativeEnum(GetAssessmentItemOutcomeDeclarationBaseType);

/** @internal */
export const GetAssessmentItemOutcomeDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemOutcomeDeclarationBaseType> =
    GetAssessmentItemOutcomeDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemOutcomeDeclarationBaseType$ {
  /** @deprecated use `GetAssessmentItemOutcomeDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemOutcomeDeclarationBaseType$inboundSchema;
  /** @deprecated use `GetAssessmentItemOutcomeDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemOutcomeDeclarationBaseType$outboundSchema;
}

/** @internal */
export const GetAssessmentItemOutcomeDeclaration$inboundSchema: z.ZodType<
  GetAssessmentItemOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: GetAssessmentItemOutcomeDeclarationCardinality$inboundSchema,
  baseType: GetAssessmentItemOutcomeDeclarationBaseType$inboundSchema
    .optional(),
});

/** @internal */
export type GetAssessmentItemOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
};

/** @internal */
export const GetAssessmentItemOutcomeDeclaration$outboundSchema: z.ZodType<
  GetAssessmentItemOutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemOutcomeDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: GetAssessmentItemOutcomeDeclarationCardinality$outboundSchema,
  baseType: GetAssessmentItemOutcomeDeclarationBaseType$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemOutcomeDeclaration$ {
  /** @deprecated use `GetAssessmentItemOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemOutcomeDeclaration$inboundSchema;
  /** @deprecated use `GetAssessmentItemOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemOutcomeDeclaration$outboundSchema;
  /** @deprecated use `GetAssessmentItemOutcomeDeclaration$Outbound` instead. */
  export type Outbound = GetAssessmentItemOutcomeDeclaration$Outbound;
}

export function getAssessmentItemOutcomeDeclarationToJSON(
  getAssessmentItemOutcomeDeclaration: GetAssessmentItemOutcomeDeclaration,
): string {
  return JSON.stringify(
    GetAssessmentItemOutcomeDeclaration$outboundSchema.parse(
      getAssessmentItemOutcomeDeclaration,
    ),
  );
}

export function getAssessmentItemOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemOutcomeDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemOutcomeDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentItemTemplateType
> = z.nativeEnum(GetAssessmentItemTemplateType);

/** @internal */
export const GetAssessmentItemTemplateType$outboundSchema: z.ZodNativeEnum<
  typeof GetAssessmentItemTemplateType
> = GetAssessmentItemTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemTemplateType$ {
  /** @deprecated use `GetAssessmentItemTemplateType$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemTemplateType$inboundSchema;
  /** @deprecated use `GetAssessmentItemTemplateType$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemTemplateType$outboundSchema;
}

/** @internal */
export const GetAssessmentItemInlineFeedback$inboundSchema: z.ZodType<
  GetAssessmentItemInlineFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/** @internal */
export type GetAssessmentItemInlineFeedback$Outbound = {
  outcomeIdentifier: string;
  variableIdentifier: string;
};

/** @internal */
export const GetAssessmentItemInlineFeedback$outboundSchema: z.ZodType<
  GetAssessmentItemInlineFeedback$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemInlineFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemInlineFeedback$ {
  /** @deprecated use `GetAssessmentItemInlineFeedback$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemInlineFeedback$inboundSchema;
  /** @deprecated use `GetAssessmentItemInlineFeedback$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemInlineFeedback$outboundSchema;
  /** @deprecated use `GetAssessmentItemInlineFeedback$Outbound` instead. */
  export type Outbound = GetAssessmentItemInlineFeedback$Outbound;
}

export function getAssessmentItemInlineFeedbackToJSON(
  getAssessmentItemInlineFeedback: GetAssessmentItemInlineFeedback,
): string {
  return JSON.stringify(
    GetAssessmentItemInlineFeedback$outboundSchema.parse(
      getAssessmentItemInlineFeedback,
    ),
  );
}

export function getAssessmentItemInlineFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemInlineFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemInlineFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemInlineFeedback' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemResponseProcessing$inboundSchema: z.ZodType<
  GetAssessmentItemResponseProcessing,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateType: GetAssessmentItemTemplateType$inboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => GetAssessmentItemInlineFeedback$inboundSchema)
    .optional(),
});

/** @internal */
export type GetAssessmentItemResponseProcessing$Outbound = {
  templateType: string;
  responseDeclarationIdentifier: string;
  outcomeIdentifier: string;
  correctResponseIdentifier: string;
  incorrectResponseIdentifier: string;
  inlineFeedback?: GetAssessmentItemInlineFeedback$Outbound | undefined;
};

/** @internal */
export const GetAssessmentItemResponseProcessing$outboundSchema: z.ZodType<
  GetAssessmentItemResponseProcessing$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemResponseProcessing
> = z.object({
  templateType: GetAssessmentItemTemplateType$outboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => GetAssessmentItemInlineFeedback$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemResponseProcessing$ {
  /** @deprecated use `GetAssessmentItemResponseProcessing$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemResponseProcessing$inboundSchema;
  /** @deprecated use `GetAssessmentItemResponseProcessing$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemResponseProcessing$outboundSchema;
  /** @deprecated use `GetAssessmentItemResponseProcessing$Outbound` instead. */
  export type Outbound = GetAssessmentItemResponseProcessing$Outbound;
}

export function getAssessmentItemResponseProcessingToJSON(
  getAssessmentItemResponseProcessing: GetAssessmentItemResponseProcessing,
): string {
  return JSON.stringify(
    GetAssessmentItemResponseProcessing$outboundSchema.parse(
      getAssessmentItemResponseProcessing,
    ),
  );
}

export function getAssessmentItemResponseProcessingFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemResponseProcessing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemResponseProcessing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemResponseProcessing' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemAttributes$inboundSchema: z.ZodType<
  GetAssessmentItemAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  "time-dependent": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "time-dependent": "timeDependent",
  });
});

/** @internal */
export type GetAssessmentItemAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  adaptive: string;
  "time-dependent": string;
};

/** @internal */
export const GetAssessmentItemAttributes$outboundSchema: z.ZodType<
  GetAssessmentItemAttributes$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  timeDependent: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    timeDependent: "time-dependent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemAttributes$ {
  /** @deprecated use `GetAssessmentItemAttributes$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentItemAttributes$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentItemAttributes$Outbound` instead. */
  export type Outbound = GetAssessmentItemAttributes$Outbound;
}

export function getAssessmentItemAttributesToJSON(
  getAssessmentItemAttributes: GetAssessmentItemAttributes,
): string {
  return JSON.stringify(
    GetAssessmentItemAttributes$outboundSchema.parse(
      getAssessmentItemAttributes,
    ),
  );
}

export function getAssessmentItemAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiResponseDeclarationAttributes$inboundSchema:
  z.ZodType<
    GetAssessmentItemQtiResponseDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type GetAssessmentItemQtiResponseDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const GetAssessmentItemQtiResponseDeclarationAttributes$outboundSchema:
  z.ZodType<
    GetAssessmentItemQtiResponseDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    GetAssessmentItemQtiResponseDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiResponseDeclarationAttributes$ {
  /** @deprecated use `GetAssessmentItemQtiResponseDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemQtiResponseDeclarationAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiResponseDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiResponseDeclarationAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiResponseDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    GetAssessmentItemQtiResponseDeclarationAttributes$Outbound;
}

export function getAssessmentItemQtiResponseDeclarationAttributesToJSON(
  getAssessmentItemQtiResponseDeclarationAttributes:
    GetAssessmentItemQtiResponseDeclarationAttributes,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiResponseDeclarationAttributes$outboundSchema.parse(
      getAssessmentItemQtiResponseDeclarationAttributes,
    ),
  );
}

export function getAssessmentItemQtiResponseDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentItemQtiResponseDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiResponseDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentItemQtiResponseDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiCorrectResponse$inboundSchema: z.ZodType<
  GetAssessmentItemQtiCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type GetAssessmentItemQtiCorrectResponse$Outbound = {
  "qti-value": Array<string>;
};

/** @internal */
export const GetAssessmentItemQtiCorrectResponse$outboundSchema: z.ZodType<
  GetAssessmentItemQtiCorrectResponse$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemQtiCorrectResponse
> = z.object({
  qtiValue: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiCorrectResponse$ {
  /** @deprecated use `GetAssessmentItemQtiCorrectResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemQtiCorrectResponse$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiCorrectResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiCorrectResponse$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiCorrectResponse$Outbound` instead. */
  export type Outbound = GetAssessmentItemQtiCorrectResponse$Outbound;
}

export function getAssessmentItemQtiCorrectResponseToJSON(
  getAssessmentItemQtiCorrectResponse: GetAssessmentItemQtiCorrectResponse,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiCorrectResponse$outboundSchema.parse(
      getAssessmentItemQtiCorrectResponse,
    ),
  );
}

export function getAssessmentItemQtiCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemQtiCorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiCorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemQtiCorrectResponse' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiResponseDeclaration$inboundSchema: z.ZodType<
  GetAssessmentItemQtiResponseDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    GetAssessmentItemQtiResponseDeclarationAttributes$inboundSchema
  ),
  "qti-correct-response": z.lazy(() =>
    GetAssessmentItemQtiCorrectResponse$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-correct-response": "qtiCorrectResponse",
  });
});

/** @internal */
export type GetAssessmentItemQtiResponseDeclaration$Outbound = {
  _attributes: GetAssessmentItemQtiResponseDeclarationAttributes$Outbound;
  "qti-correct-response": GetAssessmentItemQtiCorrectResponse$Outbound;
};

/** @internal */
export const GetAssessmentItemQtiResponseDeclaration$outboundSchema: z.ZodType<
  GetAssessmentItemQtiResponseDeclaration$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemQtiResponseDeclaration
> = z.object({
  attributes: z.lazy(() =>
    GetAssessmentItemQtiResponseDeclarationAttributes$outboundSchema
  ),
  qtiCorrectResponse: z.lazy(() =>
    GetAssessmentItemQtiCorrectResponse$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiCorrectResponse: "qti-correct-response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiResponseDeclaration$ {
  /** @deprecated use `GetAssessmentItemQtiResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemQtiResponseDeclaration$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiResponseDeclaration$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiResponseDeclaration$Outbound` instead. */
  export type Outbound = GetAssessmentItemQtiResponseDeclaration$Outbound;
}

export function getAssessmentItemQtiResponseDeclarationToJSON(
  getAssessmentItemQtiResponseDeclaration:
    GetAssessmentItemQtiResponseDeclaration,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiResponseDeclaration$outboundSchema.parse(
      getAssessmentItemQtiResponseDeclaration,
    ),
  );
}

export function getAssessmentItemQtiResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentItemQtiResponseDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiResponseDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentItemQtiResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    GetAssessmentItemQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type GetAssessmentItemQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const GetAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    GetAssessmentItemQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    GetAssessmentItemQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `GetAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    GetAssessmentItemQtiOutcomeDeclarationAttributes$Outbound;
}

export function getAssessmentItemQtiOutcomeDeclarationAttributesToJSON(
  getAssessmentItemQtiOutcomeDeclarationAttributes:
    GetAssessmentItemQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      getAssessmentItemQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function getAssessmentItemQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentItemQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentItemQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiOutcomeDeclaration$inboundSchema: z.ZodType<
  GetAssessmentItemQtiOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    GetAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type GetAssessmentItemQtiOutcomeDeclaration$Outbound = {
  _attributes: GetAssessmentItemQtiOutcomeDeclarationAttributes$Outbound;
};

/** @internal */
export const GetAssessmentItemQtiOutcomeDeclaration$outboundSchema: z.ZodType<
  GetAssessmentItemQtiOutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemQtiOutcomeDeclaration
> = z.object({
  attributes: z.lazy(() =>
    GetAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiOutcomeDeclaration$ {
  /** @deprecated use `GetAssessmentItemQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = GetAssessmentItemQtiOutcomeDeclaration$Outbound;
}

export function getAssessmentItemQtiOutcomeDeclarationToJSON(
  getAssessmentItemQtiOutcomeDeclaration:
    GetAssessmentItemQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiOutcomeDeclaration$outboundSchema.parse(
      getAssessmentItemQtiOutcomeDeclaration,
    ),
  );
}

export function getAssessmentItemQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemQtiOutcomeDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiOutcomeDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema:
  z.ZodType<
    GetAssessmentItemQtiAssessmentStimulusRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/** @internal */
export type GetAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound = {
  identifier: string;
  href: string;
  title: string;
};

/** @internal */
export const GetAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema:
  z.ZodType<
    GetAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound,
    z.ZodTypeDef,
    GetAssessmentItemQtiAssessmentStimulusRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiAssessmentStimulusRefAttributes$ {
  /** @deprecated use `GetAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound` instead. */
  export type Outbound =
    GetAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound;
}

export function getAssessmentItemQtiAssessmentStimulusRefAttributesToJSON(
  getAssessmentItemQtiAssessmentStimulusRefAttributes:
    GetAssessmentItemQtiAssessmentStimulusRefAttributes,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema.parse(
      getAssessmentItemQtiAssessmentStimulusRefAttributes,
    ),
  );
}

export function getAssessmentItemQtiAssessmentStimulusRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentItemQtiAssessmentStimulusRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentItemQtiAssessmentStimulusRefAttributes' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiAssessmentStimulusRef$inboundSchema: z.ZodType<
  GetAssessmentItemQtiAssessmentStimulusRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    GetAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type GetAssessmentItemQtiAssessmentStimulusRef$Outbound = {
  _attributes: GetAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound;
};

/** @internal */
export const GetAssessmentItemQtiAssessmentStimulusRef$outboundSchema:
  z.ZodType<
    GetAssessmentItemQtiAssessmentStimulusRef$Outbound,
    z.ZodTypeDef,
    GetAssessmentItemQtiAssessmentStimulusRef
  > = z.object({
    attributes: z.lazy(() =>
      GetAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiAssessmentStimulusRef$ {
  /** @deprecated use `GetAssessmentItemQtiAssessmentStimulusRef$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemQtiAssessmentStimulusRef$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiAssessmentStimulusRef$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiAssessmentStimulusRef$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiAssessmentStimulusRef$Outbound` instead. */
  export type Outbound = GetAssessmentItemQtiAssessmentStimulusRef$Outbound;
}

export function getAssessmentItemQtiAssessmentStimulusRefToJSON(
  getAssessmentItemQtiAssessmentStimulusRef:
    GetAssessmentItemQtiAssessmentStimulusRef,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiAssessmentStimulusRef$outboundSchema.parse(
      getAssessmentItemQtiAssessmentStimulusRef,
    ),
  );
}

export function getAssessmentItemQtiAssessmentStimulusRefFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAssessmentItemQtiAssessmentStimulusRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiAssessmentStimulusRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAssessmentItemQtiAssessmentStimulusRef' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemQtiAssessmentItem$inboundSchema: z.ZodType<
  GetAssessmentItemQtiAssessmentItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => GetAssessmentItemAttributes$inboundSchema),
  "qti-response-declaration": z.array(
    z.lazy(() => GetAssessmentItemQtiResponseDeclaration$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => GetAssessmentItemQtiOutcomeDeclaration$inboundSchema),
  ),
  "qti-assessment-stimulus-ref": z.lazy(() =>
    GetAssessmentItemQtiAssessmentStimulusRef$inboundSchema
  ),
  "qti-item-body": z.any().optional(),
  "qti-response-processing": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-response-declaration": "qtiResponseDeclaration",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-assessment-stimulus-ref": "qtiAssessmentStimulusRef",
    "qti-item-body": "qtiItemBody",
    "qti-response-processing": "qtiResponseProcessing",
  });
});

/** @internal */
export type GetAssessmentItemQtiAssessmentItem$Outbound = {
  _attributes: GetAssessmentItemAttributes$Outbound;
  "qti-response-declaration": Array<
    GetAssessmentItemQtiResponseDeclaration$Outbound
  >;
  "qti-outcome-declaration": Array<
    GetAssessmentItemQtiOutcomeDeclaration$Outbound
  >;
  "qti-assessment-stimulus-ref":
    GetAssessmentItemQtiAssessmentStimulusRef$Outbound;
  "qti-item-body"?: any | undefined;
  "qti-response-processing"?: any | undefined;
};

/** @internal */
export const GetAssessmentItemQtiAssessmentItem$outboundSchema: z.ZodType<
  GetAssessmentItemQtiAssessmentItem$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemQtiAssessmentItem
> = z.object({
  attributes: z.lazy(() => GetAssessmentItemAttributes$outboundSchema),
  qtiResponseDeclaration: z.array(
    z.lazy(() => GetAssessmentItemQtiResponseDeclaration$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => GetAssessmentItemQtiOutcomeDeclaration$outboundSchema),
  ),
  qtiAssessmentStimulusRef: z.lazy(() =>
    GetAssessmentItemQtiAssessmentStimulusRef$outboundSchema
  ),
  qtiItemBody: z.any().optional(),
  qtiResponseProcessing: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiResponseDeclaration: "qti-response-declaration",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiAssessmentStimulusRef: "qti-assessment-stimulus-ref",
    qtiItemBody: "qti-item-body",
    qtiResponseProcessing: "qti-response-processing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemQtiAssessmentItem$ {
  /** @deprecated use `GetAssessmentItemQtiAssessmentItem$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemQtiAssessmentItem$inboundSchema;
  /** @deprecated use `GetAssessmentItemQtiAssessmentItem$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemQtiAssessmentItem$outboundSchema;
  /** @deprecated use `GetAssessmentItemQtiAssessmentItem$Outbound` instead. */
  export type Outbound = GetAssessmentItemQtiAssessmentItem$Outbound;
}

export function getAssessmentItemQtiAssessmentItemToJSON(
  getAssessmentItemQtiAssessmentItem: GetAssessmentItemQtiAssessmentItem,
): string {
  return JSON.stringify(
    GetAssessmentItemQtiAssessmentItem$outboundSchema.parse(
      getAssessmentItemQtiAssessmentItem,
    ),
  );
}

export function getAssessmentItemQtiAssessmentItemFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemQtiAssessmentItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAssessmentItemQtiAssessmentItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemQtiAssessmentItem' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemContent$inboundSchema: z.ZodType<
  GetAssessmentItemContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-item": z.lazy(() =>
    GetAssessmentItemQtiAssessmentItem$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-item": "qtiAssessmentItem",
  });
});

/** @internal */
export type GetAssessmentItemContent$Outbound = {
  "qti-assessment-item": GetAssessmentItemQtiAssessmentItem$Outbound;
};

/** @internal */
export const GetAssessmentItemContent$outboundSchema: z.ZodType<
  GetAssessmentItemContent$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemContent
> = z.object({
  qtiAssessmentItem: z.lazy(() =>
    GetAssessmentItemQtiAssessmentItem$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentItem: "qti-assessment-item",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemContent$ {
  /** @deprecated use `GetAssessmentItemContent$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemContent$inboundSchema;
  /** @deprecated use `GetAssessmentItemContent$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemContent$outboundSchema;
  /** @deprecated use `GetAssessmentItemContent$Outbound` instead. */
  export type Outbound = GetAssessmentItemContent$Outbound;
}

export function getAssessmentItemContentToJSON(
  getAssessmentItemContent: GetAssessmentItemContent,
): string {
  return JSON.stringify(
    GetAssessmentItemContent$outboundSchema.parse(getAssessmentItemContent),
  );
}

export function getAssessmentItemContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemContent' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemModalFeedbackShowHide$inboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemModalFeedbackShowHide> = z.nativeEnum(
    GetAssessmentItemModalFeedbackShowHide,
  );

/** @internal */
export const GetAssessmentItemModalFeedbackShowHide$outboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemModalFeedbackShowHide> =
    GetAssessmentItemModalFeedbackShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemModalFeedbackShowHide$ {
  /** @deprecated use `GetAssessmentItemModalFeedbackShowHide$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemModalFeedbackShowHide$inboundSchema;
  /** @deprecated use `GetAssessmentItemModalFeedbackShowHide$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemModalFeedbackShowHide$outboundSchema;
}

/** @internal */
export const GetAssessmentItemModalFeedback$inboundSchema: z.ZodType<
  GetAssessmentItemModalFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAssessmentItemModalFeedbackShowHide$inboundSchema,
  content: z.string(),
  title: z.string(),
});

/** @internal */
export type GetAssessmentItemModalFeedback$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  title: string;
};

/** @internal */
export const GetAssessmentItemModalFeedback$outboundSchema: z.ZodType<
  GetAssessmentItemModalFeedback$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemModalFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAssessmentItemModalFeedbackShowHide$outboundSchema,
  content: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemModalFeedback$ {
  /** @deprecated use `GetAssessmentItemModalFeedback$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemModalFeedback$inboundSchema;
  /** @deprecated use `GetAssessmentItemModalFeedback$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemModalFeedback$outboundSchema;
  /** @deprecated use `GetAssessmentItemModalFeedback$Outbound` instead. */
  export type Outbound = GetAssessmentItemModalFeedback$Outbound;
}

export function getAssessmentItemModalFeedbackToJSON(
  getAssessmentItemModalFeedback: GetAssessmentItemModalFeedback,
): string {
  return JSON.stringify(
    GetAssessmentItemModalFeedback$outboundSchema.parse(
      getAssessmentItemModalFeedback,
    ),
  );
}

export function getAssessmentItemModalFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemModalFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemModalFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemModalFeedback' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemFeedbackInlineShowHide$inboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemFeedbackInlineShowHide> = z
    .nativeEnum(GetAssessmentItemFeedbackInlineShowHide);

/** @internal */
export const GetAssessmentItemFeedbackInlineShowHide$outboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemFeedbackInlineShowHide> =
    GetAssessmentItemFeedbackInlineShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemFeedbackInlineShowHide$ {
  /** @deprecated use `GetAssessmentItemFeedbackInlineShowHide$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemFeedbackInlineShowHide$inboundSchema;
  /** @deprecated use `GetAssessmentItemFeedbackInlineShowHide$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemFeedbackInlineShowHide$outboundSchema;
}

/** @internal */
export const GetAssessmentItemFeedbackInline$inboundSchema: z.ZodType<
  GetAssessmentItemFeedbackInline,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAssessmentItemFeedbackInlineShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type GetAssessmentItemFeedbackInline$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const GetAssessmentItemFeedbackInline$outboundSchema: z.ZodType<
  GetAssessmentItemFeedbackInline$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemFeedbackInline
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAssessmentItemFeedbackInlineShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemFeedbackInline$ {
  /** @deprecated use `GetAssessmentItemFeedbackInline$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemFeedbackInline$inboundSchema;
  /** @deprecated use `GetAssessmentItemFeedbackInline$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemFeedbackInline$outboundSchema;
  /** @deprecated use `GetAssessmentItemFeedbackInline$Outbound` instead. */
  export type Outbound = GetAssessmentItemFeedbackInline$Outbound;
}

export function getAssessmentItemFeedbackInlineToJSON(
  getAssessmentItemFeedbackInline: GetAssessmentItemFeedbackInline,
): string {
  return JSON.stringify(
    GetAssessmentItemFeedbackInline$outboundSchema.parse(
      getAssessmentItemFeedbackInline,
    ),
  );
}

export function getAssessmentItemFeedbackInlineFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemFeedbackInline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemFeedbackInline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemFeedbackInline' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemFeedbackBlockShowHide$inboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemFeedbackBlockShowHide> = z.nativeEnum(
    GetAssessmentItemFeedbackBlockShowHide,
  );

/** @internal */
export const GetAssessmentItemFeedbackBlockShowHide$outboundSchema:
  z.ZodNativeEnum<typeof GetAssessmentItemFeedbackBlockShowHide> =
    GetAssessmentItemFeedbackBlockShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemFeedbackBlockShowHide$ {
  /** @deprecated use `GetAssessmentItemFeedbackBlockShowHide$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentItemFeedbackBlockShowHide$inboundSchema;
  /** @deprecated use `GetAssessmentItemFeedbackBlockShowHide$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentItemFeedbackBlockShowHide$outboundSchema;
}

/** @internal */
export const GetAssessmentItemFeedbackBlock$inboundSchema: z.ZodType<
  GetAssessmentItemFeedbackBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAssessmentItemFeedbackBlockShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type GetAssessmentItemFeedbackBlock$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const GetAssessmentItemFeedbackBlock$outboundSchema: z.ZodType<
  GetAssessmentItemFeedbackBlock$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemFeedbackBlock
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAssessmentItemFeedbackBlockShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemFeedbackBlock$ {
  /** @deprecated use `GetAssessmentItemFeedbackBlock$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemFeedbackBlock$inboundSchema;
  /** @deprecated use `GetAssessmentItemFeedbackBlock$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemFeedbackBlock$outboundSchema;
  /** @deprecated use `GetAssessmentItemFeedbackBlock$Outbound` instead. */
  export type Outbound = GetAssessmentItemFeedbackBlock$Outbound;
}

export function getAssessmentItemFeedbackBlockToJSON(
  getAssessmentItemFeedbackBlock: GetAssessmentItemFeedbackBlock,
): string {
  return JSON.stringify(
    GetAssessmentItemFeedbackBlock$outboundSchema.parse(
      getAssessmentItemFeedbackBlock,
    ),
  );
}

export function getAssessmentItemFeedbackBlockFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemFeedbackBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemFeedbackBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemFeedbackBlock' from JSON`,
  );
}

/** @internal */
export const GetAssessmentItemResponse$inboundSchema: z.ZodType<
  GetAssessmentItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: GetAssessmentItemType$inboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => GetAssessmentItemResponseDeclaration$inboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => GetAssessmentItemOutcomeDeclaration$inboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    GetAssessmentItemResponseProcessing$inboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetAssessmentItemContent$inboundSchema),
  modalFeedback: z.array(
    z.lazy(() => GetAssessmentItemModalFeedback$inboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => GetAssessmentItemFeedbackInline$inboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => GetAssessmentItemFeedbackBlock$inboundSchema),
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type GetAssessmentItemResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  type: string;
  qtiVersion: string;
  timeDependent: boolean;
  adaptive: boolean;
  responseDeclarations?:
    | Array<GetAssessmentItemResponseDeclaration$Outbound>
    | undefined;
  outcomeDeclarations?:
    | Array<GetAssessmentItemOutcomeDeclaration$Outbound>
    | undefined;
  responseProcessing: GetAssessmentItemResponseProcessing$Outbound;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: GetAssessmentItemContent$Outbound;
  modalFeedback?: Array<GetAssessmentItemModalFeedback$Outbound> | undefined;
  feedbackInline?: Array<GetAssessmentItemFeedbackInline$Outbound> | undefined;
  feedbackBlock?: Array<GetAssessmentItemFeedbackBlock$Outbound> | undefined;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const GetAssessmentItemResponse$outboundSchema: z.ZodType<
  GetAssessmentItemResponse$Outbound,
  z.ZodTypeDef,
  GetAssessmentItemResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: GetAssessmentItemType$outboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => GetAssessmentItemResponseDeclaration$outboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => GetAssessmentItemOutcomeDeclaration$outboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    GetAssessmentItemResponseProcessing$outboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetAssessmentItemContent$outboundSchema),
  modalFeedback: z.array(
    z.lazy(() => GetAssessmentItemModalFeedback$outboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => GetAssessmentItemFeedbackInline$outboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => GetAssessmentItemFeedbackBlock$outboundSchema),
  ).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentItemResponse$ {
  /** @deprecated use `GetAssessmentItemResponse$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentItemResponse$inboundSchema;
  /** @deprecated use `GetAssessmentItemResponse$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentItemResponse$outboundSchema;
  /** @deprecated use `GetAssessmentItemResponse$Outbound` instead. */
  export type Outbound = GetAssessmentItemResponse$Outbound;
}

export function getAssessmentItemResponseToJSON(
  getAssessmentItemResponse: GetAssessmentItemResponse,
): string {
  return JSON.stringify(
    GetAssessmentItemResponse$outboundSchema.parse(getAssessmentItemResponse),
  );
}

export function getAssessmentItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentItemResponse' from JSON`,
  );
}
