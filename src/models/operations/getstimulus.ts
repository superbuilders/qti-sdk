/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStimulusRequest = {
  /**
   * Stimulus identifier
   */
  identifier: string;
};

export type GetStimulusCatalogInfo = {
  /**
   * Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
   */
  id: string;
  /**
   * This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
   */
  support: string;
  /**
   * A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
   */
  content: string;
};

/**
 * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
 */
export type GetStimulusStylesheet = {
  /**
   * The identifier or location of the external stylesheet.
   */
  href: string;
  /**
   * The type of the external stylesheet.
   */
  type: string;
};

export type GetStimulusAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  xmlLang: string;
  title: string;
};

export type GetStimulusQtiStylesheetAttributes = {
  href: string;
  type: string;
};

export type GetStimulusQtiStylesheet = {
  attributes: GetStimulusQtiStylesheetAttributes;
};

export type GetStimulusQtiCatalogAttributes = {
  id: string;
};

export type GetStimulusQtiCardAttributes = {
  support: string;
};

export type GetStimulusQtiCard = {
  attributes: GetStimulusQtiCardAttributes;
  qtiHtmlContent: { [k: string]: any };
};

export type GetStimulusQtiCatalog = {
  attributes: GetStimulusQtiCatalogAttributes;
  qtiCard: GetStimulusQtiCard;
};

export type GetStimulusQtiCatalogInfo = {
  qtiCatalog: GetStimulusQtiCatalog;
};

export type GetStimulusQtiAssessmentStimulus = {
  attributes: GetStimulusAttributes;
  qtiStimulusBody: { [k: string]: any };
  qtiStylesheet?: GetStimulusQtiStylesheet | undefined;
  qtiCatalogInfo?: GetStimulusQtiCatalogInfo | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type GetStimulusContent = {
  qtiAssessmentStimulus: GetStimulusQtiAssessmentStimulus;
};

/**
 * Complete stimulus data structure returned from the database including parsed content and metadata
 */
export type GetStimulusResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Array of catalog cards.
   */
  catalogInfo: Array<GetStimulusCatalogInfo>;
  /**
   * A human readable label that can be used to describe the Stimulus.
   */
  label?: string | undefined;
  /**
   * The default language for the Stimulus.
   */
  language?: string | undefined;
  /**
   * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
   */
  stylesheet?: GetStimulusStylesheet | undefined;
  /**
   * The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
   */
  toolName?: string | undefined;
  /**
   * The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
   */
  toolVersion?: string | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: GetStimulusContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/** @internal */
export const GetStimulusRequest$inboundSchema: z.ZodType<
  GetStimulusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
});

/** @internal */
export type GetStimulusRequest$Outbound = {
  identifier: string;
};

/** @internal */
export const GetStimulusRequest$outboundSchema: z.ZodType<
  GetStimulusRequest$Outbound,
  z.ZodTypeDef,
  GetStimulusRequest
> = z.object({
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusRequest$ {
  /** @deprecated use `GetStimulusRequest$inboundSchema` instead. */
  export const inboundSchema = GetStimulusRequest$inboundSchema;
  /** @deprecated use `GetStimulusRequest$outboundSchema` instead. */
  export const outboundSchema = GetStimulusRequest$outboundSchema;
  /** @deprecated use `GetStimulusRequest$Outbound` instead. */
  export type Outbound = GetStimulusRequest$Outbound;
}

export function getStimulusRequestToJSON(
  getStimulusRequest: GetStimulusRequest,
): string {
  return JSON.stringify(
    GetStimulusRequest$outboundSchema.parse(getStimulusRequest),
  );
}

export function getStimulusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusRequest' from JSON`,
  );
}

/** @internal */
export const GetStimulusCatalogInfo$inboundSchema: z.ZodType<
  GetStimulusCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/** @internal */
export type GetStimulusCatalogInfo$Outbound = {
  id: string;
  support: string;
  content: string;
};

/** @internal */
export const GetStimulusCatalogInfo$outboundSchema: z.ZodType<
  GetStimulusCatalogInfo$Outbound,
  z.ZodTypeDef,
  GetStimulusCatalogInfo
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusCatalogInfo$ {
  /** @deprecated use `GetStimulusCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = GetStimulusCatalogInfo$inboundSchema;
  /** @deprecated use `GetStimulusCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = GetStimulusCatalogInfo$outboundSchema;
  /** @deprecated use `GetStimulusCatalogInfo$Outbound` instead. */
  export type Outbound = GetStimulusCatalogInfo$Outbound;
}

export function getStimulusCatalogInfoToJSON(
  getStimulusCatalogInfo: GetStimulusCatalogInfo,
): string {
  return JSON.stringify(
    GetStimulusCatalogInfo$outboundSchema.parse(getStimulusCatalogInfo),
  );
}

export function getStimulusCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusCatalogInfo' from JSON`,
  );
}

/** @internal */
export const GetStimulusStylesheet$inboundSchema: z.ZodType<
  GetStimulusStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetStimulusStylesheet$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetStimulusStylesheet$outboundSchema: z.ZodType<
  GetStimulusStylesheet$Outbound,
  z.ZodTypeDef,
  GetStimulusStylesheet
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusStylesheet$ {
  /** @deprecated use `GetStimulusStylesheet$inboundSchema` instead. */
  export const inboundSchema = GetStimulusStylesheet$inboundSchema;
  /** @deprecated use `GetStimulusStylesheet$outboundSchema` instead. */
  export const outboundSchema = GetStimulusStylesheet$outboundSchema;
  /** @deprecated use `GetStimulusStylesheet$Outbound` instead. */
  export type Outbound = GetStimulusStylesheet$Outbound;
}

export function getStimulusStylesheetToJSON(
  getStimulusStylesheet: GetStimulusStylesheet,
): string {
  return JSON.stringify(
    GetStimulusStylesheet$outboundSchema.parse(getStimulusStylesheet),
  );
}

export function getStimulusStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusStylesheet' from JSON`,
  );
}

/** @internal */
export const GetStimulusAttributes$inboundSchema: z.ZodType<
  GetStimulusAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  "xml:lang": z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "xml:lang": "xmlLang",
  });
});

/** @internal */
export type GetStimulusAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  "xml:lang": string;
  title: string;
};

/** @internal */
export const GetStimulusAttributes$outboundSchema: z.ZodType<
  GetStimulusAttributes$Outbound,
  z.ZodTypeDef,
  GetStimulusAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  xmlLang: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    xmlLang: "xml:lang",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusAttributes$ {
  /** @deprecated use `GetStimulusAttributes$inboundSchema` instead. */
  export const inboundSchema = GetStimulusAttributes$inboundSchema;
  /** @deprecated use `GetStimulusAttributes$outboundSchema` instead. */
  export const outboundSchema = GetStimulusAttributes$outboundSchema;
  /** @deprecated use `GetStimulusAttributes$Outbound` instead. */
  export type Outbound = GetStimulusAttributes$Outbound;
}

export function getStimulusAttributesToJSON(
  getStimulusAttributes: GetStimulusAttributes,
): string {
  return JSON.stringify(
    GetStimulusAttributes$outboundSchema.parse(getStimulusAttributes),
  );
}

export function getStimulusAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusAttributes' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiStylesheetAttributes$inboundSchema: z.ZodType<
  GetStimulusQtiStylesheetAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetStimulusQtiStylesheetAttributes$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetStimulusQtiStylesheetAttributes$outboundSchema: z.ZodType<
  GetStimulusQtiStylesheetAttributes$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiStylesheetAttributes
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiStylesheetAttributes$ {
  /** @deprecated use `GetStimulusQtiStylesheetAttributes$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiStylesheetAttributes$inboundSchema;
  /** @deprecated use `GetStimulusQtiStylesheetAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetStimulusQtiStylesheetAttributes$outboundSchema;
  /** @deprecated use `GetStimulusQtiStylesheetAttributes$Outbound` instead. */
  export type Outbound = GetStimulusQtiStylesheetAttributes$Outbound;
}

export function getStimulusQtiStylesheetAttributesToJSON(
  getStimulusQtiStylesheetAttributes: GetStimulusQtiStylesheetAttributes,
): string {
  return JSON.stringify(
    GetStimulusQtiStylesheetAttributes$outboundSchema.parse(
      getStimulusQtiStylesheetAttributes,
    ),
  );
}

export function getStimulusQtiStylesheetAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiStylesheetAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetStimulusQtiStylesheetAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiStylesheetAttributes' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiStylesheet$inboundSchema: z.ZodType<
  GetStimulusQtiStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => GetStimulusQtiStylesheetAttributes$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type GetStimulusQtiStylesheet$Outbound = {
  _attributes: GetStimulusQtiStylesheetAttributes$Outbound;
};

/** @internal */
export const GetStimulusQtiStylesheet$outboundSchema: z.ZodType<
  GetStimulusQtiStylesheet$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiStylesheet
> = z.object({
  attributes: z.lazy(() => GetStimulusQtiStylesheetAttributes$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiStylesheet$ {
  /** @deprecated use `GetStimulusQtiStylesheet$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiStylesheet$inboundSchema;
  /** @deprecated use `GetStimulusQtiStylesheet$outboundSchema` instead. */
  export const outboundSchema = GetStimulusQtiStylesheet$outboundSchema;
  /** @deprecated use `GetStimulusQtiStylesheet$Outbound` instead. */
  export type Outbound = GetStimulusQtiStylesheet$Outbound;
}

export function getStimulusQtiStylesheetToJSON(
  getStimulusQtiStylesheet: GetStimulusQtiStylesheet,
): string {
  return JSON.stringify(
    GetStimulusQtiStylesheet$outboundSchema.parse(getStimulusQtiStylesheet),
  );
}

export function getStimulusQtiStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusQtiStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiStylesheet' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiCatalogAttributes$inboundSchema: z.ZodType<
  GetStimulusQtiCatalogAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetStimulusQtiCatalogAttributes$Outbound = {
  id: string;
};

/** @internal */
export const GetStimulusQtiCatalogAttributes$outboundSchema: z.ZodType<
  GetStimulusQtiCatalogAttributes$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiCatalogAttributes
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiCatalogAttributes$ {
  /** @deprecated use `GetStimulusQtiCatalogAttributes$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiCatalogAttributes$inboundSchema;
  /** @deprecated use `GetStimulusQtiCatalogAttributes$outboundSchema` instead. */
  export const outboundSchema = GetStimulusQtiCatalogAttributes$outboundSchema;
  /** @deprecated use `GetStimulusQtiCatalogAttributes$Outbound` instead. */
  export type Outbound = GetStimulusQtiCatalogAttributes$Outbound;
}

export function getStimulusQtiCatalogAttributesToJSON(
  getStimulusQtiCatalogAttributes: GetStimulusQtiCatalogAttributes,
): string {
  return JSON.stringify(
    GetStimulusQtiCatalogAttributes$outboundSchema.parse(
      getStimulusQtiCatalogAttributes,
    ),
  );
}

export function getStimulusQtiCatalogAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiCatalogAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusQtiCatalogAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiCatalogAttributes' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiCardAttributes$inboundSchema: z.ZodType<
  GetStimulusQtiCardAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  support: z.string(),
});

/** @internal */
export type GetStimulusQtiCardAttributes$Outbound = {
  support: string;
};

/** @internal */
export const GetStimulusQtiCardAttributes$outboundSchema: z.ZodType<
  GetStimulusQtiCardAttributes$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiCardAttributes
> = z.object({
  support: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiCardAttributes$ {
  /** @deprecated use `GetStimulusQtiCardAttributes$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiCardAttributes$inboundSchema;
  /** @deprecated use `GetStimulusQtiCardAttributes$outboundSchema` instead. */
  export const outboundSchema = GetStimulusQtiCardAttributes$outboundSchema;
  /** @deprecated use `GetStimulusQtiCardAttributes$Outbound` instead. */
  export type Outbound = GetStimulusQtiCardAttributes$Outbound;
}

export function getStimulusQtiCardAttributesToJSON(
  getStimulusQtiCardAttributes: GetStimulusQtiCardAttributes,
): string {
  return JSON.stringify(
    GetStimulusQtiCardAttributes$outboundSchema.parse(
      getStimulusQtiCardAttributes,
    ),
  );
}

export function getStimulusQtiCardAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiCardAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusQtiCardAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiCardAttributes' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiCard$inboundSchema: z.ZodType<
  GetStimulusQtiCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => GetStimulusQtiCardAttributes$inboundSchema),
  "qti-html-content": z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-html-content": "qtiHtmlContent",
  });
});

/** @internal */
export type GetStimulusQtiCard$Outbound = {
  _attributes: GetStimulusQtiCardAttributes$Outbound;
  "qti-html-content": { [k: string]: any };
};

/** @internal */
export const GetStimulusQtiCard$outboundSchema: z.ZodType<
  GetStimulusQtiCard$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiCard
> = z.object({
  attributes: z.lazy(() => GetStimulusQtiCardAttributes$outboundSchema),
  qtiHtmlContent: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiHtmlContent: "qti-html-content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiCard$ {
  /** @deprecated use `GetStimulusQtiCard$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiCard$inboundSchema;
  /** @deprecated use `GetStimulusQtiCard$outboundSchema` instead. */
  export const outboundSchema = GetStimulusQtiCard$outboundSchema;
  /** @deprecated use `GetStimulusQtiCard$Outbound` instead. */
  export type Outbound = GetStimulusQtiCard$Outbound;
}

export function getStimulusQtiCardToJSON(
  getStimulusQtiCard: GetStimulusQtiCard,
): string {
  return JSON.stringify(
    GetStimulusQtiCard$outboundSchema.parse(getStimulusQtiCard),
  );
}

export function getStimulusQtiCardFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusQtiCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiCard' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiCatalog$inboundSchema: z.ZodType<
  GetStimulusQtiCatalog,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => GetStimulusQtiCatalogAttributes$inboundSchema),
  "qti-card": z.lazy(() => GetStimulusQtiCard$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-card": "qtiCard",
  });
});

/** @internal */
export type GetStimulusQtiCatalog$Outbound = {
  _attributes: GetStimulusQtiCatalogAttributes$Outbound;
  "qti-card": GetStimulusQtiCard$Outbound;
};

/** @internal */
export const GetStimulusQtiCatalog$outboundSchema: z.ZodType<
  GetStimulusQtiCatalog$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiCatalog
> = z.object({
  attributes: z.lazy(() => GetStimulusQtiCatalogAttributes$outboundSchema),
  qtiCard: z.lazy(() => GetStimulusQtiCard$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiCard: "qti-card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiCatalog$ {
  /** @deprecated use `GetStimulusQtiCatalog$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiCatalog$inboundSchema;
  /** @deprecated use `GetStimulusQtiCatalog$outboundSchema` instead. */
  export const outboundSchema = GetStimulusQtiCatalog$outboundSchema;
  /** @deprecated use `GetStimulusQtiCatalog$Outbound` instead. */
  export type Outbound = GetStimulusQtiCatalog$Outbound;
}

export function getStimulusQtiCatalogToJSON(
  getStimulusQtiCatalog: GetStimulusQtiCatalog,
): string {
  return JSON.stringify(
    GetStimulusQtiCatalog$outboundSchema.parse(getStimulusQtiCatalog),
  );
}

export function getStimulusQtiCatalogFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiCatalog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusQtiCatalog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiCatalog' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiCatalogInfo$inboundSchema: z.ZodType<
  GetStimulusQtiCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-catalog": z.lazy(() => GetStimulusQtiCatalog$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-catalog": "qtiCatalog",
  });
});

/** @internal */
export type GetStimulusQtiCatalogInfo$Outbound = {
  "qti-catalog": GetStimulusQtiCatalog$Outbound;
};

/** @internal */
export const GetStimulusQtiCatalogInfo$outboundSchema: z.ZodType<
  GetStimulusQtiCatalogInfo$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiCatalogInfo
> = z.object({
  qtiCatalog: z.lazy(() => GetStimulusQtiCatalog$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiCatalog: "qti-catalog",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiCatalogInfo$ {
  /** @deprecated use `GetStimulusQtiCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiCatalogInfo$inboundSchema;
  /** @deprecated use `GetStimulusQtiCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = GetStimulusQtiCatalogInfo$outboundSchema;
  /** @deprecated use `GetStimulusQtiCatalogInfo$Outbound` instead. */
  export type Outbound = GetStimulusQtiCatalogInfo$Outbound;
}

export function getStimulusQtiCatalogInfoToJSON(
  getStimulusQtiCatalogInfo: GetStimulusQtiCatalogInfo,
): string {
  return JSON.stringify(
    GetStimulusQtiCatalogInfo$outboundSchema.parse(getStimulusQtiCatalogInfo),
  );
}

export function getStimulusQtiCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusQtiCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiCatalogInfo' from JSON`,
  );
}

/** @internal */
export const GetStimulusQtiAssessmentStimulus$inboundSchema: z.ZodType<
  GetStimulusQtiAssessmentStimulus,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => GetStimulusAttributes$inboundSchema),
  "qti-stimulus-body": z.record(z.any()),
  "qti-stylesheet": z.lazy(() => GetStimulusQtiStylesheet$inboundSchema)
    .optional(),
  "qti-catalog-info": z.lazy(() => GetStimulusQtiCatalogInfo$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-stimulus-body": "qtiStimulusBody",
    "qti-stylesheet": "qtiStylesheet",
    "qti-catalog-info": "qtiCatalogInfo",
  });
});

/** @internal */
export type GetStimulusQtiAssessmentStimulus$Outbound = {
  _attributes: GetStimulusAttributes$Outbound;
  "qti-stimulus-body": { [k: string]: any };
  "qti-stylesheet"?: GetStimulusQtiStylesheet$Outbound | undefined;
  "qti-catalog-info"?: GetStimulusQtiCatalogInfo$Outbound | undefined;
};

/** @internal */
export const GetStimulusQtiAssessmentStimulus$outboundSchema: z.ZodType<
  GetStimulusQtiAssessmentStimulus$Outbound,
  z.ZodTypeDef,
  GetStimulusQtiAssessmentStimulus
> = z.object({
  attributes: z.lazy(() => GetStimulusAttributes$outboundSchema),
  qtiStimulusBody: z.record(z.any()),
  qtiStylesheet: z.lazy(() => GetStimulusQtiStylesheet$outboundSchema)
    .optional(),
  qtiCatalogInfo: z.lazy(() => GetStimulusQtiCatalogInfo$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiStimulusBody: "qti-stimulus-body",
    qtiStylesheet: "qti-stylesheet",
    qtiCatalogInfo: "qti-catalog-info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusQtiAssessmentStimulus$ {
  /** @deprecated use `GetStimulusQtiAssessmentStimulus$inboundSchema` instead. */
  export const inboundSchema = GetStimulusQtiAssessmentStimulus$inboundSchema;
  /** @deprecated use `GetStimulusQtiAssessmentStimulus$outboundSchema` instead. */
  export const outboundSchema = GetStimulusQtiAssessmentStimulus$outboundSchema;
  /** @deprecated use `GetStimulusQtiAssessmentStimulus$Outbound` instead. */
  export type Outbound = GetStimulusQtiAssessmentStimulus$Outbound;
}

export function getStimulusQtiAssessmentStimulusToJSON(
  getStimulusQtiAssessmentStimulus: GetStimulusQtiAssessmentStimulus,
): string {
  return JSON.stringify(
    GetStimulusQtiAssessmentStimulus$outboundSchema.parse(
      getStimulusQtiAssessmentStimulus,
    ),
  );
}

export function getStimulusQtiAssessmentStimulusFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusQtiAssessmentStimulus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusQtiAssessmentStimulus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusQtiAssessmentStimulus' from JSON`,
  );
}

/** @internal */
export const GetStimulusContent$inboundSchema: z.ZodType<
  GetStimulusContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-stimulus": z.lazy(() =>
    GetStimulusQtiAssessmentStimulus$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-stimulus": "qtiAssessmentStimulus",
  });
});

/** @internal */
export type GetStimulusContent$Outbound = {
  "qti-assessment-stimulus": GetStimulusQtiAssessmentStimulus$Outbound;
};

/** @internal */
export const GetStimulusContent$outboundSchema: z.ZodType<
  GetStimulusContent$Outbound,
  z.ZodTypeDef,
  GetStimulusContent
> = z.object({
  qtiAssessmentStimulus: z.lazy(() =>
    GetStimulusQtiAssessmentStimulus$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentStimulus: "qti-assessment-stimulus",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusContent$ {
  /** @deprecated use `GetStimulusContent$inboundSchema` instead. */
  export const inboundSchema = GetStimulusContent$inboundSchema;
  /** @deprecated use `GetStimulusContent$outboundSchema` instead. */
  export const outboundSchema = GetStimulusContent$outboundSchema;
  /** @deprecated use `GetStimulusContent$Outbound` instead. */
  export type Outbound = GetStimulusContent$Outbound;
}

export function getStimulusContentToJSON(
  getStimulusContent: GetStimulusContent,
): string {
  return JSON.stringify(
    GetStimulusContent$outboundSchema.parse(getStimulusContent),
  );
}

export function getStimulusContentFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusContent' from JSON`,
  );
}

/** @internal */
export const GetStimulusResponse$inboundSchema: z.ZodType<
  GetStimulusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => GetStimulusCatalogInfo$inboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => GetStimulusStylesheet$inboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetStimulusContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type GetStimulusResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  catalogInfo: Array<GetStimulusCatalogInfo$Outbound>;
  label?: string | undefined;
  language: string;
  stylesheet?: GetStimulusStylesheet$Outbound | undefined;
  toolName?: string | undefined;
  toolVersion?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: GetStimulusContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const GetStimulusResponse$outboundSchema: z.ZodType<
  GetStimulusResponse$Outbound,
  z.ZodTypeDef,
  GetStimulusResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => GetStimulusCatalogInfo$outboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => GetStimulusStylesheet$outboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetStimulusContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStimulusResponse$ {
  /** @deprecated use `GetStimulusResponse$inboundSchema` instead. */
  export const inboundSchema = GetStimulusResponse$inboundSchema;
  /** @deprecated use `GetStimulusResponse$outboundSchema` instead. */
  export const outboundSchema = GetStimulusResponse$outboundSchema;
  /** @deprecated use `GetStimulusResponse$Outbound` instead. */
  export type Outbound = GetStimulusResponse$Outbound;
}

export function getStimulusResponseToJSON(
  getStimulusResponse: GetStimulusResponse,
): string {
  return JSON.stringify(
    GetStimulusResponse$outboundSchema.parse(getStimulusResponse),
  );
}

export function getStimulusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStimulusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStimulusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStimulusResponse' from JSON`,
  );
}
