/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSectionRequest = {
  /**
   * Root assessment test identifier
   */
  assessmentTestIdentifier: string;
  /**
   * Parent test part identifier
   */
  testPartIdentifier: string;
  /**
   * Section identifier
   */
  identifier: string;
};

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type GetSectionQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type GetSectionResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?: Array<GetSectionQtiAssessmentItemRef> | undefined;
};

/** @internal */
export const GetSectionRequest$inboundSchema: z.ZodType<
  GetSectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetSectionRequest$Outbound = {
  assessmentTestIdentifier: string;
  testPartIdentifier: string;
  identifier: string;
};

/** @internal */
export const GetSectionRequest$outboundSchema: z.ZodType<
  GetSectionRequest$Outbound,
  z.ZodTypeDef,
  GetSectionRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSectionRequest$ {
  /** @deprecated use `GetSectionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSectionRequest$inboundSchema;
  /** @deprecated use `GetSectionRequest$outboundSchema` instead. */
  export const outboundSchema = GetSectionRequest$outboundSchema;
  /** @deprecated use `GetSectionRequest$Outbound` instead. */
  export type Outbound = GetSectionRequest$Outbound;
}

export function getSectionRequestToJSON(
  getSectionRequest: GetSectionRequest,
): string {
  return JSON.stringify(
    GetSectionRequest$outboundSchema.parse(getSectionRequest),
  );
}

export function getSectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSectionRequest' from JSON`,
  );
}

/** @internal */
export const GetSectionQtiAssessmentItemRef$inboundSchema: z.ZodType<
  GetSectionQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type GetSectionQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const GetSectionQtiAssessmentItemRef$outboundSchema: z.ZodType<
  GetSectionQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  GetSectionQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSectionQtiAssessmentItemRef$ {
  /** @deprecated use `GetSectionQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema = GetSectionQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `GetSectionQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema = GetSectionQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `GetSectionQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = GetSectionQtiAssessmentItemRef$Outbound;
}

export function getSectionQtiAssessmentItemRefToJSON(
  getSectionQtiAssessmentItemRef: GetSectionQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    GetSectionQtiAssessmentItemRef$outboundSchema.parse(
      getSectionQtiAssessmentItemRef,
    ),
  );
}

export function getSectionQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<GetSectionQtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSectionQtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSectionQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const GetSectionResponse$inboundSchema: z.ZodType<
  GetSectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => GetSectionQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type GetSectionResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<GetSectionQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const GetSectionResponse$outboundSchema: z.ZodType<
  GetSectionResponse$Outbound,
  z.ZodTypeDef,
  GetSectionResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => GetSectionQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSectionResponse$ {
  /** @deprecated use `GetSectionResponse$inboundSchema` instead. */
  export const inboundSchema = GetSectionResponse$inboundSchema;
  /** @deprecated use `GetSectionResponse$outboundSchema` instead. */
  export const outboundSchema = GetSectionResponse$outboundSchema;
  /** @deprecated use `GetSectionResponse$Outbound` instead. */
  export type Outbound = GetSectionResponse$Outbound;
}

export function getSectionResponseToJSON(
  getSectionResponse: GetSectionResponse,
): string {
  return JSON.stringify(
    GetSectionResponse$outboundSchema.parse(getSectionResponse),
  );
}

export function getSectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSectionResponse' from JSON`,
  );
}
