/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSectionRequest = {
  /**
   * Root assessment test identifier
   */
  assessmentTestIdentifier: string;
  /**
   * Parent test part identifier
   */
  testPartIdentifier: string;
  /**
   * Section identifier
   */
  identifier: string;
};

/**
 * Section deleted successfully
 */
export type DeleteSectionResponse = {
  /**
   * Section deleted successfully
   */
  message: string;
};

/** @internal */
export const DeleteSectionRequest$inboundSchema: z.ZodType<
  DeleteSectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
});

/** @internal */
export type DeleteSectionRequest$Outbound = {
  assessmentTestIdentifier: string;
  testPartIdentifier: string;
  identifier: string;
};

/** @internal */
export const DeleteSectionRequest$outboundSchema: z.ZodType<
  DeleteSectionRequest$Outbound,
  z.ZodTypeDef,
  DeleteSectionRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSectionRequest$ {
  /** @deprecated use `DeleteSectionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSectionRequest$inboundSchema;
  /** @deprecated use `DeleteSectionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSectionRequest$outboundSchema;
  /** @deprecated use `DeleteSectionRequest$Outbound` instead. */
  export type Outbound = DeleteSectionRequest$Outbound;
}

export function deleteSectionRequestToJSON(
  deleteSectionRequest: DeleteSectionRequest,
): string {
  return JSON.stringify(
    DeleteSectionRequest$outboundSchema.parse(deleteSectionRequest),
  );
}

export function deleteSectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSectionRequest' from JSON`,
  );
}

/** @internal */
export const DeleteSectionResponse$inboundSchema: z.ZodType<
  DeleteSectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DeleteSectionResponse$Outbound = {
  message: string;
};

/** @internal */
export const DeleteSectionResponse$outboundSchema: z.ZodType<
  DeleteSectionResponse$Outbound,
  z.ZodTypeDef,
  DeleteSectionResponse
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSectionResponse$ {
  /** @deprecated use `DeleteSectionResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteSectionResponse$inboundSchema;
  /** @deprecated use `DeleteSectionResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteSectionResponse$outboundSchema;
  /** @deprecated use `DeleteSectionResponse$Outbound` instead. */
  export type Outbound = DeleteSectionResponse$Outbound;
}

export function deleteSectionResponseToJSON(
  deleteSectionResponse: DeleteSectionResponse,
): string {
  return JSON.stringify(
    DeleteSectionResponse$outboundSchema.parse(deleteSectionResponse),
  );
}

export function deleteSectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSectionResponse' from JSON`,
  );
}
