/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Field to sort by
 */
export const SearchAssessmentTestsSort = {
  Title: "title",
  Identifier: "identifier",
  CreatedAt: "createdAt",
  UpdatedAt: "updatedAt",
} as const;
/**
 * Field to sort by
 */
export type SearchAssessmentTestsSort = ClosedEnum<
  typeof SearchAssessmentTestsSort
>;

/**
 * Sort order
 */
export const SearchAssessmentTestsQueryParamOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort order
 */
export type SearchAssessmentTestsQueryParamOrder = ClosedEnum<
  typeof SearchAssessmentTestsQueryParamOrder
>;

/**
 * Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
 */
export const SearchAssessmentTestsQueryParamNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
 */
export type SearchAssessmentTestsQueryParamNavigationMode = ClosedEnum<
  typeof SearchAssessmentTestsQueryParamNavigationMode
>;

/**
 * Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
 */
export const SearchAssessmentTestsQueryParamSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
 */
export type SearchAssessmentTestsQueryParamSubmissionMode = ClosedEnum<
  typeof SearchAssessmentTestsQueryParamSubmissionMode
>;

export type SearchAssessmentTestsRequest = {
  /**
   * Search title and identifier fields using a search term. This is a fuzzy search.
   */
  query?: string | undefined;
  /**
   * Page number for pagination
   */
  page?: string | undefined;
  /**
   * Number of items per page
   */
  limit?: string | undefined;
  /**
   * Field to sort by
   */
  sort?: SearchAssessmentTestsSort | undefined;
  /**
   * Sort order
   */
  order?: SearchAssessmentTestsQueryParamOrder | undefined;
  /**
   * Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
   */
  navigationMode?: SearchAssessmentTestsQueryParamNavigationMode | undefined;
  /**
   * Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
   */
  submissionMode?: SearchAssessmentTestsQueryParamSubmissionMode | undefined;
  /**
   * Advanced filter expression using =, !=, >, >=, <, <=, ~ and logical AND/OR. Example: type='practice' AND createdAt>'2024-01-01'
   */
  filter?: string | undefined;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const SearchAssessmentTestsItemNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type SearchAssessmentTestsItemNavigationMode = ClosedEnum<
  typeof SearchAssessmentTestsItemNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const SearchAssessmentTestsItemSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type SearchAssessmentTestsItemSubmissionMode = ClosedEnum<
  typeof SearchAssessmentTestsItemSubmissionMode
>;

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type SearchAssessmentTestsQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type SearchAssessmentTestsQtiAssessmentSection = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<SearchAssessmentTestsQtiAssessmentItemRef>
    | undefined;
};

/**
 * Complete test part data returned from the service provider. Contains all sections and their configuration.
 */
export type SearchAssessmentTestsQtiTestPart = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: SearchAssessmentTestsItemNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: SearchAssessmentTestsItemSubmissionMode;
  qtiAssessmentSection: Array<SearchAssessmentTestsQtiAssessmentSection>;
};

/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export const SearchAssessmentTestsCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
 */
export type SearchAssessmentTestsCardinality = ClosedEnum<
  typeof SearchAssessmentTestsCardinality
>;

/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export const SearchAssessmentTestsBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Data type of the outcome variable, determining how values are stored and processed
 */
export type SearchAssessmentTestsBaseType = ClosedEnum<
  typeof SearchAssessmentTestsBaseType
>;

/**
 * Optional default value configuration for outcome variables
 */
export type SearchAssessmentTestsDefaultValue = {
  /**
   * The default value to assign to the outcome variable
   */
  value?: any | undefined;
};

export type SearchAssessmentTestsQtiOutcomeDeclaration = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
   */
  cardinality?: SearchAssessmentTestsCardinality | undefined;
  /**
   * Data type of the outcome variable, determining how values are stored and processed
   */
  baseType: SearchAssessmentTestsBaseType;
  /**
   * Expected maximum value for this outcome variable in normal circumstances
   */
  normalMaximum?: number | undefined;
  /**
   * Expected minimum value for this outcome variable in normal circumstances
   */
  normalMinimum?: number | undefined;
  /**
   * Optional default value configuration for outcome variables
   */
  defaultValue?: SearchAssessmentTestsDefaultValue | undefined;
};

export type SearchAssessmentTestsAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  toolName: string;
  toolVersion: string;
};

export type SearchAssessmentTestsQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type SearchAssessmentTestsQtiDefaultValue = {
  qtiValue?: any | undefined;
};

export type SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration = {
  attributes: SearchAssessmentTestsQtiOutcomeDeclarationAttributes;
  qtiDefaultValue?: SearchAssessmentTestsQtiDefaultValue | undefined;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
};

export type SearchAssessmentTestsQtiTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type SearchAssessmentTestsQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
};

export type SearchAssessmentTestsQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef = {
  attributes: SearchAssessmentTestsQtiAssessmentItemRefAttributes;
};

export type SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection = {
  attributes: SearchAssessmentTestsQtiAssessmentSectionAttributes;
  qtiAssessmentItemRef?:
    | Array<SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef>
    | undefined;
};

export type SearchAssessmentTestsQtiAssessmentTestQtiTestPart = {
  attributes: SearchAssessmentTestsQtiTestPartAttributes;
  qtiAssessmentSection: Array<
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection
  >;
};

export type SearchAssessmentTestsQtiAssessmentTest = {
  attributes: SearchAssessmentTestsAttributes;
  qtiOutcomeDeclaration: Array<
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration
  >;
  qtiTestPart: Array<SearchAssessmentTestsQtiAssessmentTestQtiTestPart>;
};

/**
 * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
 */
export type SearchAssessmentTestsContent = {
  qtiAssessmentTest: SearchAssessmentTestsQtiAssessmentTest;
};

/**
 * Complete assessment test data including all test parts, sections, items, and configuration settings
 */
export type SearchAssessmentTestsItem = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Version of the specification used for this assessment test
   */
  qtiVersion?: string | undefined;
  qtiTestPart: Array<SearchAssessmentTestsQtiTestPart>;
  /**
   * Array of outcome variable declarations for storing assessment results and computed values
   */
  qtiOutcomeDeclaration: Array<SearchAssessmentTestsQtiOutcomeDeclaration>;
  /**
   * Time limit for the entire assessment test in seconds. When not specified, there is no time limit
   */
  timeLimit?: number | undefined;
  /**
   * Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
   */
  maxAttempts?: number | undefined;
  /**
   * Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
   */
  toolsEnabled?: { [k: string]: boolean } | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
   */
  content: SearchAssessmentTestsContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export const SearchAssessmentTestsOrderResponse = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export type SearchAssessmentTestsOrderResponse = ClosedEnum<
  typeof SearchAssessmentTestsOrderResponse
>;

/**
 * Paginated response containing all assessment tests available on the service provider with navigation metadata
 */
export type SearchAssessmentTestsResponse = {
  /**
   * Array of assessment tests that match the search criteria on the service provider
   */
  items: Array<SearchAssessmentTestsItem>;
  /**
   * The total number of entities that match the search criteria.
   */
  total: number;
  /**
   * The page number of the entities that match the search criteria.
   */
  page?: number | undefined;
  /**
   * The total number of pages of entities that match the search criteria.
   */
  pages: number;
  /**
   * The number of entities per page.
   */
  limit?: number | undefined;
  /**
   * The field to sort the entities by.
   */
  sort: string;
  /**
   * The order to sort the entities by. Either 'asc' or 'desc'.
   */
  order: SearchAssessmentTestsOrderResponse;
};

/** @internal */
export const SearchAssessmentTestsSort$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsSort
> = z.nativeEnum(SearchAssessmentTestsSort);

/** @internal */
export const SearchAssessmentTestsSort$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsSort
> = SearchAssessmentTestsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsSort$ {
  /** @deprecated use `SearchAssessmentTestsSort$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsSort$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsSort$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsSort$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsQueryParamOrder$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsQueryParamOrder> = z.nativeEnum(
    SearchAssessmentTestsQueryParamOrder,
  );

/** @internal */
export const SearchAssessmentTestsQueryParamOrder$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsQueryParamOrder> =
    SearchAssessmentTestsQueryParamOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQueryParamOrder$ {
  /** @deprecated use `SearchAssessmentTestsQueryParamOrder$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQueryParamOrder$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQueryParamOrder$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQueryParamOrder$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsQueryParamNavigationMode$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsQueryParamNavigationMode> = z
    .nativeEnum(SearchAssessmentTestsQueryParamNavigationMode);

/** @internal */
export const SearchAssessmentTestsQueryParamNavigationMode$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsQueryParamNavigationMode> =
    SearchAssessmentTestsQueryParamNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQueryParamNavigationMode$ {
  /** @deprecated use `SearchAssessmentTestsQueryParamNavigationMode$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQueryParamNavigationMode$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQueryParamNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQueryParamNavigationMode$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsQueryParamSubmissionMode$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsQueryParamSubmissionMode> = z
    .nativeEnum(SearchAssessmentTestsQueryParamSubmissionMode);

/** @internal */
export const SearchAssessmentTestsQueryParamSubmissionMode$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsQueryParamSubmissionMode> =
    SearchAssessmentTestsQueryParamSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQueryParamSubmissionMode$ {
  /** @deprecated use `SearchAssessmentTestsQueryParamSubmissionMode$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQueryParamSubmissionMode$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQueryParamSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQueryParamSubmissionMode$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsRequest$inboundSchema: z.ZodType<
  SearchAssessmentTestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchAssessmentTestsSort$inboundSchema.optional(),
  order: SearchAssessmentTestsQueryParamOrder$inboundSchema.default("desc"),
  navigationMode: SearchAssessmentTestsQueryParamNavigationMode$inboundSchema
    .optional(),
  submissionMode: SearchAssessmentTestsQueryParamSubmissionMode$inboundSchema
    .optional(),
  filter: z.string().optional(),
});

/** @internal */
export type SearchAssessmentTestsRequest$Outbound = {
  query?: string | undefined;
  page: string;
  limit: string;
  sort?: string | undefined;
  order: string;
  navigationMode?: string | undefined;
  submissionMode?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const SearchAssessmentTestsRequest$outboundSchema: z.ZodType<
  SearchAssessmentTestsRequest$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsRequest
> = z.object({
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchAssessmentTestsSort$outboundSchema.optional(),
  order: SearchAssessmentTestsQueryParamOrder$outboundSchema.default("desc"),
  navigationMode: SearchAssessmentTestsQueryParamNavigationMode$outboundSchema
    .optional(),
  submissionMode: SearchAssessmentTestsQueryParamSubmissionMode$outboundSchema
    .optional(),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsRequest$ {
  /** @deprecated use `SearchAssessmentTestsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsRequest$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsRequest$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsRequest$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsRequest$Outbound;
}

export function searchAssessmentTestsRequestToJSON(
  searchAssessmentTestsRequest: SearchAssessmentTestsRequest,
): string {
  return JSON.stringify(
    SearchAssessmentTestsRequest$outboundSchema.parse(
      searchAssessmentTestsRequest,
    ),
  );
}

export function searchAssessmentTestsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentTestsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsRequest' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsItemNavigationMode$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsItemNavigationMode> = z
    .nativeEnum(SearchAssessmentTestsItemNavigationMode);

/** @internal */
export const SearchAssessmentTestsItemNavigationMode$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsItemNavigationMode> =
    SearchAssessmentTestsItemNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsItemNavigationMode$ {
  /** @deprecated use `SearchAssessmentTestsItemNavigationMode$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsItemNavigationMode$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsItemNavigationMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsItemNavigationMode$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsItemSubmissionMode$inboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsItemSubmissionMode> = z
    .nativeEnum(SearchAssessmentTestsItemSubmissionMode);

/** @internal */
export const SearchAssessmentTestsItemSubmissionMode$outboundSchema:
  z.ZodNativeEnum<typeof SearchAssessmentTestsItemSubmissionMode> =
    SearchAssessmentTestsItemSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsItemSubmissionMode$ {
  /** @deprecated use `SearchAssessmentTestsItemSubmissionMode$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsItemSubmissionMode$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsItemSubmissionMode$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsItemSubmissionMode$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentItemRef$inboundSchema: z.ZodType<
  SearchAssessmentTestsQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type SearchAssessmentTestsQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const SearchAssessmentTestsQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentItemRef
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentItemRef$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsQtiAssessmentItemRef$Outbound;
}

export function searchAssessmentTestsQtiAssessmentItemRefToJSON(
  searchAssessmentTestsQtiAssessmentItemRef:
    SearchAssessmentTestsQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentItemRef$outboundSchema.parse(
      searchAssessmentTestsQtiAssessmentItemRef,
    ),
  );
}

export function searchAssessmentTestsQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentItemRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentSection$inboundSchema: z.ZodType<
  SearchAssessmentTestsQtiAssessmentSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => SearchAssessmentTestsQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type SearchAssessmentTestsQtiAssessmentSection$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<SearchAssessmentTestsQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const SearchAssessmentTestsQtiAssessmentSection$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentSection
  > = z.object({
    id: z.string(),
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    qtiAssessmentItemRef: z.array(
      z.lazy(() => SearchAssessmentTestsQtiAssessmentItemRef$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentSection$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentSection$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentSection$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentSection$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsQtiAssessmentSection$Outbound;
}

export function searchAssessmentTestsQtiAssessmentSectionToJSON(
  searchAssessmentTestsQtiAssessmentSection:
    SearchAssessmentTestsQtiAssessmentSection,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentSection$outboundSchema.parse(
      searchAssessmentTestsQtiAssessmentSection,
    ),
  );
}

export function searchAssessmentTestsQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentSection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiTestPart$inboundSchema: z.ZodType<
  SearchAssessmentTestsQtiTestPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: SearchAssessmentTestsItemNavigationMode$inboundSchema,
  submissionMode: SearchAssessmentTestsItemSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(
    z.lazy(() => SearchAssessmentTestsQtiAssessmentSection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type SearchAssessmentTestsQtiTestPart$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<
    SearchAssessmentTestsQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const SearchAssessmentTestsQtiTestPart$outboundSchema: z.ZodType<
  SearchAssessmentTestsQtiTestPart$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsQtiTestPart
> = z.object({
  identifier: z.string(),
  navigationMode: SearchAssessmentTestsItemNavigationMode$outboundSchema,
  submissionMode: SearchAssessmentTestsItemSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(
    z.lazy(() => SearchAssessmentTestsQtiAssessmentSection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiTestPart$ {
  /** @deprecated use `SearchAssessmentTestsQtiTestPart$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsQtiTestPart$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiTestPart$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsQtiTestPart$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiTestPart$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsQtiTestPart$Outbound;
}

export function searchAssessmentTestsQtiTestPartToJSON(
  searchAssessmentTestsQtiTestPart: SearchAssessmentTestsQtiTestPart,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiTestPart$outboundSchema.parse(
      searchAssessmentTestsQtiTestPart,
    ),
  );
}

export function searchAssessmentTestsQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsQtiTestPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentTestsQtiTestPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsQtiTestPart' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsCardinality$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsCardinality
> = z.nativeEnum(SearchAssessmentTestsCardinality);

/** @internal */
export const SearchAssessmentTestsCardinality$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsCardinality
> = SearchAssessmentTestsCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsCardinality$ {
  /** @deprecated use `SearchAssessmentTestsCardinality$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsCardinality$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsCardinality$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsCardinality$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsBaseType$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsBaseType
> = z.nativeEnum(SearchAssessmentTestsBaseType);

/** @internal */
export const SearchAssessmentTestsBaseType$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsBaseType
> = SearchAssessmentTestsBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsBaseType$ {
  /** @deprecated use `SearchAssessmentTestsBaseType$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsBaseType$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsBaseType$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsBaseType$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsDefaultValue$inboundSchema: z.ZodType<
  SearchAssessmentTestsDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
});

/** @internal */
export type SearchAssessmentTestsDefaultValue$Outbound = {
  value?: any | undefined;
};

/** @internal */
export const SearchAssessmentTestsDefaultValue$outboundSchema: z.ZodType<
  SearchAssessmentTestsDefaultValue$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsDefaultValue
> = z.object({
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsDefaultValue$ {
  /** @deprecated use `SearchAssessmentTestsDefaultValue$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsDefaultValue$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsDefaultValue$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsDefaultValue$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsDefaultValue$Outbound;
}

export function searchAssessmentTestsDefaultValueToJSON(
  searchAssessmentTestsDefaultValue: SearchAssessmentTestsDefaultValue,
): string {
  return JSON.stringify(
    SearchAssessmentTestsDefaultValue$outboundSchema.parse(
      searchAssessmentTestsDefaultValue,
    ),
  );
}

export function searchAssessmentTestsDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentTestsDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsDefaultValue' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<SearchAssessmentTestsQtiOutcomeDeclaration, z.ZodTypeDef, unknown> =
    z.object({
      identifier: z.string(),
      cardinality: SearchAssessmentTestsCardinality$inboundSchema.default(
        "single",
      ),
      baseType: SearchAssessmentTestsBaseType$inboundSchema,
      normalMaximum: z.number().optional(),
      normalMinimum: z.number().optional(),
      defaultValue: z.lazy(() =>
        SearchAssessmentTestsDefaultValue$inboundSchema
      ).optional(),
    });

/** @internal */
export type SearchAssessmentTestsQtiOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
  normalMaximum?: number | undefined;
  normalMinimum?: number | undefined;
  defaultValue?: SearchAssessmentTestsDefaultValue$Outbound | undefined;
};

/** @internal */
export const SearchAssessmentTestsQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiOutcomeDeclaration
  > = z.object({
    identifier: z.string(),
    cardinality: SearchAssessmentTestsCardinality$outboundSchema.default(
      "single",
    ),
    baseType: SearchAssessmentTestsBaseType$outboundSchema,
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
    defaultValue: z.lazy(() => SearchAssessmentTestsDefaultValue$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiOutcomeDeclaration$ {
  /** @deprecated use `SearchAssessmentTestsQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsQtiOutcomeDeclaration$Outbound;
}

export function searchAssessmentTestsQtiOutcomeDeclarationToJSON(
  searchAssessmentTestsQtiOutcomeDeclaration:
    SearchAssessmentTestsQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiOutcomeDeclaration$outboundSchema.parse(
      searchAssessmentTestsQtiOutcomeDeclaration,
    ),
  );
}

export function searchAssessmentTestsQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiOutcomeDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsAttributes$inboundSchema: z.ZodType<
  SearchAssessmentTestsAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  "tool-name": z.string(),
  "tool-version": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "tool-name": "toolName",
    "tool-version": "toolVersion",
  });
});

/** @internal */
export type SearchAssessmentTestsAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  "tool-name": string;
  "tool-version": string;
};

/** @internal */
export const SearchAssessmentTestsAttributes$outboundSchema: z.ZodType<
  SearchAssessmentTestsAttributes$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  toolName: z.string(),
  toolVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    toolName: "tool-name",
    toolVersion: "tool-version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsAttributes$ {
  /** @deprecated use `SearchAssessmentTestsAttributes$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsAttributes$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsAttributes$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsAttributes$Outbound;
}

export function searchAssessmentTestsAttributesToJSON(
  searchAssessmentTestsAttributes: SearchAssessmentTestsAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentTestsAttributes$outboundSchema.parse(
      searchAssessmentTestsAttributes,
    ),
  );
}

export function searchAssessmentTestsAttributesFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentTestsAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    "base-type": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "base-type": "baseType",
    });
  });

/** @internal */
export type SearchAssessmentTestsQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  "base-type": string;
};

/** @internal */
export const SearchAssessmentTestsQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      baseType: "base-type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `SearchAssessmentTestsQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes$Outbound;
}

export function searchAssessmentTestsQtiOutcomeDeclarationAttributesToJSON(
  searchAssessmentTestsQtiOutcomeDeclarationAttributes:
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      searchAssessmentTestsQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function searchAssessmentTestsQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiDefaultValue$inboundSchema: z.ZodType<
  SearchAssessmentTestsQtiDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type SearchAssessmentTestsQtiDefaultValue$Outbound = {
  "qti-value"?: any | undefined;
};

/** @internal */
export const SearchAssessmentTestsQtiDefaultValue$outboundSchema: z.ZodType<
  SearchAssessmentTestsQtiDefaultValue$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsQtiDefaultValue
> = z.object({
  qtiValue: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiDefaultValue$ {
  /** @deprecated use `SearchAssessmentTestsQtiDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiDefaultValue$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiDefaultValue$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiDefaultValue$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsQtiDefaultValue$Outbound;
}

export function searchAssessmentTestsQtiDefaultValueToJSON(
  searchAssessmentTestsQtiDefaultValue: SearchAssessmentTestsQtiDefaultValue,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiDefaultValue$outboundSchema.parse(
      searchAssessmentTestsQtiDefaultValue,
    ),
  );
}

export function searchAssessmentTestsQtiDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsQtiDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsQtiDefaultValue' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      SearchAssessmentTestsQtiOutcomeDeclarationAttributes$inboundSchema
    ),
    "qti-default-value": z.lazy(() =>
      SearchAssessmentTestsQtiDefaultValue$inboundSchema
    ).optional(),
    "normal-maximum": z.number().optional(),
    "normal-minimum": z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-default-value": "qtiDefaultValue",
      "normal-maximum": "normalMaximum",
      "normal-minimum": "normalMinimum",
    });
  });

/** @internal */
export type SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$Outbound =
  {
    _attributes: SearchAssessmentTestsQtiOutcomeDeclarationAttributes$Outbound;
    "qti-default-value"?:
      | SearchAssessmentTestsQtiDefaultValue$Outbound
      | undefined;
    "normal-maximum"?: number | undefined;
    "normal-minimum"?: number | undefined;
  };

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      SearchAssessmentTestsQtiOutcomeDeclarationAttributes$outboundSchema
    ),
    qtiDefaultValue: z.lazy(() =>
      SearchAssessmentTestsQtiDefaultValue$outboundSchema
    ).optional(),
    normalMaximum: z.number().optional(),
    normalMinimum: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiDefaultValue: "qti-default-value",
      normalMaximum: "normal-maximum",
      normalMinimum: "normal-minimum",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound =
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$Outbound;
}

export function searchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclarationToJSON(
  searchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration:
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
      .parse(searchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration),
  );
}

export function searchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiTestPartAttributes$inboundSchema:
  z.ZodType<SearchAssessmentTestsQtiTestPartAttributes, z.ZodTypeDef, unknown> =
    z.object({
      identifier: z.string(),
      "navigation-mode": z.string(),
      "submission-mode": z.string(),
    }).transform((v) => {
      return remap$(v, {
        "navigation-mode": "navigationMode",
        "submission-mode": "submissionMode",
      });
    });

/** @internal */
export type SearchAssessmentTestsQtiTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const SearchAssessmentTestsQtiTestPartAttributes$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiTestPartAttributes$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiTestPartAttributes
  > = z.object({
    identifier: z.string(),
    navigationMode: z.string(),
    submissionMode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      navigationMode: "navigation-mode",
      submissionMode: "submission-mode",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiTestPartAttributes$ {
  /** @deprecated use `SearchAssessmentTestsQtiTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiTestPartAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiTestPartAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiTestPartAttributes$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsQtiTestPartAttributes$Outbound;
}

export function searchAssessmentTestsQtiTestPartAttributesToJSON(
  searchAssessmentTestsQtiTestPartAttributes:
    SearchAssessmentTestsQtiTestPartAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiTestPartAttributes$outboundSchema.parse(
      searchAssessmentTestsQtiTestPartAttributes,
    ),
  );
}

export function searchAssessmentTestsQtiTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiTestPartAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiTestPartAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/** @internal */
export type SearchAssessmentTestsQtiAssessmentSectionAttributes$Outbound = {
  identifier: string;
  title: string;
  visible: string;
};

/** @internal */
export const SearchAssessmentTestsQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentSectionAttributes$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound =
    SearchAssessmentTestsQtiAssessmentSectionAttributes$Outbound;
}

export function searchAssessmentTestsQtiAssessmentSectionAttributesToJSON(
  searchAssessmentTestsQtiAssessmentSectionAttributes:
    SearchAssessmentTestsQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentSectionAttributes$outboundSchema.parse(
      searchAssessmentTestsQtiAssessmentSectionAttributes,
    ),
  );
}

export function searchAssessmentTestsQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentSectionAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type SearchAssessmentTestsQtiAssessmentItemRefAttributes$Outbound = {
  identifier: string;
  href: string;
};

/** @internal */
export const SearchAssessmentTestsQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound =
    SearchAssessmentTestsQtiAssessmentItemRefAttributes$Outbound;
}

export function searchAssessmentTestsQtiAssessmentItemRefAttributesToJSON(
  searchAssessmentTestsQtiAssessmentItemRefAttributes:
    SearchAssessmentTestsQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentItemRefAttributes$outboundSchema.parse(
      searchAssessmentTestsQtiAssessmentItemRefAttributes,
    ),
  );
}

export function searchAssessmentTestsQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentItemRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentItemRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$Outbound =
  {
    _attributes: SearchAssessmentTestsQtiAssessmentItemRefAttributes$Outbound;
  };

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef
  > = z.object({
    attributes: z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentItemRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound =
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$Outbound;
}

export function searchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRefToJSON(
  searchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef:
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      .parse(searchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef),
  );
}

export function searchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$inboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentSectionAttributes$inboundSchema
    ),
    "qti-assessment-item-ref": z.array(
      z.lazy(() =>
        SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$Outbound =
  {
    _attributes: SearchAssessmentTestsQtiAssessmentSectionAttributes$Outbound;
    "qti-assessment-item-ref"?:
      | Array<
        SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$Outbound
      >
      | undefined;
  };

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection
  > = z.object({
    attributes: z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentSectionAttributes$outboundSchema
    ),
    qtiAssessmentItemRef: z.array(
      z.lazy(() =>
        SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentItemRef: "qti-assessment-item-ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$Outbound` instead. */
  export type Outbound =
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$Outbound;
}

export function searchAssessmentTestsQtiAssessmentTestQtiAssessmentSectionToJSON(
  searchAssessmentTestsQtiAssessmentTestQtiAssessmentSection:
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$outboundSchema
      .parse(searchAssessmentTestsQtiAssessmentTestQtiAssessmentSection),
  );
}

export function searchAssessmentTestsQtiAssessmentTestQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiTestPart$inboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      SearchAssessmentTestsQtiTestPartAttributes$inboundSchema
    ),
    "qti-assessment-section": z.array(
      z.lazy(() =>
        SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-assessment-section": "qtiAssessmentSection",
    });
  });

/** @internal */
export type SearchAssessmentTestsQtiAssessmentTestQtiTestPart$Outbound = {
  _attributes: SearchAssessmentTestsQtiTestPartAttributes$Outbound;
  "qti-assessment-section": Array<
    SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$Outbound
  >;
};

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTestQtiTestPart$outboundSchema:
  z.ZodType<
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart$Outbound,
    z.ZodTypeDef,
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart
  > = z.object({
    attributes: z.lazy(() =>
      SearchAssessmentTestsQtiTestPartAttributes$outboundSchema
    ),
    qtiAssessmentSection: z.array(
      z.lazy(() =>
        SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiAssessmentSection: "qti-assessment-section",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentTestQtiTestPart$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiTestPart$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiTestPart$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTestQtiTestPart$Outbound` instead. */
  export type Outbound =
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart$Outbound;
}

export function searchAssessmentTestsQtiAssessmentTestQtiTestPartToJSON(
  searchAssessmentTestsQtiAssessmentTestQtiTestPart:
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart$outboundSchema.parse(
      searchAssessmentTestsQtiAssessmentTestQtiTestPart,
    ),
  );
}

export function searchAssessmentTestsQtiAssessmentTestQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAssessmentTestsQtiAssessmentTestQtiTestPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentTestQtiTestPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentTestQtiTestPart' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTest$inboundSchema: z.ZodType<
  SearchAssessmentTestsQtiAssessmentTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => SearchAssessmentTestsAttributes$inboundSchema),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$inboundSchema
    ),
  ),
  "qti-test-part": z.array(
    z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentTestQtiTestPart$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-test-part": "qtiTestPart",
  });
});

/** @internal */
export type SearchAssessmentTestsQtiAssessmentTest$Outbound = {
  _attributes: SearchAssessmentTestsAttributes$Outbound;
  "qti-outcome-declaration": Array<
    SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$Outbound
  >;
  "qti-test-part": Array<
    SearchAssessmentTestsQtiAssessmentTestQtiTestPart$Outbound
  >;
};

/** @internal */
export const SearchAssessmentTestsQtiAssessmentTest$outboundSchema: z.ZodType<
  SearchAssessmentTestsQtiAssessmentTest$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsQtiAssessmentTest
> = z.object({
  attributes: z.lazy(() => SearchAssessmentTestsAttributes$outboundSchema),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration$outboundSchema
    ),
  ),
  qtiTestPart: z.array(
    z.lazy(() =>
      SearchAssessmentTestsQtiAssessmentTestQtiTestPart$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiTestPart: "qti-test-part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsQtiAssessmentTest$ {
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTest$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsQtiAssessmentTest$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTest$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsQtiAssessmentTest$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsQtiAssessmentTest$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsQtiAssessmentTest$Outbound;
}

export function searchAssessmentTestsQtiAssessmentTestToJSON(
  searchAssessmentTestsQtiAssessmentTest:
    SearchAssessmentTestsQtiAssessmentTest,
): string {
  return JSON.stringify(
    SearchAssessmentTestsQtiAssessmentTest$outboundSchema.parse(
      searchAssessmentTestsQtiAssessmentTest,
    ),
  );
}

export function searchAssessmentTestsQtiAssessmentTestFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsQtiAssessmentTest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAssessmentTestsQtiAssessmentTest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsQtiAssessmentTest' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsContent$inboundSchema: z.ZodType<
  SearchAssessmentTestsContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-test": z.lazy(() =>
    SearchAssessmentTestsQtiAssessmentTest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-test": "qtiAssessmentTest",
  });
});

/** @internal */
export type SearchAssessmentTestsContent$Outbound = {
  "qti-assessment-test": SearchAssessmentTestsQtiAssessmentTest$Outbound;
};

/** @internal */
export const SearchAssessmentTestsContent$outboundSchema: z.ZodType<
  SearchAssessmentTestsContent$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsContent
> = z.object({
  qtiAssessmentTest: z.lazy(() =>
    SearchAssessmentTestsQtiAssessmentTest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentTest: "qti-assessment-test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsContent$ {
  /** @deprecated use `SearchAssessmentTestsContent$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsContent$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsContent$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsContent$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsContent$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsContent$Outbound;
}

export function searchAssessmentTestsContentToJSON(
  searchAssessmentTestsContent: SearchAssessmentTestsContent,
): string {
  return JSON.stringify(
    SearchAssessmentTestsContent$outboundSchema.parse(
      searchAssessmentTestsContent,
    ),
  );
}

export function searchAssessmentTestsContentFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentTestsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsContent' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsItem$inboundSchema: z.ZodType<
  SearchAssessmentTestsItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  "qti-test-part": z.array(
    z.lazy(() => SearchAssessmentTestsQtiTestPart$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => SearchAssessmentTestsQtiOutcomeDeclaration$inboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => SearchAssessmentTestsContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-test-part": "qtiTestPart",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "__v": "v",
  });
});

/** @internal */
export type SearchAssessmentTestsItem$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  qtiVersion: string;
  "qti-test-part": Array<SearchAssessmentTestsQtiTestPart$Outbound>;
  "qti-outcome-declaration": Array<
    SearchAssessmentTestsQtiOutcomeDeclaration$Outbound
  >;
  timeLimit?: number | undefined;
  maxAttempts?: number | undefined;
  toolsEnabled?: { [k: string]: boolean } | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: SearchAssessmentTestsContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const SearchAssessmentTestsItem$outboundSchema: z.ZodType<
  SearchAssessmentTestsItem$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsItem
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  qtiVersion: z.string().default("3.0"),
  qtiTestPart: z.array(
    z.lazy(() => SearchAssessmentTestsQtiTestPart$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => SearchAssessmentTestsQtiOutcomeDeclaration$outboundSchema),
  ),
  timeLimit: z.number().optional(),
  maxAttempts: z.number().optional(),
  toolsEnabled: z.record(z.boolean()).optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => SearchAssessmentTestsContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiTestPart: "qti-test-part",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsItem$ {
  /** @deprecated use `SearchAssessmentTestsItem$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsItem$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsItem$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsItem$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsItem$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsItem$Outbound;
}

export function searchAssessmentTestsItemToJSON(
  searchAssessmentTestsItem: SearchAssessmentTestsItem,
): string {
  return JSON.stringify(
    SearchAssessmentTestsItem$outboundSchema.parse(searchAssessmentTestsItem),
  );
}

export function searchAssessmentTestsItemFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentTestsItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsItem' from JSON`,
  );
}

/** @internal */
export const SearchAssessmentTestsOrderResponse$inboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsOrderResponse
> = z.nativeEnum(SearchAssessmentTestsOrderResponse);

/** @internal */
export const SearchAssessmentTestsOrderResponse$outboundSchema: z.ZodNativeEnum<
  typeof SearchAssessmentTestsOrderResponse
> = SearchAssessmentTestsOrderResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsOrderResponse$ {
  /** @deprecated use `SearchAssessmentTestsOrderResponse$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsOrderResponse$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsOrderResponse$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsOrderResponse$outboundSchema;
}

/** @internal */
export const SearchAssessmentTestsResponse$inboundSchema: z.ZodType<
  SearchAssessmentTestsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => SearchAssessmentTestsItem$inboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchAssessmentTestsOrderResponse$inboundSchema,
});

/** @internal */
export type SearchAssessmentTestsResponse$Outbound = {
  items: Array<SearchAssessmentTestsItem$Outbound>;
  total: number;
  page: number;
  pages: number;
  limit: number;
  sort: string;
  order: string;
};

/** @internal */
export const SearchAssessmentTestsResponse$outboundSchema: z.ZodType<
  SearchAssessmentTestsResponse$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsResponse
> = z.object({
  items: z.array(z.lazy(() => SearchAssessmentTestsItem$outboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchAssessmentTestsOrderResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsResponse$ {
  /** @deprecated use `SearchAssessmentTestsResponse$inboundSchema` instead. */
  export const inboundSchema = SearchAssessmentTestsResponse$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsResponse$outboundSchema` instead. */
  export const outboundSchema = SearchAssessmentTestsResponse$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsResponse$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsResponse$Outbound;
}

export function searchAssessmentTestsResponseToJSON(
  searchAssessmentTestsResponse: SearchAssessmentTestsResponse,
): string {
  return JSON.stringify(
    SearchAssessmentTestsResponse$outboundSchema.parse(
      searchAssessmentTestsResponse,
    ),
  );
}

export function searchAssessmentTestsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssessmentTestsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssessmentTestsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssessmentTestsResponse' from JSON`,
  );
}
