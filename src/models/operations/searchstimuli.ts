/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Field to sort by
 */
export const SearchStimuliSort = {
  Title: "title",
  Identifier: "identifier",
  CreatedAt: "createdAt",
  UpdatedAt: "updatedAt",
} as const;
/**
 * Field to sort by
 */
export type SearchStimuliSort = ClosedEnum<typeof SearchStimuliSort>;

/**
 * Sort order
 */
export const SearchStimuliQueryParamOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort order
 */
export type SearchStimuliQueryParamOrder = ClosedEnum<
  typeof SearchStimuliQueryParamOrder
>;

export type SearchStimuliRequest = {
  /**
   * Search title and identifier fields using a search term. This is a fuzzy search.
   */
  query?: string | undefined;
  /**
   * Page number for pagination
   */
  page?: string | undefined;
  /**
   * Number of items per page
   */
  limit?: string | undefined;
  /**
   * Field to sort by
   */
  sort?: SearchStimuliSort | undefined;
  /**
   * Sort order
   */
  order?: SearchStimuliQueryParamOrder | undefined;
};

export type SearchStimuliCatalogInfo = {
  /**
   * Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
   */
  id: string;
  /**
   * This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
   */
  support: string;
  /**
   * A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
   */
  content: string;
};

/**
 * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
 */
export type SearchStimuliStylesheet = {
  /**
   * The identifier or location of the external stylesheet.
   */
  href: string;
  /**
   * The type of the external stylesheet.
   */
  type: string;
};

export type SearchStimuliAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  xmlLang: string;
  title: string;
};

export type SearchStimuliQtiStylesheetAttributes = {
  href: string;
  type: string;
};

export type SearchStimuliQtiStylesheet = {
  attributes: SearchStimuliQtiStylesheetAttributes;
};

export type SearchStimuliQtiCatalogAttributes = {
  id: string;
};

export type SearchStimuliQtiCardAttributes = {
  support: string;
};

export type SearchStimuliQtiCard = {
  attributes: SearchStimuliQtiCardAttributes;
  qtiHtmlContent: { [k: string]: any };
};

export type SearchStimuliQtiCatalog = {
  attributes: SearchStimuliQtiCatalogAttributes;
  qtiCard: SearchStimuliQtiCard;
};

export type SearchStimuliQtiCatalogInfo = {
  qtiCatalog: SearchStimuliQtiCatalog;
};

export type SearchStimuliQtiAssessmentStimulus = {
  attributes: SearchStimuliAttributes;
  qtiStimulusBody: { [k: string]: any };
  qtiStylesheet?: SearchStimuliQtiStylesheet | undefined;
  qtiCatalogInfo?: SearchStimuliQtiCatalogInfo | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type SearchStimuliContent = {
  qtiAssessmentStimulus: SearchStimuliQtiAssessmentStimulus;
};

/**
 * Complete stimulus data structure returned from the database including parsed content and metadata
 */
export type SearchStimuliItem = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Array of catalog cards.
   */
  catalogInfo: Array<SearchStimuliCatalogInfo>;
  /**
   * A human readable label that can be used to describe the Stimulus.
   */
  label?: string | undefined;
  /**
   * The default language for the Stimulus.
   */
  language?: string | undefined;
  /**
   * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
   */
  stylesheet?: SearchStimuliStylesheet | undefined;
  /**
   * The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
   */
  toolName?: string | undefined;
  /**
   * The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
   */
  toolVersion?: string | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: SearchStimuliContent;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export const SearchStimuliOrderResponse = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the entities by. Either 'asc' or 'desc'.
 */
export type SearchStimuliOrderResponse = ClosedEnum<
  typeof SearchStimuliOrderResponse
>;

/**
 * Paginated response containing all stimuli that match the search criteria with navigation metadata
 */
export type SearchStimuliResponse = {
  /**
   * The items array will contain all stimuli that match the search criteria on the service provider.
   */
  items: Array<SearchStimuliItem>;
  /**
   * The total number of entities that match the search criteria.
   */
  total: number;
  /**
   * The page number of the entities that match the search criteria.
   */
  page?: number | undefined;
  /**
   * The total number of pages of entities that match the search criteria.
   */
  pages: number;
  /**
   * The number of entities per page.
   */
  limit?: number | undefined;
  /**
   * The field to sort the entities by.
   */
  sort: string;
  /**
   * The order to sort the entities by. Either 'asc' or 'desc'.
   */
  order: SearchStimuliOrderResponse;
};

/** @internal */
export const SearchStimuliSort$inboundSchema: z.ZodNativeEnum<
  typeof SearchStimuliSort
> = z.nativeEnum(SearchStimuliSort);

/** @internal */
export const SearchStimuliSort$outboundSchema: z.ZodNativeEnum<
  typeof SearchStimuliSort
> = SearchStimuliSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliSort$ {
  /** @deprecated use `SearchStimuliSort$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliSort$inboundSchema;
  /** @deprecated use `SearchStimuliSort$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliSort$outboundSchema;
}

/** @internal */
export const SearchStimuliQueryParamOrder$inboundSchema: z.ZodNativeEnum<
  typeof SearchStimuliQueryParamOrder
> = z.nativeEnum(SearchStimuliQueryParamOrder);

/** @internal */
export const SearchStimuliQueryParamOrder$outboundSchema: z.ZodNativeEnum<
  typeof SearchStimuliQueryParamOrder
> = SearchStimuliQueryParamOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQueryParamOrder$ {
  /** @deprecated use `SearchStimuliQueryParamOrder$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQueryParamOrder$inboundSchema;
  /** @deprecated use `SearchStimuliQueryParamOrder$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliQueryParamOrder$outboundSchema;
}

/** @internal */
export const SearchStimuliRequest$inboundSchema: z.ZodType<
  SearchStimuliRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchStimuliSort$inboundSchema.optional(),
  order: SearchStimuliQueryParamOrder$inboundSchema.default("desc"),
});

/** @internal */
export type SearchStimuliRequest$Outbound = {
  query?: string | undefined;
  page: string;
  limit: string;
  sort?: string | undefined;
  order: string;
};

/** @internal */
export const SearchStimuliRequest$outboundSchema: z.ZodType<
  SearchStimuliRequest$Outbound,
  z.ZodTypeDef,
  SearchStimuliRequest
> = z.object({
  query: z.string().optional(),
  page: z.string().default("1"),
  limit: z.string().default("10"),
  sort: SearchStimuliSort$outboundSchema.optional(),
  order: SearchStimuliQueryParamOrder$outboundSchema.default("desc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliRequest$ {
  /** @deprecated use `SearchStimuliRequest$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliRequest$inboundSchema;
  /** @deprecated use `SearchStimuliRequest$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliRequest$outboundSchema;
  /** @deprecated use `SearchStimuliRequest$Outbound` instead. */
  export type Outbound = SearchStimuliRequest$Outbound;
}

export function searchStimuliRequestToJSON(
  searchStimuliRequest: SearchStimuliRequest,
): string {
  return JSON.stringify(
    SearchStimuliRequest$outboundSchema.parse(searchStimuliRequest),
  );
}

export function searchStimuliRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliRequest' from JSON`,
  );
}

/** @internal */
export const SearchStimuliCatalogInfo$inboundSchema: z.ZodType<
  SearchStimuliCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/** @internal */
export type SearchStimuliCatalogInfo$Outbound = {
  id: string;
  support: string;
  content: string;
};

/** @internal */
export const SearchStimuliCatalogInfo$outboundSchema: z.ZodType<
  SearchStimuliCatalogInfo$Outbound,
  z.ZodTypeDef,
  SearchStimuliCatalogInfo
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliCatalogInfo$ {
  /** @deprecated use `SearchStimuliCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliCatalogInfo$inboundSchema;
  /** @deprecated use `SearchStimuliCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliCatalogInfo$outboundSchema;
  /** @deprecated use `SearchStimuliCatalogInfo$Outbound` instead. */
  export type Outbound = SearchStimuliCatalogInfo$Outbound;
}

export function searchStimuliCatalogInfoToJSON(
  searchStimuliCatalogInfo: SearchStimuliCatalogInfo,
): string {
  return JSON.stringify(
    SearchStimuliCatalogInfo$outboundSchema.parse(searchStimuliCatalogInfo),
  );
}

export function searchStimuliCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliCatalogInfo' from JSON`,
  );
}

/** @internal */
export const SearchStimuliStylesheet$inboundSchema: z.ZodType<
  SearchStimuliStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type SearchStimuliStylesheet$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const SearchStimuliStylesheet$outboundSchema: z.ZodType<
  SearchStimuliStylesheet$Outbound,
  z.ZodTypeDef,
  SearchStimuliStylesheet
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliStylesheet$ {
  /** @deprecated use `SearchStimuliStylesheet$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliStylesheet$inboundSchema;
  /** @deprecated use `SearchStimuliStylesheet$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliStylesheet$outboundSchema;
  /** @deprecated use `SearchStimuliStylesheet$Outbound` instead. */
  export type Outbound = SearchStimuliStylesheet$Outbound;
}

export function searchStimuliStylesheetToJSON(
  searchStimuliStylesheet: SearchStimuliStylesheet,
): string {
  return JSON.stringify(
    SearchStimuliStylesheet$outboundSchema.parse(searchStimuliStylesheet),
  );
}

export function searchStimuliStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliStylesheet' from JSON`,
  );
}

/** @internal */
export const SearchStimuliAttributes$inboundSchema: z.ZodType<
  SearchStimuliAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  "xml:lang": z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "xml:lang": "xmlLang",
  });
});

/** @internal */
export type SearchStimuliAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  "xml:lang": string;
  title: string;
};

/** @internal */
export const SearchStimuliAttributes$outboundSchema: z.ZodType<
  SearchStimuliAttributes$Outbound,
  z.ZodTypeDef,
  SearchStimuliAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  xmlLang: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    xmlLang: "xml:lang",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliAttributes$ {
  /** @deprecated use `SearchStimuliAttributes$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliAttributes$inboundSchema;
  /** @deprecated use `SearchStimuliAttributes$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliAttributes$outboundSchema;
  /** @deprecated use `SearchStimuliAttributes$Outbound` instead. */
  export type Outbound = SearchStimuliAttributes$Outbound;
}

export function searchStimuliAttributesToJSON(
  searchStimuliAttributes: SearchStimuliAttributes,
): string {
  return JSON.stringify(
    SearchStimuliAttributes$outboundSchema.parse(searchStimuliAttributes),
  );
}

export function searchStimuliAttributesFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliAttributes' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiStylesheetAttributes$inboundSchema: z.ZodType<
  SearchStimuliQtiStylesheetAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type SearchStimuliQtiStylesheetAttributes$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const SearchStimuliQtiStylesheetAttributes$outboundSchema: z.ZodType<
  SearchStimuliQtiStylesheetAttributes$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiStylesheetAttributes
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiStylesheetAttributes$ {
  /** @deprecated use `SearchStimuliQtiStylesheetAttributes$inboundSchema` instead. */
  export const inboundSchema =
    SearchStimuliQtiStylesheetAttributes$inboundSchema;
  /** @deprecated use `SearchStimuliQtiStylesheetAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchStimuliQtiStylesheetAttributes$outboundSchema;
  /** @deprecated use `SearchStimuliQtiStylesheetAttributes$Outbound` instead. */
  export type Outbound = SearchStimuliQtiStylesheetAttributes$Outbound;
}

export function searchStimuliQtiStylesheetAttributesToJSON(
  searchStimuliQtiStylesheetAttributes: SearchStimuliQtiStylesheetAttributes,
): string {
  return JSON.stringify(
    SearchStimuliQtiStylesheetAttributes$outboundSchema.parse(
      searchStimuliQtiStylesheetAttributes,
    ),
  );
}

export function searchStimuliQtiStylesheetAttributesFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiStylesheetAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchStimuliQtiStylesheetAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiStylesheetAttributes' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiStylesheet$inboundSchema: z.ZodType<
  SearchStimuliQtiStylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => SearchStimuliQtiStylesheetAttributes$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type SearchStimuliQtiStylesheet$Outbound = {
  _attributes: SearchStimuliQtiStylesheetAttributes$Outbound;
};

/** @internal */
export const SearchStimuliQtiStylesheet$outboundSchema: z.ZodType<
  SearchStimuliQtiStylesheet$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiStylesheet
> = z.object({
  attributes: z.lazy(() => SearchStimuliQtiStylesheetAttributes$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiStylesheet$ {
  /** @deprecated use `SearchStimuliQtiStylesheet$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQtiStylesheet$inboundSchema;
  /** @deprecated use `SearchStimuliQtiStylesheet$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliQtiStylesheet$outboundSchema;
  /** @deprecated use `SearchStimuliQtiStylesheet$Outbound` instead. */
  export type Outbound = SearchStimuliQtiStylesheet$Outbound;
}

export function searchStimuliQtiStylesheetToJSON(
  searchStimuliQtiStylesheet: SearchStimuliQtiStylesheet,
): string {
  return JSON.stringify(
    SearchStimuliQtiStylesheet$outboundSchema.parse(searchStimuliQtiStylesheet),
  );
}

export function searchStimuliQtiStylesheetFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiStylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliQtiStylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiStylesheet' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiCatalogAttributes$inboundSchema: z.ZodType<
  SearchStimuliQtiCatalogAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type SearchStimuliQtiCatalogAttributes$Outbound = {
  id: string;
};

/** @internal */
export const SearchStimuliQtiCatalogAttributes$outboundSchema: z.ZodType<
  SearchStimuliQtiCatalogAttributes$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiCatalogAttributes
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiCatalogAttributes$ {
  /** @deprecated use `SearchStimuliQtiCatalogAttributes$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQtiCatalogAttributes$inboundSchema;
  /** @deprecated use `SearchStimuliQtiCatalogAttributes$outboundSchema` instead. */
  export const outboundSchema =
    SearchStimuliQtiCatalogAttributes$outboundSchema;
  /** @deprecated use `SearchStimuliQtiCatalogAttributes$Outbound` instead. */
  export type Outbound = SearchStimuliQtiCatalogAttributes$Outbound;
}

export function searchStimuliQtiCatalogAttributesToJSON(
  searchStimuliQtiCatalogAttributes: SearchStimuliQtiCatalogAttributes,
): string {
  return JSON.stringify(
    SearchStimuliQtiCatalogAttributes$outboundSchema.parse(
      searchStimuliQtiCatalogAttributes,
    ),
  );
}

export function searchStimuliQtiCatalogAttributesFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiCatalogAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliQtiCatalogAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiCatalogAttributes' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiCardAttributes$inboundSchema: z.ZodType<
  SearchStimuliQtiCardAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  support: z.string(),
});

/** @internal */
export type SearchStimuliQtiCardAttributes$Outbound = {
  support: string;
};

/** @internal */
export const SearchStimuliQtiCardAttributes$outboundSchema: z.ZodType<
  SearchStimuliQtiCardAttributes$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiCardAttributes
> = z.object({
  support: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiCardAttributes$ {
  /** @deprecated use `SearchStimuliQtiCardAttributes$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQtiCardAttributes$inboundSchema;
  /** @deprecated use `SearchStimuliQtiCardAttributes$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliQtiCardAttributes$outboundSchema;
  /** @deprecated use `SearchStimuliQtiCardAttributes$Outbound` instead. */
  export type Outbound = SearchStimuliQtiCardAttributes$Outbound;
}

export function searchStimuliQtiCardAttributesToJSON(
  searchStimuliQtiCardAttributes: SearchStimuliQtiCardAttributes,
): string {
  return JSON.stringify(
    SearchStimuliQtiCardAttributes$outboundSchema.parse(
      searchStimuliQtiCardAttributes,
    ),
  );
}

export function searchStimuliQtiCardAttributesFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiCardAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliQtiCardAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiCardAttributes' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiCard$inboundSchema: z.ZodType<
  SearchStimuliQtiCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => SearchStimuliQtiCardAttributes$inboundSchema),
  "qti-html-content": z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-html-content": "qtiHtmlContent",
  });
});

/** @internal */
export type SearchStimuliQtiCard$Outbound = {
  _attributes: SearchStimuliQtiCardAttributes$Outbound;
  "qti-html-content": { [k: string]: any };
};

/** @internal */
export const SearchStimuliQtiCard$outboundSchema: z.ZodType<
  SearchStimuliQtiCard$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiCard
> = z.object({
  attributes: z.lazy(() => SearchStimuliQtiCardAttributes$outboundSchema),
  qtiHtmlContent: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiHtmlContent: "qti-html-content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiCard$ {
  /** @deprecated use `SearchStimuliQtiCard$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQtiCard$inboundSchema;
  /** @deprecated use `SearchStimuliQtiCard$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliQtiCard$outboundSchema;
  /** @deprecated use `SearchStimuliQtiCard$Outbound` instead. */
  export type Outbound = SearchStimuliQtiCard$Outbound;
}

export function searchStimuliQtiCardToJSON(
  searchStimuliQtiCard: SearchStimuliQtiCard,
): string {
  return JSON.stringify(
    SearchStimuliQtiCard$outboundSchema.parse(searchStimuliQtiCard),
  );
}

export function searchStimuliQtiCardFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliQtiCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiCard' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiCatalog$inboundSchema: z.ZodType<
  SearchStimuliQtiCatalog,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => SearchStimuliQtiCatalogAttributes$inboundSchema),
  "qti-card": z.lazy(() => SearchStimuliQtiCard$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-card": "qtiCard",
  });
});

/** @internal */
export type SearchStimuliQtiCatalog$Outbound = {
  _attributes: SearchStimuliQtiCatalogAttributes$Outbound;
  "qti-card": SearchStimuliQtiCard$Outbound;
};

/** @internal */
export const SearchStimuliQtiCatalog$outboundSchema: z.ZodType<
  SearchStimuliQtiCatalog$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiCatalog
> = z.object({
  attributes: z.lazy(() => SearchStimuliQtiCatalogAttributes$outboundSchema),
  qtiCard: z.lazy(() => SearchStimuliQtiCard$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiCard: "qti-card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiCatalog$ {
  /** @deprecated use `SearchStimuliQtiCatalog$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQtiCatalog$inboundSchema;
  /** @deprecated use `SearchStimuliQtiCatalog$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliQtiCatalog$outboundSchema;
  /** @deprecated use `SearchStimuliQtiCatalog$Outbound` instead. */
  export type Outbound = SearchStimuliQtiCatalog$Outbound;
}

export function searchStimuliQtiCatalogToJSON(
  searchStimuliQtiCatalog: SearchStimuliQtiCatalog,
): string {
  return JSON.stringify(
    SearchStimuliQtiCatalog$outboundSchema.parse(searchStimuliQtiCatalog),
  );
}

export function searchStimuliQtiCatalogFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiCatalog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliQtiCatalog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiCatalog' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiCatalogInfo$inboundSchema: z.ZodType<
  SearchStimuliQtiCatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-catalog": z.lazy(() => SearchStimuliQtiCatalog$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-catalog": "qtiCatalog",
  });
});

/** @internal */
export type SearchStimuliQtiCatalogInfo$Outbound = {
  "qti-catalog": SearchStimuliQtiCatalog$Outbound;
};

/** @internal */
export const SearchStimuliQtiCatalogInfo$outboundSchema: z.ZodType<
  SearchStimuliQtiCatalogInfo$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiCatalogInfo
> = z.object({
  qtiCatalog: z.lazy(() => SearchStimuliQtiCatalog$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiCatalog: "qti-catalog",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiCatalogInfo$ {
  /** @deprecated use `SearchStimuliQtiCatalogInfo$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQtiCatalogInfo$inboundSchema;
  /** @deprecated use `SearchStimuliQtiCatalogInfo$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliQtiCatalogInfo$outboundSchema;
  /** @deprecated use `SearchStimuliQtiCatalogInfo$Outbound` instead. */
  export type Outbound = SearchStimuliQtiCatalogInfo$Outbound;
}

export function searchStimuliQtiCatalogInfoToJSON(
  searchStimuliQtiCatalogInfo: SearchStimuliQtiCatalogInfo,
): string {
  return JSON.stringify(
    SearchStimuliQtiCatalogInfo$outboundSchema.parse(
      searchStimuliQtiCatalogInfo,
    ),
  );
}

export function searchStimuliQtiCatalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiCatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliQtiCatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiCatalogInfo' from JSON`,
  );
}

/** @internal */
export const SearchStimuliQtiAssessmentStimulus$inboundSchema: z.ZodType<
  SearchStimuliQtiAssessmentStimulus,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => SearchStimuliAttributes$inboundSchema),
  "qti-stimulus-body": z.record(z.any()),
  "qti-stylesheet": z.lazy(() => SearchStimuliQtiStylesheet$inboundSchema)
    .optional(),
  "qti-catalog-info": z.lazy(() => SearchStimuliQtiCatalogInfo$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-stimulus-body": "qtiStimulusBody",
    "qti-stylesheet": "qtiStylesheet",
    "qti-catalog-info": "qtiCatalogInfo",
  });
});

/** @internal */
export type SearchStimuliQtiAssessmentStimulus$Outbound = {
  _attributes: SearchStimuliAttributes$Outbound;
  "qti-stimulus-body": { [k: string]: any };
  "qti-stylesheet"?: SearchStimuliQtiStylesheet$Outbound | undefined;
  "qti-catalog-info"?: SearchStimuliQtiCatalogInfo$Outbound | undefined;
};

/** @internal */
export const SearchStimuliQtiAssessmentStimulus$outboundSchema: z.ZodType<
  SearchStimuliQtiAssessmentStimulus$Outbound,
  z.ZodTypeDef,
  SearchStimuliQtiAssessmentStimulus
> = z.object({
  attributes: z.lazy(() => SearchStimuliAttributes$outboundSchema),
  qtiStimulusBody: z.record(z.any()),
  qtiStylesheet: z.lazy(() => SearchStimuliQtiStylesheet$outboundSchema)
    .optional(),
  qtiCatalogInfo: z.lazy(() => SearchStimuliQtiCatalogInfo$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiStimulusBody: "qti-stimulus-body",
    qtiStylesheet: "qti-stylesheet",
    qtiCatalogInfo: "qti-catalog-info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliQtiAssessmentStimulus$ {
  /** @deprecated use `SearchStimuliQtiAssessmentStimulus$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliQtiAssessmentStimulus$inboundSchema;
  /** @deprecated use `SearchStimuliQtiAssessmentStimulus$outboundSchema` instead. */
  export const outboundSchema =
    SearchStimuliQtiAssessmentStimulus$outboundSchema;
  /** @deprecated use `SearchStimuliQtiAssessmentStimulus$Outbound` instead. */
  export type Outbound = SearchStimuliQtiAssessmentStimulus$Outbound;
}

export function searchStimuliQtiAssessmentStimulusToJSON(
  searchStimuliQtiAssessmentStimulus: SearchStimuliQtiAssessmentStimulus,
): string {
  return JSON.stringify(
    SearchStimuliQtiAssessmentStimulus$outboundSchema.parse(
      searchStimuliQtiAssessmentStimulus,
    ),
  );
}

export function searchStimuliQtiAssessmentStimulusFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliQtiAssessmentStimulus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchStimuliQtiAssessmentStimulus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliQtiAssessmentStimulus' from JSON`,
  );
}

/** @internal */
export const SearchStimuliContent$inboundSchema: z.ZodType<
  SearchStimuliContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-stimulus": z.lazy(() =>
    SearchStimuliQtiAssessmentStimulus$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-stimulus": "qtiAssessmentStimulus",
  });
});

/** @internal */
export type SearchStimuliContent$Outbound = {
  "qti-assessment-stimulus": SearchStimuliQtiAssessmentStimulus$Outbound;
};

/** @internal */
export const SearchStimuliContent$outboundSchema: z.ZodType<
  SearchStimuliContent$Outbound,
  z.ZodTypeDef,
  SearchStimuliContent
> = z.object({
  qtiAssessmentStimulus: z.lazy(() =>
    SearchStimuliQtiAssessmentStimulus$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentStimulus: "qti-assessment-stimulus",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliContent$ {
  /** @deprecated use `SearchStimuliContent$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliContent$inboundSchema;
  /** @deprecated use `SearchStimuliContent$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliContent$outboundSchema;
  /** @deprecated use `SearchStimuliContent$Outbound` instead. */
  export type Outbound = SearchStimuliContent$Outbound;
}

export function searchStimuliContentToJSON(
  searchStimuliContent: SearchStimuliContent,
): string {
  return JSON.stringify(
    SearchStimuliContent$outboundSchema.parse(searchStimuliContent),
  );
}

export function searchStimuliContentFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliContent' from JSON`,
  );
}

/** @internal */
export const SearchStimuliItem$inboundSchema: z.ZodType<
  SearchStimuliItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => SearchStimuliCatalogInfo$inboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => SearchStimuliStylesheet$inboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => SearchStimuliContent$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type SearchStimuliItem$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  catalogInfo: Array<SearchStimuliCatalogInfo$Outbound>;
  label?: string | undefined;
  language: string;
  stylesheet?: SearchStimuliStylesheet$Outbound | undefined;
  toolName?: string | undefined;
  toolVersion?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: SearchStimuliContent$Outbound;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const SearchStimuliItem$outboundSchema: z.ZodType<
  SearchStimuliItem$Outbound,
  z.ZodTypeDef,
  SearchStimuliItem
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  catalogInfo: z.array(z.lazy(() => SearchStimuliCatalogInfo$outboundSchema)),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => SearchStimuliStylesheet$outboundSchema).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => SearchStimuliContent$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliItem$ {
  /** @deprecated use `SearchStimuliItem$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliItem$inboundSchema;
  /** @deprecated use `SearchStimuliItem$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliItem$outboundSchema;
  /** @deprecated use `SearchStimuliItem$Outbound` instead. */
  export type Outbound = SearchStimuliItem$Outbound;
}

export function searchStimuliItemToJSON(
  searchStimuliItem: SearchStimuliItem,
): string {
  return JSON.stringify(
    SearchStimuliItem$outboundSchema.parse(searchStimuliItem),
  );
}

export function searchStimuliItemFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliItem' from JSON`,
  );
}

/** @internal */
export const SearchStimuliOrderResponse$inboundSchema: z.ZodNativeEnum<
  typeof SearchStimuliOrderResponse
> = z.nativeEnum(SearchStimuliOrderResponse);

/** @internal */
export const SearchStimuliOrderResponse$outboundSchema: z.ZodNativeEnum<
  typeof SearchStimuliOrderResponse
> = SearchStimuliOrderResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliOrderResponse$ {
  /** @deprecated use `SearchStimuliOrderResponse$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliOrderResponse$inboundSchema;
  /** @deprecated use `SearchStimuliOrderResponse$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliOrderResponse$outboundSchema;
}

/** @internal */
export const SearchStimuliResponse$inboundSchema: z.ZodType<
  SearchStimuliResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => SearchStimuliItem$inboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchStimuliOrderResponse$inboundSchema,
});

/** @internal */
export type SearchStimuliResponse$Outbound = {
  items: Array<SearchStimuliItem$Outbound>;
  total: number;
  page: number;
  pages: number;
  limit: number;
  sort: string;
  order: string;
};

/** @internal */
export const SearchStimuliResponse$outboundSchema: z.ZodType<
  SearchStimuliResponse$Outbound,
  z.ZodTypeDef,
  SearchStimuliResponse
> = z.object({
  items: z.array(z.lazy(() => SearchStimuliItem$outboundSchema)),
  total: z.number(),
  page: z.number().default(1),
  pages: z.number(),
  limit: z.number().default(10),
  sort: z.string(),
  order: SearchStimuliOrderResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliResponse$ {
  /** @deprecated use `SearchStimuliResponse$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliResponse$inboundSchema;
  /** @deprecated use `SearchStimuliResponse$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliResponse$outboundSchema;
  /** @deprecated use `SearchStimuliResponse$Outbound` instead. */
  export type Outbound = SearchStimuliResponse$Outbound;
}

export function searchStimuliResponseToJSON(
  searchStimuliResponse: SearchStimuliResponse,
): string {
  return JSON.stringify(
    SearchStimuliResponse$outboundSchema.parse(searchStimuliResponse),
  );
}

export function searchStimuliResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchStimuliResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStimuliResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStimuliResponse' from JSON`,
  );
}
