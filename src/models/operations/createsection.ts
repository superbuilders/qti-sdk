/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateSectionRequest = {
  /**
   * Root assessment test identifier
   */
  assessmentTestIdentifier: string;
  /**
   * Parent test part identifier
   */
  testPartIdentifier: string;
  /**
   * The section to create
   */
  section: models.Section;
};

/** @internal */
export const CreateSectionRequest$inboundSchema: z.ZodType<
  CreateSectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  Section: models.Section$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Section": "section",
  });
});

/** @internal */
export type CreateSectionRequest$Outbound = {
  assessmentTestIdentifier: string;
  testPartIdentifier: string;
  Section: models.Section$Outbound;
};

/** @internal */
export const CreateSectionRequest$outboundSchema: z.ZodType<
  CreateSectionRequest$Outbound,
  z.ZodTypeDef,
  CreateSectionRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  section: models.Section$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    section: "Section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSectionRequest$ {
  /** @deprecated use `CreateSectionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSectionRequest$inboundSchema;
  /** @deprecated use `CreateSectionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSectionRequest$outboundSchema;
  /** @deprecated use `CreateSectionRequest$Outbound` instead. */
  export type Outbound = CreateSectionRequest$Outbound;
}

export function createSectionRequestToJSON(
  createSectionRequest: CreateSectionRequest,
): string {
  return JSON.stringify(
    CreateSectionRequest$outboundSchema.parse(createSectionRequest),
  );
}

export function createSectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSectionRequest' from JSON`,
  );
}
