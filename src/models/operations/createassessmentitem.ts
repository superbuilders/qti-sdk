/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Assessment item interaction types that are supported by the service provider.
 */
export const CreateAssessmentItemType = {
  Choice: "choice",
  TextEntry: "text-entry",
  ExtendedText: "extended-text",
  InlineChoice: "inline-choice",
  Match: "match",
  Order: "order",
  Associate: "associate",
  SelectPoint: "select-point",
  GraphicOrder: "graphic-order",
  GraphicAssociate: "graphic-associate",
  GraphicGapMatch: "graphic-gap-match",
  Hotspot: "hotspot",
  Hottext: "hottext",
  Slider: "slider",
  Drawing: "drawing",
  Media: "media",
  Upload: "upload",
} as const;
/**
 * Assessment item interaction types that are supported by the service provider.
 */
export type CreateAssessmentItemType = ClosedEnum<
  typeof CreateAssessmentItemType
>;

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const CreateAssessmentItemResponseDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type CreateAssessmentItemResponseDeclarationCardinality = ClosedEnum<
  typeof CreateAssessmentItemResponseDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const CreateAssessmentItemResponseDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type CreateAssessmentItemResponseDeclarationBaseType = ClosedEnum<
  typeof CreateAssessmentItemResponseDeclarationBaseType
>;

/**
 * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
 */
export type CreateAssessmentItemCorrectResponse = {
  value: Array<string>;
};

export type CreateAssessmentItemResponseDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: CreateAssessmentItemResponseDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: CreateAssessmentItemResponseDeclarationBaseType | undefined;
  /**
   * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
   */
  correctResponse: CreateAssessmentItemCorrectResponse;
};

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const CreateAssessmentItemOutcomeDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type CreateAssessmentItemOutcomeDeclarationCardinality = ClosedEnum<
  typeof CreateAssessmentItemOutcomeDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const CreateAssessmentItemOutcomeDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type CreateAssessmentItemOutcomeDeclarationBaseType = ClosedEnum<
  typeof CreateAssessmentItemOutcomeDeclarationBaseType
>;

export type CreateAssessmentItemOutcomeDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: CreateAssessmentItemOutcomeDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: CreateAssessmentItemOutcomeDeclarationBaseType | undefined;
};

/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export const CreateAssessmentItemTemplateType = {
  MatchCorrect: "match_correct",
  MapResponse: "map_response",
} as const;
/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export type CreateAssessmentItemTemplateType = ClosedEnum<
  typeof CreateAssessmentItemTemplateType
>;

/**
 * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
 */
export type CreateAssessmentItemInlineFeedback = {
  /**
   * Identifier of the outcome variable to be set with the inline feedback value.
   */
  outcomeIdentifier: string;
  /**
   * Identifier of the variable whose value will be assigned to the outcome variable during response processing.
   */
  variableIdentifier: string;
};

/**
 * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
 */
export type CreateAssessmentItemResponseProcessing = {
  /**
   * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
   */
  templateType: CreateAssessmentItemTemplateType;
  /**
   * Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
   */
  responseDeclarationIdentifier: string;
  /**
   * Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
   */
  outcomeIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
   */
  correctResponseIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
   */
  incorrectResponseIdentifier: string;
  /**
   * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
   */
  inlineFeedback?: CreateAssessmentItemInlineFeedback | undefined;
};

export type CreateAssessmentItemAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  adaptive: string;
  timeDependent: string;
};

export type CreateAssessmentItemQtiResponseDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type CreateAssessmentItemQtiCorrectResponse = {
  qtiValue: Array<string>;
};

export type CreateAssessmentItemQtiResponseDeclaration = {
  attributes: CreateAssessmentItemQtiResponseDeclarationAttributes;
  qtiCorrectResponse: CreateAssessmentItemQtiCorrectResponse;
};

export type CreateAssessmentItemQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type CreateAssessmentItemQtiOutcomeDeclaration = {
  attributes: CreateAssessmentItemQtiOutcomeDeclarationAttributes;
};

export type CreateAssessmentItemQtiAssessmentStimulusRefAttributes = {
  identifier: string;
  href: string;
  title: string;
};

export type CreateAssessmentItemQtiAssessmentStimulusRef = {
  attributes: CreateAssessmentItemQtiAssessmentStimulusRefAttributes;
};

export type CreateAssessmentItemQtiAssessmentItem = {
  attributes: CreateAssessmentItemAttributes;
  qtiResponseDeclaration: Array<CreateAssessmentItemQtiResponseDeclaration>;
  qtiOutcomeDeclaration: Array<CreateAssessmentItemQtiOutcomeDeclaration>;
  qtiAssessmentStimulusRef: CreateAssessmentItemQtiAssessmentStimulusRef;
  qtiItemBody?: any | undefined;
  qtiResponseProcessing?: any | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type CreateAssessmentItemContent = {
  qtiAssessmentItem: CreateAssessmentItemQtiAssessmentItem;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const CreateAssessmentItemModalFeedbackShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type CreateAssessmentItemModalFeedbackShowHide = ClosedEnum<
  typeof CreateAssessmentItemModalFeedbackShowHide
>;

export type CreateAssessmentItemModalFeedback = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: CreateAssessmentItemModalFeedbackShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
   */
  title: string;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const CreateAssessmentItemFeedbackInlineShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type CreateAssessmentItemFeedbackInlineShowHide = ClosedEnum<
  typeof CreateAssessmentItemFeedbackInlineShowHide
>;

export type CreateAssessmentItemFeedbackInline = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: CreateAssessmentItemFeedbackInlineShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const CreateAssessmentItemFeedbackBlockShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type CreateAssessmentItemFeedbackBlockShowHide = ClosedEnum<
  typeof CreateAssessmentItemFeedbackBlockShowHide
>;

export type CreateAssessmentItemFeedbackBlock = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: CreateAssessmentItemFeedbackBlockShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Assessment item created successfully
 */
export type CreateAssessmentItemResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Assessment item interaction types that are supported by the service provider.
   */
  type: CreateAssessmentItemType;
  /**
   * QTI version of the assessment item
   */
  qtiVersion?: string | undefined;
  /**
   * Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
   */
  timeDependent?: boolean | undefined;
  /**
   * Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
   */
  adaptive?: boolean | undefined;
  responseDeclarations?:
    | Array<CreateAssessmentItemResponseDeclaration>
    | undefined;
  outcomeDeclarations?:
    | Array<CreateAssessmentItemOutcomeDeclaration>
    | undefined;
  /**
   * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
   */
  responseProcessing: CreateAssessmentItemResponseProcessing;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: CreateAssessmentItemContent;
  /**
   * Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
   */
  modalFeedback?: Array<CreateAssessmentItemModalFeedback> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackInline?: Array<CreateAssessmentItemFeedbackInline> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackBlock?: Array<CreateAssessmentItemFeedbackBlock> | undefined;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/** @internal */
export const CreateAssessmentItemType$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentItemType
> = z.nativeEnum(CreateAssessmentItemType);

/** @internal */
export const CreateAssessmentItemType$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentItemType
> = CreateAssessmentItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemType$ {
  /** @deprecated use `CreateAssessmentItemType$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemType$inboundSchema;
  /** @deprecated use `CreateAssessmentItemType$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentItemType$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemResponseDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemResponseDeclarationCardinality> = z
    .nativeEnum(CreateAssessmentItemResponseDeclarationCardinality);

/** @internal */
export const CreateAssessmentItemResponseDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemResponseDeclarationCardinality> =
    CreateAssessmentItemResponseDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemResponseDeclarationCardinality$ {
  /** @deprecated use `CreateAssessmentItemResponseDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemResponseDeclarationCardinality$inboundSchema;
  /** @deprecated use `CreateAssessmentItemResponseDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemResponseDeclarationCardinality$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemResponseDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemResponseDeclarationBaseType> = z
    .nativeEnum(CreateAssessmentItemResponseDeclarationBaseType);

/** @internal */
export const CreateAssessmentItemResponseDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemResponseDeclarationBaseType> =
    CreateAssessmentItemResponseDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemResponseDeclarationBaseType$ {
  /** @deprecated use `CreateAssessmentItemResponseDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemResponseDeclarationBaseType$inboundSchema;
  /** @deprecated use `CreateAssessmentItemResponseDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemResponseDeclarationBaseType$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemCorrectResponse$inboundSchema: z.ZodType<
  CreateAssessmentItemCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.array(z.string()),
});

/** @internal */
export type CreateAssessmentItemCorrectResponse$Outbound = {
  value: Array<string>;
};

/** @internal */
export const CreateAssessmentItemCorrectResponse$outboundSchema: z.ZodType<
  CreateAssessmentItemCorrectResponse$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemCorrectResponse
> = z.object({
  value: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemCorrectResponse$ {
  /** @deprecated use `CreateAssessmentItemCorrectResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemCorrectResponse$inboundSchema;
  /** @deprecated use `CreateAssessmentItemCorrectResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemCorrectResponse$outboundSchema;
  /** @deprecated use `CreateAssessmentItemCorrectResponse$Outbound` instead. */
  export type Outbound = CreateAssessmentItemCorrectResponse$Outbound;
}

export function createAssessmentItemCorrectResponseToJSON(
  createAssessmentItemCorrectResponse: CreateAssessmentItemCorrectResponse,
): string {
  return JSON.stringify(
    CreateAssessmentItemCorrectResponse$outboundSchema.parse(
      createAssessmentItemCorrectResponse,
    ),
  );
}

export function createAssessmentItemCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemCorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemCorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemCorrectResponse' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemResponseDeclaration$inboundSchema: z.ZodType<
  CreateAssessmentItemResponseDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: CreateAssessmentItemResponseDeclarationCardinality$inboundSchema,
  baseType: CreateAssessmentItemResponseDeclarationBaseType$inboundSchema
    .optional(),
  correctResponse: z.lazy(() =>
    CreateAssessmentItemCorrectResponse$inboundSchema
  ),
});

/** @internal */
export type CreateAssessmentItemResponseDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
  correctResponse: CreateAssessmentItemCorrectResponse$Outbound;
};

/** @internal */
export const CreateAssessmentItemResponseDeclaration$outboundSchema: z.ZodType<
  CreateAssessmentItemResponseDeclaration$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemResponseDeclaration
> = z.object({
  identifier: z.string(),
  cardinality:
    CreateAssessmentItemResponseDeclarationCardinality$outboundSchema,
  baseType: CreateAssessmentItemResponseDeclarationBaseType$outboundSchema
    .optional(),
  correctResponse: z.lazy(() =>
    CreateAssessmentItemCorrectResponse$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemResponseDeclaration$ {
  /** @deprecated use `CreateAssessmentItemResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemResponseDeclaration$inboundSchema;
  /** @deprecated use `CreateAssessmentItemResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemResponseDeclaration$outboundSchema;
  /** @deprecated use `CreateAssessmentItemResponseDeclaration$Outbound` instead. */
  export type Outbound = CreateAssessmentItemResponseDeclaration$Outbound;
}

export function createAssessmentItemResponseDeclarationToJSON(
  createAssessmentItemResponseDeclaration:
    CreateAssessmentItemResponseDeclaration,
): string {
  return JSON.stringify(
    CreateAssessmentItemResponseDeclaration$outboundSchema.parse(
      createAssessmentItemResponseDeclaration,
    ),
  );
}

export function createAssessmentItemResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentItemResponseDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemResponseDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentItemResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemOutcomeDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemOutcomeDeclarationCardinality> = z
    .nativeEnum(CreateAssessmentItemOutcomeDeclarationCardinality);

/** @internal */
export const CreateAssessmentItemOutcomeDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemOutcomeDeclarationCardinality> =
    CreateAssessmentItemOutcomeDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemOutcomeDeclarationCardinality$ {
  /** @deprecated use `CreateAssessmentItemOutcomeDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemOutcomeDeclarationCardinality$inboundSchema;
  /** @deprecated use `CreateAssessmentItemOutcomeDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemOutcomeDeclarationCardinality$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemOutcomeDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemOutcomeDeclarationBaseType> = z
    .nativeEnum(CreateAssessmentItemOutcomeDeclarationBaseType);

/** @internal */
export const CreateAssessmentItemOutcomeDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemOutcomeDeclarationBaseType> =
    CreateAssessmentItemOutcomeDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemOutcomeDeclarationBaseType$ {
  /** @deprecated use `CreateAssessmentItemOutcomeDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemOutcomeDeclarationBaseType$inboundSchema;
  /** @deprecated use `CreateAssessmentItemOutcomeDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemOutcomeDeclarationBaseType$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemOutcomeDeclaration$inboundSchema: z.ZodType<
  CreateAssessmentItemOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: CreateAssessmentItemOutcomeDeclarationCardinality$inboundSchema,
  baseType: CreateAssessmentItemOutcomeDeclarationBaseType$inboundSchema
    .optional(),
});

/** @internal */
export type CreateAssessmentItemOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
};

/** @internal */
export const CreateAssessmentItemOutcomeDeclaration$outboundSchema: z.ZodType<
  CreateAssessmentItemOutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemOutcomeDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: CreateAssessmentItemOutcomeDeclarationCardinality$outboundSchema,
  baseType: CreateAssessmentItemOutcomeDeclarationBaseType$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemOutcomeDeclaration$ {
  /** @deprecated use `CreateAssessmentItemOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemOutcomeDeclaration$inboundSchema;
  /** @deprecated use `CreateAssessmentItemOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemOutcomeDeclaration$outboundSchema;
  /** @deprecated use `CreateAssessmentItemOutcomeDeclaration$Outbound` instead. */
  export type Outbound = CreateAssessmentItemOutcomeDeclaration$Outbound;
}

export function createAssessmentItemOutcomeDeclarationToJSON(
  createAssessmentItemOutcomeDeclaration:
    CreateAssessmentItemOutcomeDeclaration,
): string {
  return JSON.stringify(
    CreateAssessmentItemOutcomeDeclaration$outboundSchema.parse(
      createAssessmentItemOutcomeDeclaration,
    ),
  );
}

export function createAssessmentItemOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemOutcomeDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemOutcomeDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentItemTemplateType
> = z.nativeEnum(CreateAssessmentItemTemplateType);

/** @internal */
export const CreateAssessmentItemTemplateType$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssessmentItemTemplateType
> = CreateAssessmentItemTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemTemplateType$ {
  /** @deprecated use `CreateAssessmentItemTemplateType$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemTemplateType$inboundSchema;
  /** @deprecated use `CreateAssessmentItemTemplateType$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentItemTemplateType$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemInlineFeedback$inboundSchema: z.ZodType<
  CreateAssessmentItemInlineFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/** @internal */
export type CreateAssessmentItemInlineFeedback$Outbound = {
  outcomeIdentifier: string;
  variableIdentifier: string;
};

/** @internal */
export const CreateAssessmentItemInlineFeedback$outboundSchema: z.ZodType<
  CreateAssessmentItemInlineFeedback$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemInlineFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemInlineFeedback$ {
  /** @deprecated use `CreateAssessmentItemInlineFeedback$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemInlineFeedback$inboundSchema;
  /** @deprecated use `CreateAssessmentItemInlineFeedback$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemInlineFeedback$outboundSchema;
  /** @deprecated use `CreateAssessmentItemInlineFeedback$Outbound` instead. */
  export type Outbound = CreateAssessmentItemInlineFeedback$Outbound;
}

export function createAssessmentItemInlineFeedbackToJSON(
  createAssessmentItemInlineFeedback: CreateAssessmentItemInlineFeedback,
): string {
  return JSON.stringify(
    CreateAssessmentItemInlineFeedback$outboundSchema.parse(
      createAssessmentItemInlineFeedback,
    ),
  );
}

export function createAssessmentItemInlineFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemInlineFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemInlineFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemInlineFeedback' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemResponseProcessing$inboundSchema: z.ZodType<
  CreateAssessmentItemResponseProcessing,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateType: CreateAssessmentItemTemplateType$inboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => CreateAssessmentItemInlineFeedback$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateAssessmentItemResponseProcessing$Outbound = {
  templateType: string;
  responseDeclarationIdentifier: string;
  outcomeIdentifier: string;
  correctResponseIdentifier: string;
  incorrectResponseIdentifier: string;
  inlineFeedback?: CreateAssessmentItemInlineFeedback$Outbound | undefined;
};

/** @internal */
export const CreateAssessmentItemResponseProcessing$outboundSchema: z.ZodType<
  CreateAssessmentItemResponseProcessing$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemResponseProcessing
> = z.object({
  templateType: CreateAssessmentItemTemplateType$outboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() =>
    CreateAssessmentItemInlineFeedback$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemResponseProcessing$ {
  /** @deprecated use `CreateAssessmentItemResponseProcessing$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemResponseProcessing$inboundSchema;
  /** @deprecated use `CreateAssessmentItemResponseProcessing$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemResponseProcessing$outboundSchema;
  /** @deprecated use `CreateAssessmentItemResponseProcessing$Outbound` instead. */
  export type Outbound = CreateAssessmentItemResponseProcessing$Outbound;
}

export function createAssessmentItemResponseProcessingToJSON(
  createAssessmentItemResponseProcessing:
    CreateAssessmentItemResponseProcessing,
): string {
  return JSON.stringify(
    CreateAssessmentItemResponseProcessing$outboundSchema.parse(
      createAssessmentItemResponseProcessing,
    ),
  );
}

export function createAssessmentItemResponseProcessingFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemResponseProcessing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemResponseProcessing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemResponseProcessing' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemAttributes$inboundSchema: z.ZodType<
  CreateAssessmentItemAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  "time-dependent": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "time-dependent": "timeDependent",
  });
});

/** @internal */
export type CreateAssessmentItemAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  adaptive: string;
  "time-dependent": string;
};

/** @internal */
export const CreateAssessmentItemAttributes$outboundSchema: z.ZodType<
  CreateAssessmentItemAttributes$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  timeDependent: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    timeDependent: "time-dependent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemAttributes$ {
  /** @deprecated use `CreateAssessmentItemAttributes$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentItemAttributes$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentItemAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentItemAttributes$Outbound` instead. */
  export type Outbound = CreateAssessmentItemAttributes$Outbound;
}

export function createAssessmentItemAttributesToJSON(
  createAssessmentItemAttributes: CreateAssessmentItemAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentItemAttributes$outboundSchema.parse(
      createAssessmentItemAttributes,
    ),
  );
}

export function createAssessmentItemAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentItemAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiResponseDeclarationAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiResponseDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type CreateAssessmentItemQtiResponseDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const CreateAssessmentItemQtiResponseDeclarationAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiResponseDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentItemQtiResponseDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiResponseDeclarationAttributes$ {
  /** @deprecated use `CreateAssessmentItemQtiResponseDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiResponseDeclarationAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiResponseDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiResponseDeclarationAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiResponseDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentItemQtiResponseDeclarationAttributes$Outbound;
}

export function createAssessmentItemQtiResponseDeclarationAttributesToJSON(
  createAssessmentItemQtiResponseDeclarationAttributes:
    CreateAssessmentItemQtiResponseDeclarationAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiResponseDeclarationAttributes$outboundSchema.parse(
      createAssessmentItemQtiResponseDeclarationAttributes,
    ),
  );
}

export function createAssessmentItemQtiResponseDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentItemQtiResponseDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiResponseDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentItemQtiResponseDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiCorrectResponse$inboundSchema: z.ZodType<
  CreateAssessmentItemQtiCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type CreateAssessmentItemQtiCorrectResponse$Outbound = {
  "qti-value": Array<string>;
};

/** @internal */
export const CreateAssessmentItemQtiCorrectResponse$outboundSchema: z.ZodType<
  CreateAssessmentItemQtiCorrectResponse$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemQtiCorrectResponse
> = z.object({
  qtiValue: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiCorrectResponse$ {
  /** @deprecated use `CreateAssessmentItemQtiCorrectResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiCorrectResponse$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiCorrectResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiCorrectResponse$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiCorrectResponse$Outbound` instead. */
  export type Outbound = CreateAssessmentItemQtiCorrectResponse$Outbound;
}

export function createAssessmentItemQtiCorrectResponseToJSON(
  createAssessmentItemQtiCorrectResponse:
    CreateAssessmentItemQtiCorrectResponse,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiCorrectResponse$outboundSchema.parse(
      createAssessmentItemQtiCorrectResponse,
    ),
  );
}

export function createAssessmentItemQtiCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemQtiCorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiCorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemQtiCorrectResponse' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiResponseDeclaration$inboundSchema:
  z.ZodType<CreateAssessmentItemQtiResponseDeclaration, z.ZodTypeDef, unknown> =
    z.object({
      _attributes: z.lazy(() =>
        CreateAssessmentItemQtiResponseDeclarationAttributes$inboundSchema
      ),
      "qti-correct-response": z.lazy(() =>
        CreateAssessmentItemQtiCorrectResponse$inboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        "_attributes": "attributes",
        "qti-correct-response": "qtiCorrectResponse",
      });
    });

/** @internal */
export type CreateAssessmentItemQtiResponseDeclaration$Outbound = {
  _attributes: CreateAssessmentItemQtiResponseDeclarationAttributes$Outbound;
  "qti-correct-response": CreateAssessmentItemQtiCorrectResponse$Outbound;
};

/** @internal */
export const CreateAssessmentItemQtiResponseDeclaration$outboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiResponseDeclaration$Outbound,
    z.ZodTypeDef,
    CreateAssessmentItemQtiResponseDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentItemQtiResponseDeclarationAttributes$outboundSchema
    ),
    qtiCorrectResponse: z.lazy(() =>
      CreateAssessmentItemQtiCorrectResponse$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiCorrectResponse: "qti-correct-response",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiResponseDeclaration$ {
  /** @deprecated use `CreateAssessmentItemQtiResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiResponseDeclaration$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiResponseDeclaration$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiResponseDeclaration$Outbound` instead. */
  export type Outbound = CreateAssessmentItemQtiResponseDeclaration$Outbound;
}

export function createAssessmentItemQtiResponseDeclarationToJSON(
  createAssessmentItemQtiResponseDeclaration:
    CreateAssessmentItemQtiResponseDeclaration,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiResponseDeclaration$outboundSchema.parse(
      createAssessmentItemQtiResponseDeclaration,
    ),
  );
}

export function createAssessmentItemQtiResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentItemQtiResponseDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiResponseDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentItemQtiResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type CreateAssessmentItemQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const CreateAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentItemQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `CreateAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentItemQtiOutcomeDeclarationAttributes$Outbound;
}

export function createAssessmentItemQtiOutcomeDeclarationAttributesToJSON(
  createAssessmentItemQtiOutcomeDeclarationAttributes:
    CreateAssessmentItemQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      createAssessmentItemQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function createAssessmentItemQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentItemQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentItemQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiOutcomeDeclaration$inboundSchema: z.ZodType<
  CreateAssessmentItemQtiOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    CreateAssessmentItemQtiOutcomeDeclarationAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type CreateAssessmentItemQtiOutcomeDeclaration$Outbound = {
  _attributes: CreateAssessmentItemQtiOutcomeDeclarationAttributes$Outbound;
};

/** @internal */
export const CreateAssessmentItemQtiOutcomeDeclaration$outboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiOutcomeDeclaration$Outbound,
    z.ZodTypeDef,
    CreateAssessmentItemQtiOutcomeDeclaration
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentItemQtiOutcomeDeclarationAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiOutcomeDeclaration$ {
  /** @deprecated use `CreateAssessmentItemQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = CreateAssessmentItemQtiOutcomeDeclaration$Outbound;
}

export function createAssessmentItemQtiOutcomeDeclarationToJSON(
  createAssessmentItemQtiOutcomeDeclaration:
    CreateAssessmentItemQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiOutcomeDeclaration$outboundSchema.parse(
      createAssessmentItemQtiOutcomeDeclaration,
    ),
  );
}

export function createAssessmentItemQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentItemQtiOutcomeDeclaration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiOutcomeDeclaration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentItemQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/** @internal */
export type CreateAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound = {
  identifier: string;
  href: string;
  title: string;
};

/** @internal */
export const CreateAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound,
    z.ZodTypeDef,
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiAssessmentStimulusRefAttributes$ {
  /** @deprecated use `CreateAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound` instead. */
  export type Outbound =
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound;
}

export function createAssessmentItemQtiAssessmentStimulusRefAttributesToJSON(
  createAssessmentItemQtiAssessmentStimulusRefAttributes:
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema.parse(
      createAssessmentItemQtiAssessmentStimulusRefAttributes,
    ),
  );
}

export function createAssessmentItemQtiAssessmentStimulusRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentItemQtiAssessmentStimulusRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemQtiAssessmentStimulusRefAttributes' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiAssessmentStimulusRef$inboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiAssessmentStimulusRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      CreateAssessmentItemQtiAssessmentStimulusRefAttributes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type CreateAssessmentItemQtiAssessmentStimulusRef$Outbound = {
  _attributes: CreateAssessmentItemQtiAssessmentStimulusRefAttributes$Outbound;
};

/** @internal */
export const CreateAssessmentItemQtiAssessmentStimulusRef$outboundSchema:
  z.ZodType<
    CreateAssessmentItemQtiAssessmentStimulusRef$Outbound,
    z.ZodTypeDef,
    CreateAssessmentItemQtiAssessmentStimulusRef
  > = z.object({
    attributes: z.lazy(() =>
      CreateAssessmentItemQtiAssessmentStimulusRefAttributes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiAssessmentStimulusRef$ {
  /** @deprecated use `CreateAssessmentItemQtiAssessmentStimulusRef$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiAssessmentStimulusRef$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiAssessmentStimulusRef$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiAssessmentStimulusRef$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiAssessmentStimulusRef$Outbound` instead. */
  export type Outbound = CreateAssessmentItemQtiAssessmentStimulusRef$Outbound;
}

export function createAssessmentItemQtiAssessmentStimulusRefToJSON(
  createAssessmentItemQtiAssessmentStimulusRef:
    CreateAssessmentItemQtiAssessmentStimulusRef,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiAssessmentStimulusRef$outboundSchema.parse(
      createAssessmentItemQtiAssessmentStimulusRef,
    ),
  );
}

export function createAssessmentItemQtiAssessmentStimulusRefFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssessmentItemQtiAssessmentStimulusRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiAssessmentStimulusRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssessmentItemQtiAssessmentStimulusRef' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemQtiAssessmentItem$inboundSchema: z.ZodType<
  CreateAssessmentItemQtiAssessmentItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => CreateAssessmentItemAttributes$inboundSchema),
  "qti-response-declaration": z.array(
    z.lazy(() => CreateAssessmentItemQtiResponseDeclaration$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => CreateAssessmentItemQtiOutcomeDeclaration$inboundSchema),
  ),
  "qti-assessment-stimulus-ref": z.lazy(() =>
    CreateAssessmentItemQtiAssessmentStimulusRef$inboundSchema
  ),
  "qti-item-body": z.any().optional(),
  "qti-response-processing": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-response-declaration": "qtiResponseDeclaration",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-assessment-stimulus-ref": "qtiAssessmentStimulusRef",
    "qti-item-body": "qtiItemBody",
    "qti-response-processing": "qtiResponseProcessing",
  });
});

/** @internal */
export type CreateAssessmentItemQtiAssessmentItem$Outbound = {
  _attributes: CreateAssessmentItemAttributes$Outbound;
  "qti-response-declaration": Array<
    CreateAssessmentItemQtiResponseDeclaration$Outbound
  >;
  "qti-outcome-declaration": Array<
    CreateAssessmentItemQtiOutcomeDeclaration$Outbound
  >;
  "qti-assessment-stimulus-ref":
    CreateAssessmentItemQtiAssessmentStimulusRef$Outbound;
  "qti-item-body"?: any | undefined;
  "qti-response-processing"?: any | undefined;
};

/** @internal */
export const CreateAssessmentItemQtiAssessmentItem$outboundSchema: z.ZodType<
  CreateAssessmentItemQtiAssessmentItem$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemQtiAssessmentItem
> = z.object({
  attributes: z.lazy(() => CreateAssessmentItemAttributes$outboundSchema),
  qtiResponseDeclaration: z.array(
    z.lazy(() => CreateAssessmentItemQtiResponseDeclaration$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => CreateAssessmentItemQtiOutcomeDeclaration$outboundSchema),
  ),
  qtiAssessmentStimulusRef: z.lazy(() =>
    CreateAssessmentItemQtiAssessmentStimulusRef$outboundSchema
  ),
  qtiItemBody: z.any().optional(),
  qtiResponseProcessing: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiResponseDeclaration: "qti-response-declaration",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiAssessmentStimulusRef: "qti-assessment-stimulus-ref",
    qtiItemBody: "qti-item-body",
    qtiResponseProcessing: "qti-response-processing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemQtiAssessmentItem$ {
  /** @deprecated use `CreateAssessmentItemQtiAssessmentItem$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemQtiAssessmentItem$inboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiAssessmentItem$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemQtiAssessmentItem$outboundSchema;
  /** @deprecated use `CreateAssessmentItemQtiAssessmentItem$Outbound` instead. */
  export type Outbound = CreateAssessmentItemQtiAssessmentItem$Outbound;
}

export function createAssessmentItemQtiAssessmentItemToJSON(
  createAssessmentItemQtiAssessmentItem: CreateAssessmentItemQtiAssessmentItem,
): string {
  return JSON.stringify(
    CreateAssessmentItemQtiAssessmentItem$outboundSchema.parse(
      createAssessmentItemQtiAssessmentItem,
    ),
  );
}

export function createAssessmentItemQtiAssessmentItemFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemQtiAssessmentItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemQtiAssessmentItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemQtiAssessmentItem' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemContent$inboundSchema: z.ZodType<
  CreateAssessmentItemContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-item": z.lazy(() =>
    CreateAssessmentItemQtiAssessmentItem$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-item": "qtiAssessmentItem",
  });
});

/** @internal */
export type CreateAssessmentItemContent$Outbound = {
  "qti-assessment-item": CreateAssessmentItemQtiAssessmentItem$Outbound;
};

/** @internal */
export const CreateAssessmentItemContent$outboundSchema: z.ZodType<
  CreateAssessmentItemContent$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemContent
> = z.object({
  qtiAssessmentItem: z.lazy(() =>
    CreateAssessmentItemQtiAssessmentItem$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentItem: "qti-assessment-item",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemContent$ {
  /** @deprecated use `CreateAssessmentItemContent$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemContent$inboundSchema;
  /** @deprecated use `CreateAssessmentItemContent$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentItemContent$outboundSchema;
  /** @deprecated use `CreateAssessmentItemContent$Outbound` instead. */
  export type Outbound = CreateAssessmentItemContent$Outbound;
}

export function createAssessmentItemContentToJSON(
  createAssessmentItemContent: CreateAssessmentItemContent,
): string {
  return JSON.stringify(
    CreateAssessmentItemContent$outboundSchema.parse(
      createAssessmentItemContent,
    ),
  );
}

export function createAssessmentItemContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentItemContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemContent' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemModalFeedbackShowHide$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemModalFeedbackShowHide> = z
    .nativeEnum(CreateAssessmentItemModalFeedbackShowHide);

/** @internal */
export const CreateAssessmentItemModalFeedbackShowHide$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemModalFeedbackShowHide> =
    CreateAssessmentItemModalFeedbackShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemModalFeedbackShowHide$ {
  /** @deprecated use `CreateAssessmentItemModalFeedbackShowHide$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemModalFeedbackShowHide$inboundSchema;
  /** @deprecated use `CreateAssessmentItemModalFeedbackShowHide$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemModalFeedbackShowHide$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemModalFeedback$inboundSchema: z.ZodType<
  CreateAssessmentItemModalFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: CreateAssessmentItemModalFeedbackShowHide$inboundSchema,
  content: z.string(),
  title: z.string(),
});

/** @internal */
export type CreateAssessmentItemModalFeedback$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  title: string;
};

/** @internal */
export const CreateAssessmentItemModalFeedback$outboundSchema: z.ZodType<
  CreateAssessmentItemModalFeedback$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemModalFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: CreateAssessmentItemModalFeedbackShowHide$outboundSchema,
  content: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemModalFeedback$ {
  /** @deprecated use `CreateAssessmentItemModalFeedback$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemModalFeedback$inboundSchema;
  /** @deprecated use `CreateAssessmentItemModalFeedback$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemModalFeedback$outboundSchema;
  /** @deprecated use `CreateAssessmentItemModalFeedback$Outbound` instead. */
  export type Outbound = CreateAssessmentItemModalFeedback$Outbound;
}

export function createAssessmentItemModalFeedbackToJSON(
  createAssessmentItemModalFeedback: CreateAssessmentItemModalFeedback,
): string {
  return JSON.stringify(
    CreateAssessmentItemModalFeedback$outboundSchema.parse(
      createAssessmentItemModalFeedback,
    ),
  );
}

export function createAssessmentItemModalFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemModalFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentItemModalFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemModalFeedback' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemFeedbackInlineShowHide$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemFeedbackInlineShowHide> = z
    .nativeEnum(CreateAssessmentItemFeedbackInlineShowHide);

/** @internal */
export const CreateAssessmentItemFeedbackInlineShowHide$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemFeedbackInlineShowHide> =
    CreateAssessmentItemFeedbackInlineShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemFeedbackInlineShowHide$ {
  /** @deprecated use `CreateAssessmentItemFeedbackInlineShowHide$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemFeedbackInlineShowHide$inboundSchema;
  /** @deprecated use `CreateAssessmentItemFeedbackInlineShowHide$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemFeedbackInlineShowHide$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemFeedbackInline$inboundSchema: z.ZodType<
  CreateAssessmentItemFeedbackInline,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: CreateAssessmentItemFeedbackInlineShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type CreateAssessmentItemFeedbackInline$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const CreateAssessmentItemFeedbackInline$outboundSchema: z.ZodType<
  CreateAssessmentItemFeedbackInline$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemFeedbackInline
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: CreateAssessmentItemFeedbackInlineShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemFeedbackInline$ {
  /** @deprecated use `CreateAssessmentItemFeedbackInline$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemFeedbackInline$inboundSchema;
  /** @deprecated use `CreateAssessmentItemFeedbackInline$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemFeedbackInline$outboundSchema;
  /** @deprecated use `CreateAssessmentItemFeedbackInline$Outbound` instead. */
  export type Outbound = CreateAssessmentItemFeedbackInline$Outbound;
}

export function createAssessmentItemFeedbackInlineToJSON(
  createAssessmentItemFeedbackInline: CreateAssessmentItemFeedbackInline,
): string {
  return JSON.stringify(
    CreateAssessmentItemFeedbackInline$outboundSchema.parse(
      createAssessmentItemFeedbackInline,
    ),
  );
}

export function createAssessmentItemFeedbackInlineFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemFeedbackInline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssessmentItemFeedbackInline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemFeedbackInline' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemFeedbackBlockShowHide$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemFeedbackBlockShowHide> = z
    .nativeEnum(CreateAssessmentItemFeedbackBlockShowHide);

/** @internal */
export const CreateAssessmentItemFeedbackBlockShowHide$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssessmentItemFeedbackBlockShowHide> =
    CreateAssessmentItemFeedbackBlockShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemFeedbackBlockShowHide$ {
  /** @deprecated use `CreateAssessmentItemFeedbackBlockShowHide$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentItemFeedbackBlockShowHide$inboundSchema;
  /** @deprecated use `CreateAssessmentItemFeedbackBlockShowHide$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemFeedbackBlockShowHide$outboundSchema;
}

/** @internal */
export const CreateAssessmentItemFeedbackBlock$inboundSchema: z.ZodType<
  CreateAssessmentItemFeedbackBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: CreateAssessmentItemFeedbackBlockShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type CreateAssessmentItemFeedbackBlock$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const CreateAssessmentItemFeedbackBlock$outboundSchema: z.ZodType<
  CreateAssessmentItemFeedbackBlock$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemFeedbackBlock
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: CreateAssessmentItemFeedbackBlockShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemFeedbackBlock$ {
  /** @deprecated use `CreateAssessmentItemFeedbackBlock$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemFeedbackBlock$inboundSchema;
  /** @deprecated use `CreateAssessmentItemFeedbackBlock$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentItemFeedbackBlock$outboundSchema;
  /** @deprecated use `CreateAssessmentItemFeedbackBlock$Outbound` instead. */
  export type Outbound = CreateAssessmentItemFeedbackBlock$Outbound;
}

export function createAssessmentItemFeedbackBlockToJSON(
  createAssessmentItemFeedbackBlock: CreateAssessmentItemFeedbackBlock,
): string {
  return JSON.stringify(
    CreateAssessmentItemFeedbackBlock$outboundSchema.parse(
      createAssessmentItemFeedbackBlock,
    ),
  );
}

export function createAssessmentItemFeedbackBlockFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemFeedbackBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentItemFeedbackBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemFeedbackBlock' from JSON`,
  );
}

/** @internal */
export const CreateAssessmentItemResponse$inboundSchema: z.ZodType<
  CreateAssessmentItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: CreateAssessmentItemType$inboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => CreateAssessmentItemResponseDeclaration$inboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => CreateAssessmentItemOutcomeDeclaration$inboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    CreateAssessmentItemResponseProcessing$inboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateAssessmentItemContent$inboundSchema),
  modalFeedback: z.array(
    z.lazy(() => CreateAssessmentItemModalFeedback$inboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => CreateAssessmentItemFeedbackInline$inboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => CreateAssessmentItemFeedbackBlock$inboundSchema),
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type CreateAssessmentItemResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  type: string;
  qtiVersion: string;
  timeDependent: boolean;
  adaptive: boolean;
  responseDeclarations?:
    | Array<CreateAssessmentItemResponseDeclaration$Outbound>
    | undefined;
  outcomeDeclarations?:
    | Array<CreateAssessmentItemOutcomeDeclaration$Outbound>
    | undefined;
  responseProcessing: CreateAssessmentItemResponseProcessing$Outbound;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: CreateAssessmentItemContent$Outbound;
  modalFeedback?: Array<CreateAssessmentItemModalFeedback$Outbound> | undefined;
  feedbackInline?:
    | Array<CreateAssessmentItemFeedbackInline$Outbound>
    | undefined;
  feedbackBlock?: Array<CreateAssessmentItemFeedbackBlock$Outbound> | undefined;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const CreateAssessmentItemResponse$outboundSchema: z.ZodType<
  CreateAssessmentItemResponse$Outbound,
  z.ZodTypeDef,
  CreateAssessmentItemResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: CreateAssessmentItemType$outboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => CreateAssessmentItemResponseDeclaration$outboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => CreateAssessmentItemOutcomeDeclaration$outboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    CreateAssessmentItemResponseProcessing$outboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => CreateAssessmentItemContent$outboundSchema),
  modalFeedback: z.array(
    z.lazy(() => CreateAssessmentItemModalFeedback$outboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => CreateAssessmentItemFeedbackInline$outboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => CreateAssessmentItemFeedbackBlock$outboundSchema),
  ).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentItemResponse$ {
  /** @deprecated use `CreateAssessmentItemResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentItemResponse$inboundSchema;
  /** @deprecated use `CreateAssessmentItemResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAssessmentItemResponse$outboundSchema;
  /** @deprecated use `CreateAssessmentItemResponse$Outbound` instead. */
  export type Outbound = CreateAssessmentItemResponse$Outbound;
}

export function createAssessmentItemResponseToJSON(
  createAssessmentItemResponse: CreateAssessmentItemResponse,
): string {
  return JSON.stringify(
    CreateAssessmentItemResponse$outboundSchema.parse(
      createAssessmentItemResponse,
    ),
  );
}

export function createAssessmentItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssessmentItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAssessmentItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssessmentItemResponse' from JSON`,
  );
}
