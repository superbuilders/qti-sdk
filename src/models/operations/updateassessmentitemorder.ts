/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAssessmentItemOrderItem = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
};

/**
 * Update the presentation order of assessment item references within a section. All specified items must exist in the section on the service provider.
 */
export type UpdateAssessmentItemOrderRequestBody = {
  /**
   * Array of assessment item identifiers with their updated sequence positions.
   */
  items: Array<UpdateAssessmentItemOrderItem>;
};

export type UpdateAssessmentItemOrderRequest = {
  /**
   * The unique identifier of the root assessment test
   */
  assessmentTestIdentifier: string;
  /**
   * The unique identifier of the parent test part
   */
  testPartIdentifier: string;
  /**
   * The unique identifier of the target section containing the items to reorder
   */
  identifier: string;
  /**
   * Array of assessment item references in the desired order
   */
  requestBody: UpdateAssessmentItemOrderRequestBody;
};

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type UpdateAssessmentItemOrderQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type UpdateAssessmentItemOrderResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<UpdateAssessmentItemOrderQtiAssessmentItemRef>
    | undefined;
};

/** @internal */
export const UpdateAssessmentItemOrderItem$inboundSchema: z.ZodType<
  UpdateAssessmentItemOrderItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
  sequence: z.number().int().optional(),
});

/** @internal */
export type UpdateAssessmentItemOrderItem$Outbound = {
  identifier: string;
  href?: string | undefined;
  sequence?: number | undefined;
};

/** @internal */
export const UpdateAssessmentItemOrderItem$outboundSchema: z.ZodType<
  UpdateAssessmentItemOrderItem$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemOrderItem
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
  sequence: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderItem$ {
  /** @deprecated use `UpdateAssessmentItemOrderItem$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemOrderItem$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderItem$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentItemOrderItem$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderItem$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderItem$Outbound;
}

export function updateAssessmentItemOrderItemToJSON(
  updateAssessmentItemOrderItem: UpdateAssessmentItemOrderItem,
): string {
  return JSON.stringify(
    UpdateAssessmentItemOrderItem$outboundSchema.parse(
      updateAssessmentItemOrderItem,
    ),
  );
}

export function updateAssessmentItemOrderItemFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemOrderItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentItemOrderItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemOrderItem' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemOrderRequestBody$inboundSchema: z.ZodType<
  UpdateAssessmentItemOrderRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => UpdateAssessmentItemOrderItem$inboundSchema)),
});

/** @internal */
export type UpdateAssessmentItemOrderRequestBody$Outbound = {
  items: Array<UpdateAssessmentItemOrderItem$Outbound>;
};

/** @internal */
export const UpdateAssessmentItemOrderRequestBody$outboundSchema: z.ZodType<
  UpdateAssessmentItemOrderRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemOrderRequestBody
> = z.object({
  items: z.array(z.lazy(() => UpdateAssessmentItemOrderItem$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderRequestBody$ {
  /** @deprecated use `UpdateAssessmentItemOrderRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOrderRequestBody$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOrderRequestBody$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderRequestBody$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderRequestBody$Outbound;
}

export function updateAssessmentItemOrderRequestBodyToJSON(
  updateAssessmentItemOrderRequestBody: UpdateAssessmentItemOrderRequestBody,
): string {
  return JSON.stringify(
    UpdateAssessmentItemOrderRequestBody$outboundSchema.parse(
      updateAssessmentItemOrderRequestBody,
    ),
  );
}

export function updateAssessmentItemOrderRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemOrderRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemOrderRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemOrderRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemOrderRequest$inboundSchema: z.ZodType<
  UpdateAssessmentItemOrderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
  RequestBody: z.lazy(() => UpdateAssessmentItemOrderRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAssessmentItemOrderRequest$Outbound = {
  assessmentTestIdentifier: string;
  testPartIdentifier: string;
  identifier: string;
  RequestBody: UpdateAssessmentItemOrderRequestBody$Outbound;
};

/** @internal */
export const UpdateAssessmentItemOrderRequest$outboundSchema: z.ZodType<
  UpdateAssessmentItemOrderRequest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemOrderRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
  requestBody: z.lazy(() =>
    UpdateAssessmentItemOrderRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderRequest$ {
  /** @deprecated use `UpdateAssessmentItemOrderRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemOrderRequest$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentItemOrderRequest$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderRequest$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderRequest$Outbound;
}

export function updateAssessmentItemOrderRequestToJSON(
  updateAssessmentItemOrderRequest: UpdateAssessmentItemOrderRequest,
): string {
  return JSON.stringify(
    UpdateAssessmentItemOrderRequest$outboundSchema.parse(
      updateAssessmentItemOrderRequest,
    ),
  );
}

export function updateAssessmentItemOrderRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemOrderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentItemOrderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemOrderRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemOrderQtiAssessmentItemRef$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemOrderQtiAssessmentItemRef,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/** @internal */
export type UpdateAssessmentItemOrderQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const UpdateAssessmentItemOrderQtiAssessmentItemRef$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemOrderQtiAssessmentItemRef$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemOrderQtiAssessmentItemRef
  > = z.object({
    identifier: z.string(),
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderQtiAssessmentItemRef$ {
  /** @deprecated use `UpdateAssessmentItemOrderQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOrderQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOrderQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderQtiAssessmentItemRef$Outbound;
}

export function updateAssessmentItemOrderQtiAssessmentItemRefToJSON(
  updateAssessmentItemOrderQtiAssessmentItemRef:
    UpdateAssessmentItemOrderQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    UpdateAssessmentItemOrderQtiAssessmentItemRef$outboundSchema.parse(
      updateAssessmentItemOrderQtiAssessmentItemRef,
    ),
  );
}

export function updateAssessmentItemOrderQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemOrderQtiAssessmentItemRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemOrderQtiAssessmentItemRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemOrderQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemOrderResponse$inboundSchema: z.ZodType<
  UpdateAssessmentItemOrderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => UpdateAssessmentItemOrderQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type UpdateAssessmentItemOrderResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<UpdateAssessmentItemOrderQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const UpdateAssessmentItemOrderResponse$outboundSchema: z.ZodType<
  UpdateAssessmentItemOrderResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemOrderResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => UpdateAssessmentItemOrderQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderResponse$ {
  /** @deprecated use `UpdateAssessmentItemOrderResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemOrderResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOrderResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderResponse$Outbound;
}

export function updateAssessmentItemOrderResponseToJSON(
  updateAssessmentItemOrderResponse: UpdateAssessmentItemOrderResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemOrderResponse$outboundSchema.parse(
      updateAssessmentItemOrderResponse,
    ),
  );
}

export function updateAssessmentItemOrderResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemOrderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentItemOrderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemOrderResponse' from JSON`,
  );
}
