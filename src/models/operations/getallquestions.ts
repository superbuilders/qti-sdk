/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllQuestionsRequest = {
  /**
   * The unique identifier of the assessment test
   */
  identifier: string;
};

/**
 * Reference information about where this assessment item is located in the test structure
 */
export type Reference = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URL reference to the assessment item
   */
  href: string;
  /**
   * Test part identifier where this item is located
   */
  testPart: string;
  /**
   * Section identifier where this item is located
   */
  section: string;
};

/**
 * Assessment item interaction types that are supported by the service provider.
 */
export const GetAllQuestionsType = {
  Choice: "choice",
  TextEntry: "text-entry",
  ExtendedText: "extended-text",
  InlineChoice: "inline-choice",
  Match: "match",
  Order: "order",
  Associate: "associate",
  SelectPoint: "select-point",
  GraphicOrder: "graphic-order",
  GraphicAssociate: "graphic-associate",
  GraphicGapMatch: "graphic-gap-match",
  Hotspot: "hotspot",
  Hottext: "hottext",
  Slider: "slider",
  Drawing: "drawing",
  Media: "media",
  Upload: "upload",
} as const;
/**
 * Assessment item interaction types that are supported by the service provider.
 */
export type GetAllQuestionsType = ClosedEnum<typeof GetAllQuestionsType>;

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const GetAllQuestionsResponseDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type GetAllQuestionsResponseDeclarationCardinality = ClosedEnum<
  typeof GetAllQuestionsResponseDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const GetAllQuestionsResponseDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type GetAllQuestionsResponseDeclarationBaseType = ClosedEnum<
  typeof GetAllQuestionsResponseDeclarationBaseType
>;

/**
 * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
 */
export type GetAllQuestionsCorrectResponse = {
  value: Array<string>;
};

export type GetAllQuestionsResponseDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: GetAllQuestionsResponseDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: GetAllQuestionsResponseDeclarationBaseType | undefined;
  /**
   * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
   */
  correctResponse: GetAllQuestionsCorrectResponse;
};

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const GetAllQuestionsOutcomeDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type GetAllQuestionsOutcomeDeclarationCardinality = ClosedEnum<
  typeof GetAllQuestionsOutcomeDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const GetAllQuestionsOutcomeDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type GetAllQuestionsOutcomeDeclarationBaseType = ClosedEnum<
  typeof GetAllQuestionsOutcomeDeclarationBaseType
>;

export type GetAllQuestionsOutcomeDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: GetAllQuestionsOutcomeDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: GetAllQuestionsOutcomeDeclarationBaseType | undefined;
};

/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export const GetAllQuestionsTemplateType = {
  MatchCorrect: "match_correct",
  MapResponse: "map_response",
} as const;
/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export type GetAllQuestionsTemplateType = ClosedEnum<
  typeof GetAllQuestionsTemplateType
>;

/**
 * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
 */
export type GetAllQuestionsInlineFeedback = {
  /**
   * Identifier of the outcome variable to be set with the inline feedback value.
   */
  outcomeIdentifier: string;
  /**
   * Identifier of the variable whose value will be assigned to the outcome variable during response processing.
   */
  variableIdentifier: string;
};

/**
 * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
 */
export type GetAllQuestionsResponseProcessing = {
  /**
   * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
   */
  templateType: GetAllQuestionsTemplateType;
  /**
   * Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
   */
  responseDeclarationIdentifier: string;
  /**
   * Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
   */
  outcomeIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
   */
  correctResponseIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
   */
  incorrectResponseIdentifier: string;
  /**
   * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
   */
  inlineFeedback?: GetAllQuestionsInlineFeedback | undefined;
};

export type GetAllQuestionsAttributes = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  adaptive: string;
  timeDependent: string;
};

export type GetAllQuestionsQtiResponseDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type GetAllQuestionsQtiCorrectResponse = {
  qtiValue: Array<string>;
};

export type GetAllQuestionsQtiResponseDeclaration = {
  attributes: GetAllQuestionsQtiResponseDeclarationAttributes;
  qtiCorrectResponse: GetAllQuestionsQtiCorrectResponse;
};

export type GetAllQuestionsQtiOutcomeDeclarationAttributes = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type GetAllQuestionsQtiOutcomeDeclaration = {
  attributes: GetAllQuestionsQtiOutcomeDeclarationAttributes;
};

export type GetAllQuestionsQtiAssessmentStimulusRefAttributes = {
  identifier: string;
  href: string;
  title: string;
};

export type GetAllQuestionsQtiAssessmentStimulusRef = {
  attributes: GetAllQuestionsQtiAssessmentStimulusRefAttributes;
};

export type GetAllQuestionsQtiAssessmentItem = {
  attributes: GetAllQuestionsAttributes;
  qtiResponseDeclaration: Array<GetAllQuestionsQtiResponseDeclaration>;
  qtiOutcomeDeclaration: Array<GetAllQuestionsQtiOutcomeDeclaration>;
  qtiAssessmentStimulusRef: GetAllQuestionsQtiAssessmentStimulusRef;
  qtiItemBody?: any | undefined;
  qtiResponseProcessing?: any | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type GetAllQuestionsContent = {
  qtiAssessmentItem: GetAllQuestionsQtiAssessmentItem;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const GetAllQuestionsModalFeedbackShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type GetAllQuestionsModalFeedbackShowHide = ClosedEnum<
  typeof GetAllQuestionsModalFeedbackShowHide
>;

export type GetAllQuestionsModalFeedback = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: GetAllQuestionsModalFeedbackShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
   */
  title: string;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const GetAllQuestionsFeedbackInlineShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type GetAllQuestionsFeedbackInlineShowHide = ClosedEnum<
  typeof GetAllQuestionsFeedbackInlineShowHide
>;

export type GetAllQuestionsFeedbackInline = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: GetAllQuestionsFeedbackInlineShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const GetAllQuestionsFeedbackBlockShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type GetAllQuestionsFeedbackBlockShowHide = ClosedEnum<
  typeof GetAllQuestionsFeedbackBlockShowHide
>;

export type GetAllQuestionsFeedbackBlock = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: GetAllQuestionsFeedbackBlockShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

export type QuestionQuestion = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Assessment item interaction types that are supported by the service provider.
   */
  type: GetAllQuestionsType;
  /**
   * QTI version of the assessment item
   */
  qtiVersion?: string | undefined;
  /**
   * Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
   */
  timeDependent?: boolean | undefined;
  /**
   * Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
   */
  adaptive?: boolean | undefined;
  responseDeclarations?: Array<GetAllQuestionsResponseDeclaration> | undefined;
  outcomeDeclarations?: Array<GetAllQuestionsOutcomeDeclaration> | undefined;
  /**
   * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
   */
  responseProcessing: GetAllQuestionsResponseProcessing;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: GetAllQuestionsContent;
  /**
   * Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
   */
  modalFeedback?: Array<GetAllQuestionsModalFeedback> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackInline?: Array<GetAllQuestionsFeedbackInline> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackBlock?: Array<GetAllQuestionsFeedbackBlock> | undefined;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

export type Question = {
  /**
   * Reference information about where this assessment item is located in the test structure
   */
  reference: Reference;
  question: QuestionQuestion;
};

/**
 * All questions from the assessment test with their complete data and reference context
 */
export type GetAllQuestionsResponse = {
  /**
   * Identifier of the assessment test
   */
  assessmentTest: string;
  /**
   * Title of the assessment test
   */
  title: string;
  /**
   * Total number of questions in the assessment test
   */
  totalQuestions: number;
  /**
   * Array of questions with their reference information and complete item data
   */
  questions: Array<Question>;
};

/** @internal */
export const GetAllQuestionsRequest$inboundSchema: z.ZodType<
  GetAllQuestionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
});

/** @internal */
export type GetAllQuestionsRequest$Outbound = {
  identifier: string;
};

/** @internal */
export const GetAllQuestionsRequest$outboundSchema: z.ZodType<
  GetAllQuestionsRequest$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsRequest
> = z.object({
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsRequest$ {
  /** @deprecated use `GetAllQuestionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsRequest$inboundSchema;
  /** @deprecated use `GetAllQuestionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsRequest$outboundSchema;
  /** @deprecated use `GetAllQuestionsRequest$Outbound` instead. */
  export type Outbound = GetAllQuestionsRequest$Outbound;
}

export function getAllQuestionsRequestToJSON(
  getAllQuestionsRequest: GetAllQuestionsRequest,
): string {
  return JSON.stringify(
    GetAllQuestionsRequest$outboundSchema.parse(getAllQuestionsRequest),
  );
}

export function getAllQuestionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsRequest' from JSON`,
  );
}

/** @internal */
export const Reference$inboundSchema: z.ZodType<
  Reference,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string(),
  testPart: z.string(),
  section: z.string(),
});

/** @internal */
export type Reference$Outbound = {
  identifier: string;
  href: string;
  testPart: string;
  section: string;
};

/** @internal */
export const Reference$outboundSchema: z.ZodType<
  Reference$Outbound,
  z.ZodTypeDef,
  Reference
> = z.object({
  identifier: z.string(),
  href: z.string(),
  testPart: z.string(),
  section: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reference$ {
  /** @deprecated use `Reference$inboundSchema` instead. */
  export const inboundSchema = Reference$inboundSchema;
  /** @deprecated use `Reference$outboundSchema` instead. */
  export const outboundSchema = Reference$outboundSchema;
  /** @deprecated use `Reference$Outbound` instead. */
  export type Outbound = Reference$Outbound;
}

export function referenceToJSON(reference: Reference): string {
  return JSON.stringify(Reference$outboundSchema.parse(reference));
}

export function referenceFromJSON(
  jsonString: string,
): SafeParseResult<Reference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reference' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllQuestionsType
> = z.nativeEnum(GetAllQuestionsType);

/** @internal */
export const GetAllQuestionsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllQuestionsType
> = GetAllQuestionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsType$ {
  /** @deprecated use `GetAllQuestionsType$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsType$inboundSchema;
  /** @deprecated use `GetAllQuestionsType$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsType$outboundSchema;
}

/** @internal */
export const GetAllQuestionsResponseDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsResponseDeclarationCardinality> = z
    .nativeEnum(GetAllQuestionsResponseDeclarationCardinality);

/** @internal */
export const GetAllQuestionsResponseDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsResponseDeclarationCardinality> =
    GetAllQuestionsResponseDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsResponseDeclarationCardinality$ {
  /** @deprecated use `GetAllQuestionsResponseDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsResponseDeclarationCardinality$inboundSchema;
  /** @deprecated use `GetAllQuestionsResponseDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsResponseDeclarationCardinality$outboundSchema;
}

/** @internal */
export const GetAllQuestionsResponseDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsResponseDeclarationBaseType> = z
    .nativeEnum(GetAllQuestionsResponseDeclarationBaseType);

/** @internal */
export const GetAllQuestionsResponseDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsResponseDeclarationBaseType> =
    GetAllQuestionsResponseDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsResponseDeclarationBaseType$ {
  /** @deprecated use `GetAllQuestionsResponseDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsResponseDeclarationBaseType$inboundSchema;
  /** @deprecated use `GetAllQuestionsResponseDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsResponseDeclarationBaseType$outboundSchema;
}

/** @internal */
export const GetAllQuestionsCorrectResponse$inboundSchema: z.ZodType<
  GetAllQuestionsCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.array(z.string()),
});

/** @internal */
export type GetAllQuestionsCorrectResponse$Outbound = {
  value: Array<string>;
};

/** @internal */
export const GetAllQuestionsCorrectResponse$outboundSchema: z.ZodType<
  GetAllQuestionsCorrectResponse$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsCorrectResponse
> = z.object({
  value: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsCorrectResponse$ {
  /** @deprecated use `GetAllQuestionsCorrectResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsCorrectResponse$inboundSchema;
  /** @deprecated use `GetAllQuestionsCorrectResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsCorrectResponse$outboundSchema;
  /** @deprecated use `GetAllQuestionsCorrectResponse$Outbound` instead. */
  export type Outbound = GetAllQuestionsCorrectResponse$Outbound;
}

export function getAllQuestionsCorrectResponseToJSON(
  getAllQuestionsCorrectResponse: GetAllQuestionsCorrectResponse,
): string {
  return JSON.stringify(
    GetAllQuestionsCorrectResponse$outboundSchema.parse(
      getAllQuestionsCorrectResponse,
    ),
  );
}

export function getAllQuestionsCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsCorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsCorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsCorrectResponse' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsResponseDeclaration$inboundSchema: z.ZodType<
  GetAllQuestionsResponseDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: GetAllQuestionsResponseDeclarationCardinality$inboundSchema,
  baseType: GetAllQuestionsResponseDeclarationBaseType$inboundSchema.optional(),
  correctResponse: z.lazy(() => GetAllQuestionsCorrectResponse$inboundSchema),
});

/** @internal */
export type GetAllQuestionsResponseDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
  correctResponse: GetAllQuestionsCorrectResponse$Outbound;
};

/** @internal */
export const GetAllQuestionsResponseDeclaration$outboundSchema: z.ZodType<
  GetAllQuestionsResponseDeclaration$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsResponseDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: GetAllQuestionsResponseDeclarationCardinality$outboundSchema,
  baseType: GetAllQuestionsResponseDeclarationBaseType$outboundSchema
    .optional(),
  correctResponse: z.lazy(() => GetAllQuestionsCorrectResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsResponseDeclaration$ {
  /** @deprecated use `GetAllQuestionsResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsResponseDeclaration$inboundSchema;
  /** @deprecated use `GetAllQuestionsResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsResponseDeclaration$outboundSchema;
  /** @deprecated use `GetAllQuestionsResponseDeclaration$Outbound` instead. */
  export type Outbound = GetAllQuestionsResponseDeclaration$Outbound;
}

export function getAllQuestionsResponseDeclarationToJSON(
  getAllQuestionsResponseDeclaration: GetAllQuestionsResponseDeclaration,
): string {
  return JSON.stringify(
    GetAllQuestionsResponseDeclaration$outboundSchema.parse(
      getAllQuestionsResponseDeclaration,
    ),
  );
}

export function getAllQuestionsResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsResponseDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllQuestionsResponseDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsOutcomeDeclarationCardinality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsOutcomeDeclarationCardinality> = z
    .nativeEnum(GetAllQuestionsOutcomeDeclarationCardinality);

/** @internal */
export const GetAllQuestionsOutcomeDeclarationCardinality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsOutcomeDeclarationCardinality> =
    GetAllQuestionsOutcomeDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsOutcomeDeclarationCardinality$ {
  /** @deprecated use `GetAllQuestionsOutcomeDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsOutcomeDeclarationCardinality$inboundSchema;
  /** @deprecated use `GetAllQuestionsOutcomeDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsOutcomeDeclarationCardinality$outboundSchema;
}

/** @internal */
export const GetAllQuestionsOutcomeDeclarationBaseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsOutcomeDeclarationBaseType> = z
    .nativeEnum(GetAllQuestionsOutcomeDeclarationBaseType);

/** @internal */
export const GetAllQuestionsOutcomeDeclarationBaseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsOutcomeDeclarationBaseType> =
    GetAllQuestionsOutcomeDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsOutcomeDeclarationBaseType$ {
  /** @deprecated use `GetAllQuestionsOutcomeDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsOutcomeDeclarationBaseType$inboundSchema;
  /** @deprecated use `GetAllQuestionsOutcomeDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsOutcomeDeclarationBaseType$outboundSchema;
}

/** @internal */
export const GetAllQuestionsOutcomeDeclaration$inboundSchema: z.ZodType<
  GetAllQuestionsOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: GetAllQuestionsOutcomeDeclarationCardinality$inboundSchema,
  baseType: GetAllQuestionsOutcomeDeclarationBaseType$inboundSchema.optional(),
});

/** @internal */
export type GetAllQuestionsOutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
};

/** @internal */
export const GetAllQuestionsOutcomeDeclaration$outboundSchema: z.ZodType<
  GetAllQuestionsOutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsOutcomeDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: GetAllQuestionsOutcomeDeclarationCardinality$outboundSchema,
  baseType: GetAllQuestionsOutcomeDeclarationBaseType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsOutcomeDeclaration$ {
  /** @deprecated use `GetAllQuestionsOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsOutcomeDeclaration$inboundSchema;
  /** @deprecated use `GetAllQuestionsOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsOutcomeDeclaration$outboundSchema;
  /** @deprecated use `GetAllQuestionsOutcomeDeclaration$Outbound` instead. */
  export type Outbound = GetAllQuestionsOutcomeDeclaration$Outbound;
}

export function getAllQuestionsOutcomeDeclarationToJSON(
  getAllQuestionsOutcomeDeclaration: GetAllQuestionsOutcomeDeclaration,
): string {
  return JSON.stringify(
    GetAllQuestionsOutcomeDeclaration$outboundSchema.parse(
      getAllQuestionsOutcomeDeclaration,
    ),
  );
}

export function getAllQuestionsOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsOutcomeDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsOutcomeDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllQuestionsTemplateType
> = z.nativeEnum(GetAllQuestionsTemplateType);

/** @internal */
export const GetAllQuestionsTemplateType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllQuestionsTemplateType
> = GetAllQuestionsTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsTemplateType$ {
  /** @deprecated use `GetAllQuestionsTemplateType$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsTemplateType$inboundSchema;
  /** @deprecated use `GetAllQuestionsTemplateType$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsTemplateType$outboundSchema;
}

/** @internal */
export const GetAllQuestionsInlineFeedback$inboundSchema: z.ZodType<
  GetAllQuestionsInlineFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/** @internal */
export type GetAllQuestionsInlineFeedback$Outbound = {
  outcomeIdentifier: string;
  variableIdentifier: string;
};

/** @internal */
export const GetAllQuestionsInlineFeedback$outboundSchema: z.ZodType<
  GetAllQuestionsInlineFeedback$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsInlineFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsInlineFeedback$ {
  /** @deprecated use `GetAllQuestionsInlineFeedback$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsInlineFeedback$inboundSchema;
  /** @deprecated use `GetAllQuestionsInlineFeedback$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsInlineFeedback$outboundSchema;
  /** @deprecated use `GetAllQuestionsInlineFeedback$Outbound` instead. */
  export type Outbound = GetAllQuestionsInlineFeedback$Outbound;
}

export function getAllQuestionsInlineFeedbackToJSON(
  getAllQuestionsInlineFeedback: GetAllQuestionsInlineFeedback,
): string {
  return JSON.stringify(
    GetAllQuestionsInlineFeedback$outboundSchema.parse(
      getAllQuestionsInlineFeedback,
    ),
  );
}

export function getAllQuestionsInlineFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsInlineFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsInlineFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsInlineFeedback' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsResponseProcessing$inboundSchema: z.ZodType<
  GetAllQuestionsResponseProcessing,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateType: GetAllQuestionsTemplateType$inboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => GetAllQuestionsInlineFeedback$inboundSchema)
    .optional(),
});

/** @internal */
export type GetAllQuestionsResponseProcessing$Outbound = {
  templateType: string;
  responseDeclarationIdentifier: string;
  outcomeIdentifier: string;
  correctResponseIdentifier: string;
  incorrectResponseIdentifier: string;
  inlineFeedback?: GetAllQuestionsInlineFeedback$Outbound | undefined;
};

/** @internal */
export const GetAllQuestionsResponseProcessing$outboundSchema: z.ZodType<
  GetAllQuestionsResponseProcessing$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsResponseProcessing
> = z.object({
  templateType: GetAllQuestionsTemplateType$outboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => GetAllQuestionsInlineFeedback$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsResponseProcessing$ {
  /** @deprecated use `GetAllQuestionsResponseProcessing$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsResponseProcessing$inboundSchema;
  /** @deprecated use `GetAllQuestionsResponseProcessing$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsResponseProcessing$outboundSchema;
  /** @deprecated use `GetAllQuestionsResponseProcessing$Outbound` instead. */
  export type Outbound = GetAllQuestionsResponseProcessing$Outbound;
}

export function getAllQuestionsResponseProcessingToJSON(
  getAllQuestionsResponseProcessing: GetAllQuestionsResponseProcessing,
): string {
  return JSON.stringify(
    GetAllQuestionsResponseProcessing$outboundSchema.parse(
      getAllQuestionsResponseProcessing,
    ),
  );
}

export function getAllQuestionsResponseProcessingFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsResponseProcessing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsResponseProcessing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsResponseProcessing' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsAttributes$inboundSchema: z.ZodType<
  GetAllQuestionsAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  "time-dependent": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "time-dependent": "timeDependent",
  });
});

/** @internal */
export type GetAllQuestionsAttributes$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  adaptive: string;
  "time-dependent": string;
};

/** @internal */
export const GetAllQuestionsAttributes$outboundSchema: z.ZodType<
  GetAllQuestionsAttributes$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsAttributes
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  timeDependent: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    timeDependent: "time-dependent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsAttributes$ {
  /** @deprecated use `GetAllQuestionsAttributes$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsAttributes$inboundSchema;
  /** @deprecated use `GetAllQuestionsAttributes$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsAttributes$outboundSchema;
  /** @deprecated use `GetAllQuestionsAttributes$Outbound` instead. */
  export type Outbound = GetAllQuestionsAttributes$Outbound;
}

export function getAllQuestionsAttributesToJSON(
  getAllQuestionsAttributes: GetAllQuestionsAttributes,
): string {
  return JSON.stringify(
    GetAllQuestionsAttributes$outboundSchema.parse(getAllQuestionsAttributes),
  );
}

export function getAllQuestionsAttributesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsAttributes' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiResponseDeclarationAttributes$inboundSchema:
  z.ZodType<
    GetAllQuestionsQtiResponseDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type GetAllQuestionsQtiResponseDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const GetAllQuestionsQtiResponseDeclarationAttributes$outboundSchema:
  z.ZodType<
    GetAllQuestionsQtiResponseDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    GetAllQuestionsQtiResponseDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiResponseDeclarationAttributes$ {
  /** @deprecated use `GetAllQuestionsQtiResponseDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsQtiResponseDeclarationAttributes$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiResponseDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsQtiResponseDeclarationAttributes$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiResponseDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    GetAllQuestionsQtiResponseDeclarationAttributes$Outbound;
}

export function getAllQuestionsQtiResponseDeclarationAttributesToJSON(
  getAllQuestionsQtiResponseDeclarationAttributes:
    GetAllQuestionsQtiResponseDeclarationAttributes,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiResponseDeclarationAttributes$outboundSchema.parse(
      getAllQuestionsQtiResponseDeclarationAttributes,
    ),
  );
}

export function getAllQuestionsQtiResponseDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllQuestionsQtiResponseDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllQuestionsQtiResponseDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllQuestionsQtiResponseDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiCorrectResponse$inboundSchema: z.ZodType<
  GetAllQuestionsQtiCorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type GetAllQuestionsQtiCorrectResponse$Outbound = {
  "qti-value": Array<string>;
};

/** @internal */
export const GetAllQuestionsQtiCorrectResponse$outboundSchema: z.ZodType<
  GetAllQuestionsQtiCorrectResponse$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsQtiCorrectResponse
> = z.object({
  qtiValue: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiCorrectResponse$ {
  /** @deprecated use `GetAllQuestionsQtiCorrectResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsQtiCorrectResponse$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiCorrectResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsQtiCorrectResponse$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiCorrectResponse$Outbound` instead. */
  export type Outbound = GetAllQuestionsQtiCorrectResponse$Outbound;
}

export function getAllQuestionsQtiCorrectResponseToJSON(
  getAllQuestionsQtiCorrectResponse: GetAllQuestionsQtiCorrectResponse,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiCorrectResponse$outboundSchema.parse(
      getAllQuestionsQtiCorrectResponse,
    ),
  );
}

export function getAllQuestionsQtiCorrectResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsQtiCorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsQtiCorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsQtiCorrectResponse' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiResponseDeclaration$inboundSchema: z.ZodType<
  GetAllQuestionsQtiResponseDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    GetAllQuestionsQtiResponseDeclarationAttributes$inboundSchema
  ),
  "qti-correct-response": z.lazy(() =>
    GetAllQuestionsQtiCorrectResponse$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-correct-response": "qtiCorrectResponse",
  });
});

/** @internal */
export type GetAllQuestionsQtiResponseDeclaration$Outbound = {
  _attributes: GetAllQuestionsQtiResponseDeclarationAttributes$Outbound;
  "qti-correct-response": GetAllQuestionsQtiCorrectResponse$Outbound;
};

/** @internal */
export const GetAllQuestionsQtiResponseDeclaration$outboundSchema: z.ZodType<
  GetAllQuestionsQtiResponseDeclaration$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsQtiResponseDeclaration
> = z.object({
  attributes: z.lazy(() =>
    GetAllQuestionsQtiResponseDeclarationAttributes$outboundSchema
  ),
  qtiCorrectResponse: z.lazy(() =>
    GetAllQuestionsQtiCorrectResponse$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiCorrectResponse: "qti-correct-response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiResponseDeclaration$ {
  /** @deprecated use `GetAllQuestionsQtiResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsQtiResponseDeclaration$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsQtiResponseDeclaration$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiResponseDeclaration$Outbound` instead. */
  export type Outbound = GetAllQuestionsQtiResponseDeclaration$Outbound;
}

export function getAllQuestionsQtiResponseDeclarationToJSON(
  getAllQuestionsQtiResponseDeclaration: GetAllQuestionsQtiResponseDeclaration,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiResponseDeclaration$outboundSchema.parse(
      getAllQuestionsQtiResponseDeclaration,
    ),
  );
}

export function getAllQuestionsQtiResponseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsQtiResponseDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllQuestionsQtiResponseDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsQtiResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiOutcomeDeclarationAttributes$inboundSchema:
  z.ZodType<
    GetAllQuestionsQtiOutcomeDeclarationAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type GetAllQuestionsQtiOutcomeDeclarationAttributes$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const GetAllQuestionsQtiOutcomeDeclarationAttributes$outboundSchema:
  z.ZodType<
    GetAllQuestionsQtiOutcomeDeclarationAttributes$Outbound,
    z.ZodTypeDef,
    GetAllQuestionsQtiOutcomeDeclarationAttributes
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiOutcomeDeclarationAttributes$ {
  /** @deprecated use `GetAllQuestionsQtiOutcomeDeclarationAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsQtiOutcomeDeclarationAttributes$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiOutcomeDeclarationAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsQtiOutcomeDeclarationAttributes$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiOutcomeDeclarationAttributes$Outbound` instead. */
  export type Outbound =
    GetAllQuestionsQtiOutcomeDeclarationAttributes$Outbound;
}

export function getAllQuestionsQtiOutcomeDeclarationAttributesToJSON(
  getAllQuestionsQtiOutcomeDeclarationAttributes:
    GetAllQuestionsQtiOutcomeDeclarationAttributes,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiOutcomeDeclarationAttributes$outboundSchema.parse(
      getAllQuestionsQtiOutcomeDeclarationAttributes,
    ),
  );
}

export function getAllQuestionsQtiOutcomeDeclarationAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllQuestionsQtiOutcomeDeclarationAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllQuestionsQtiOutcomeDeclarationAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllQuestionsQtiOutcomeDeclarationAttributes' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiOutcomeDeclaration$inboundSchema: z.ZodType<
  GetAllQuestionsQtiOutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    GetAllQuestionsQtiOutcomeDeclarationAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type GetAllQuestionsQtiOutcomeDeclaration$Outbound = {
  _attributes: GetAllQuestionsQtiOutcomeDeclarationAttributes$Outbound;
};

/** @internal */
export const GetAllQuestionsQtiOutcomeDeclaration$outboundSchema: z.ZodType<
  GetAllQuestionsQtiOutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsQtiOutcomeDeclaration
> = z.object({
  attributes: z.lazy(() =>
    GetAllQuestionsQtiOutcomeDeclarationAttributes$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiOutcomeDeclaration$ {
  /** @deprecated use `GetAllQuestionsQtiOutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsQtiOutcomeDeclaration$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiOutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsQtiOutcomeDeclaration$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiOutcomeDeclaration$Outbound` instead. */
  export type Outbound = GetAllQuestionsQtiOutcomeDeclaration$Outbound;
}

export function getAllQuestionsQtiOutcomeDeclarationToJSON(
  getAllQuestionsQtiOutcomeDeclaration: GetAllQuestionsQtiOutcomeDeclaration,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiOutcomeDeclaration$outboundSchema.parse(
      getAllQuestionsQtiOutcomeDeclaration,
    ),
  );
}

export function getAllQuestionsQtiOutcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsQtiOutcomeDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllQuestionsQtiOutcomeDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsQtiOutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiAssessmentStimulusRefAttributes$inboundSchema:
  z.ZodType<
    GetAllQuestionsQtiAssessmentStimulusRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/** @internal */
export type GetAllQuestionsQtiAssessmentStimulusRefAttributes$Outbound = {
  identifier: string;
  href: string;
  title: string;
};

/** @internal */
export const GetAllQuestionsQtiAssessmentStimulusRefAttributes$outboundSchema:
  z.ZodType<
    GetAllQuestionsQtiAssessmentStimulusRefAttributes$Outbound,
    z.ZodTypeDef,
    GetAllQuestionsQtiAssessmentStimulusRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiAssessmentStimulusRefAttributes$ {
  /** @deprecated use `GetAllQuestionsQtiAssessmentStimulusRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsQtiAssessmentStimulusRefAttributes$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiAssessmentStimulusRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsQtiAssessmentStimulusRefAttributes$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiAssessmentStimulusRefAttributes$Outbound` instead. */
  export type Outbound =
    GetAllQuestionsQtiAssessmentStimulusRefAttributes$Outbound;
}

export function getAllQuestionsQtiAssessmentStimulusRefAttributesToJSON(
  getAllQuestionsQtiAssessmentStimulusRefAttributes:
    GetAllQuestionsQtiAssessmentStimulusRefAttributes,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiAssessmentStimulusRefAttributes$outboundSchema.parse(
      getAllQuestionsQtiAssessmentStimulusRefAttributes,
    ),
  );
}

export function getAllQuestionsQtiAssessmentStimulusRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllQuestionsQtiAssessmentStimulusRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllQuestionsQtiAssessmentStimulusRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllQuestionsQtiAssessmentStimulusRefAttributes' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiAssessmentStimulusRef$inboundSchema: z.ZodType<
  GetAllQuestionsQtiAssessmentStimulusRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    GetAllQuestionsQtiAssessmentStimulusRefAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type GetAllQuestionsQtiAssessmentStimulusRef$Outbound = {
  _attributes: GetAllQuestionsQtiAssessmentStimulusRefAttributes$Outbound;
};

/** @internal */
export const GetAllQuestionsQtiAssessmentStimulusRef$outboundSchema: z.ZodType<
  GetAllQuestionsQtiAssessmentStimulusRef$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsQtiAssessmentStimulusRef
> = z.object({
  attributes: z.lazy(() =>
    GetAllQuestionsQtiAssessmentStimulusRefAttributes$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiAssessmentStimulusRef$ {
  /** @deprecated use `GetAllQuestionsQtiAssessmentStimulusRef$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsQtiAssessmentStimulusRef$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiAssessmentStimulusRef$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsQtiAssessmentStimulusRef$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiAssessmentStimulusRef$Outbound` instead. */
  export type Outbound = GetAllQuestionsQtiAssessmentStimulusRef$Outbound;
}

export function getAllQuestionsQtiAssessmentStimulusRefToJSON(
  getAllQuestionsQtiAssessmentStimulusRef:
    GetAllQuestionsQtiAssessmentStimulusRef,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiAssessmentStimulusRef$outboundSchema.parse(
      getAllQuestionsQtiAssessmentStimulusRef,
    ),
  );
}

export function getAllQuestionsQtiAssessmentStimulusRefFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllQuestionsQtiAssessmentStimulusRef,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllQuestionsQtiAssessmentStimulusRef$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllQuestionsQtiAssessmentStimulusRef' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsQtiAssessmentItem$inboundSchema: z.ZodType<
  GetAllQuestionsQtiAssessmentItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => GetAllQuestionsAttributes$inboundSchema),
  "qti-response-declaration": z.array(
    z.lazy(() => GetAllQuestionsQtiResponseDeclaration$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() => GetAllQuestionsQtiOutcomeDeclaration$inboundSchema),
  ),
  "qti-assessment-stimulus-ref": z.lazy(() =>
    GetAllQuestionsQtiAssessmentStimulusRef$inboundSchema
  ),
  "qti-item-body": z.any().optional(),
  "qti-response-processing": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-response-declaration": "qtiResponseDeclaration",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-assessment-stimulus-ref": "qtiAssessmentStimulusRef",
    "qti-item-body": "qtiItemBody",
    "qti-response-processing": "qtiResponseProcessing",
  });
});

/** @internal */
export type GetAllQuestionsQtiAssessmentItem$Outbound = {
  _attributes: GetAllQuestionsAttributes$Outbound;
  "qti-response-declaration": Array<
    GetAllQuestionsQtiResponseDeclaration$Outbound
  >;
  "qti-outcome-declaration": Array<
    GetAllQuestionsQtiOutcomeDeclaration$Outbound
  >;
  "qti-assessment-stimulus-ref":
    GetAllQuestionsQtiAssessmentStimulusRef$Outbound;
  "qti-item-body"?: any | undefined;
  "qti-response-processing"?: any | undefined;
};

/** @internal */
export const GetAllQuestionsQtiAssessmentItem$outboundSchema: z.ZodType<
  GetAllQuestionsQtiAssessmentItem$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsQtiAssessmentItem
> = z.object({
  attributes: z.lazy(() => GetAllQuestionsAttributes$outboundSchema),
  qtiResponseDeclaration: z.array(
    z.lazy(() => GetAllQuestionsQtiResponseDeclaration$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() => GetAllQuestionsQtiOutcomeDeclaration$outboundSchema),
  ),
  qtiAssessmentStimulusRef: z.lazy(() =>
    GetAllQuestionsQtiAssessmentStimulusRef$outboundSchema
  ),
  qtiItemBody: z.any().optional(),
  qtiResponseProcessing: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiResponseDeclaration: "qti-response-declaration",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiAssessmentStimulusRef: "qti-assessment-stimulus-ref",
    qtiItemBody: "qti-item-body",
    qtiResponseProcessing: "qti-response-processing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsQtiAssessmentItem$ {
  /** @deprecated use `GetAllQuestionsQtiAssessmentItem$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsQtiAssessmentItem$inboundSchema;
  /** @deprecated use `GetAllQuestionsQtiAssessmentItem$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsQtiAssessmentItem$outboundSchema;
  /** @deprecated use `GetAllQuestionsQtiAssessmentItem$Outbound` instead. */
  export type Outbound = GetAllQuestionsQtiAssessmentItem$Outbound;
}

export function getAllQuestionsQtiAssessmentItemToJSON(
  getAllQuestionsQtiAssessmentItem: GetAllQuestionsQtiAssessmentItem,
): string {
  return JSON.stringify(
    GetAllQuestionsQtiAssessmentItem$outboundSchema.parse(
      getAllQuestionsQtiAssessmentItem,
    ),
  );
}

export function getAllQuestionsQtiAssessmentItemFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsQtiAssessmentItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsQtiAssessmentItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsQtiAssessmentItem' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsContent$inboundSchema: z.ZodType<
  GetAllQuestionsContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-item": z.lazy(() =>
    GetAllQuestionsQtiAssessmentItem$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-item": "qtiAssessmentItem",
  });
});

/** @internal */
export type GetAllQuestionsContent$Outbound = {
  "qti-assessment-item": GetAllQuestionsQtiAssessmentItem$Outbound;
};

/** @internal */
export const GetAllQuestionsContent$outboundSchema: z.ZodType<
  GetAllQuestionsContent$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsContent
> = z.object({
  qtiAssessmentItem: z.lazy(() =>
    GetAllQuestionsQtiAssessmentItem$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentItem: "qti-assessment-item",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsContent$ {
  /** @deprecated use `GetAllQuestionsContent$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsContent$inboundSchema;
  /** @deprecated use `GetAllQuestionsContent$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsContent$outboundSchema;
  /** @deprecated use `GetAllQuestionsContent$Outbound` instead. */
  export type Outbound = GetAllQuestionsContent$Outbound;
}

export function getAllQuestionsContentToJSON(
  getAllQuestionsContent: GetAllQuestionsContent,
): string {
  return JSON.stringify(
    GetAllQuestionsContent$outboundSchema.parse(getAllQuestionsContent),
  );
}

export function getAllQuestionsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsContent' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsModalFeedbackShowHide$inboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsModalFeedbackShowHide> = z.nativeEnum(
    GetAllQuestionsModalFeedbackShowHide,
  );

/** @internal */
export const GetAllQuestionsModalFeedbackShowHide$outboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsModalFeedbackShowHide> =
    GetAllQuestionsModalFeedbackShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsModalFeedbackShowHide$ {
  /** @deprecated use `GetAllQuestionsModalFeedbackShowHide$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsModalFeedbackShowHide$inboundSchema;
  /** @deprecated use `GetAllQuestionsModalFeedbackShowHide$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsModalFeedbackShowHide$outboundSchema;
}

/** @internal */
export const GetAllQuestionsModalFeedback$inboundSchema: z.ZodType<
  GetAllQuestionsModalFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAllQuestionsModalFeedbackShowHide$inboundSchema,
  content: z.string(),
  title: z.string(),
});

/** @internal */
export type GetAllQuestionsModalFeedback$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  title: string;
};

/** @internal */
export const GetAllQuestionsModalFeedback$outboundSchema: z.ZodType<
  GetAllQuestionsModalFeedback$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsModalFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAllQuestionsModalFeedbackShowHide$outboundSchema,
  content: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsModalFeedback$ {
  /** @deprecated use `GetAllQuestionsModalFeedback$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsModalFeedback$inboundSchema;
  /** @deprecated use `GetAllQuestionsModalFeedback$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsModalFeedback$outboundSchema;
  /** @deprecated use `GetAllQuestionsModalFeedback$Outbound` instead. */
  export type Outbound = GetAllQuestionsModalFeedback$Outbound;
}

export function getAllQuestionsModalFeedbackToJSON(
  getAllQuestionsModalFeedback: GetAllQuestionsModalFeedback,
): string {
  return JSON.stringify(
    GetAllQuestionsModalFeedback$outboundSchema.parse(
      getAllQuestionsModalFeedback,
    ),
  );
}

export function getAllQuestionsModalFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsModalFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsModalFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsModalFeedback' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsFeedbackInlineShowHide$inboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsFeedbackInlineShowHide> = z.nativeEnum(
    GetAllQuestionsFeedbackInlineShowHide,
  );

/** @internal */
export const GetAllQuestionsFeedbackInlineShowHide$outboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsFeedbackInlineShowHide> =
    GetAllQuestionsFeedbackInlineShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsFeedbackInlineShowHide$ {
  /** @deprecated use `GetAllQuestionsFeedbackInlineShowHide$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsFeedbackInlineShowHide$inboundSchema;
  /** @deprecated use `GetAllQuestionsFeedbackInlineShowHide$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsFeedbackInlineShowHide$outboundSchema;
}

/** @internal */
export const GetAllQuestionsFeedbackInline$inboundSchema: z.ZodType<
  GetAllQuestionsFeedbackInline,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAllQuestionsFeedbackInlineShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type GetAllQuestionsFeedbackInline$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const GetAllQuestionsFeedbackInline$outboundSchema: z.ZodType<
  GetAllQuestionsFeedbackInline$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsFeedbackInline
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAllQuestionsFeedbackInlineShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsFeedbackInline$ {
  /** @deprecated use `GetAllQuestionsFeedbackInline$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsFeedbackInline$inboundSchema;
  /** @deprecated use `GetAllQuestionsFeedbackInline$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsFeedbackInline$outboundSchema;
  /** @deprecated use `GetAllQuestionsFeedbackInline$Outbound` instead. */
  export type Outbound = GetAllQuestionsFeedbackInline$Outbound;
}

export function getAllQuestionsFeedbackInlineToJSON(
  getAllQuestionsFeedbackInline: GetAllQuestionsFeedbackInline,
): string {
  return JSON.stringify(
    GetAllQuestionsFeedbackInline$outboundSchema.parse(
      getAllQuestionsFeedbackInline,
    ),
  );
}

export function getAllQuestionsFeedbackInlineFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsFeedbackInline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsFeedbackInline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsFeedbackInline' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsFeedbackBlockShowHide$inboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsFeedbackBlockShowHide> = z.nativeEnum(
    GetAllQuestionsFeedbackBlockShowHide,
  );

/** @internal */
export const GetAllQuestionsFeedbackBlockShowHide$outboundSchema:
  z.ZodNativeEnum<typeof GetAllQuestionsFeedbackBlockShowHide> =
    GetAllQuestionsFeedbackBlockShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsFeedbackBlockShowHide$ {
  /** @deprecated use `GetAllQuestionsFeedbackBlockShowHide$inboundSchema` instead. */
  export const inboundSchema =
    GetAllQuestionsFeedbackBlockShowHide$inboundSchema;
  /** @deprecated use `GetAllQuestionsFeedbackBlockShowHide$outboundSchema` instead. */
  export const outboundSchema =
    GetAllQuestionsFeedbackBlockShowHide$outboundSchema;
}

/** @internal */
export const GetAllQuestionsFeedbackBlock$inboundSchema: z.ZodType<
  GetAllQuestionsFeedbackBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAllQuestionsFeedbackBlockShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type GetAllQuestionsFeedbackBlock$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const GetAllQuestionsFeedbackBlock$outboundSchema: z.ZodType<
  GetAllQuestionsFeedbackBlock$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsFeedbackBlock
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: GetAllQuestionsFeedbackBlockShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsFeedbackBlock$ {
  /** @deprecated use `GetAllQuestionsFeedbackBlock$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsFeedbackBlock$inboundSchema;
  /** @deprecated use `GetAllQuestionsFeedbackBlock$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsFeedbackBlock$outboundSchema;
  /** @deprecated use `GetAllQuestionsFeedbackBlock$Outbound` instead. */
  export type Outbound = GetAllQuestionsFeedbackBlock$Outbound;
}

export function getAllQuestionsFeedbackBlockToJSON(
  getAllQuestionsFeedbackBlock: GetAllQuestionsFeedbackBlock,
): string {
  return JSON.stringify(
    GetAllQuestionsFeedbackBlock$outboundSchema.parse(
      getAllQuestionsFeedbackBlock,
    ),
  );
}

export function getAllQuestionsFeedbackBlockFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsFeedbackBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsFeedbackBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsFeedbackBlock' from JSON`,
  );
}

/** @internal */
export const QuestionQuestion$inboundSchema: z.ZodType<
  QuestionQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: GetAllQuestionsType$inboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => GetAllQuestionsResponseDeclaration$inboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => GetAllQuestionsOutcomeDeclaration$inboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    GetAllQuestionsResponseProcessing$inboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetAllQuestionsContent$inboundSchema),
  modalFeedback: z.array(
    z.lazy(() => GetAllQuestionsModalFeedback$inboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => GetAllQuestionsFeedbackInline$inboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => GetAllQuestionsFeedbackBlock$inboundSchema),
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type QuestionQuestion$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  type: string;
  qtiVersion: string;
  timeDependent: boolean;
  adaptive: boolean;
  responseDeclarations?:
    | Array<GetAllQuestionsResponseDeclaration$Outbound>
    | undefined;
  outcomeDeclarations?:
    | Array<GetAllQuestionsOutcomeDeclaration$Outbound>
    | undefined;
  responseProcessing: GetAllQuestionsResponseProcessing$Outbound;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: GetAllQuestionsContent$Outbound;
  modalFeedback?: Array<GetAllQuestionsModalFeedback$Outbound> | undefined;
  feedbackInline?: Array<GetAllQuestionsFeedbackInline$Outbound> | undefined;
  feedbackBlock?: Array<GetAllQuestionsFeedbackBlock$Outbound> | undefined;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const QuestionQuestion$outboundSchema: z.ZodType<
  QuestionQuestion$Outbound,
  z.ZodTypeDef,
  QuestionQuestion
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: GetAllQuestionsType$outboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => GetAllQuestionsResponseDeclaration$outboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => GetAllQuestionsOutcomeDeclaration$outboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    GetAllQuestionsResponseProcessing$outboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => GetAllQuestionsContent$outboundSchema),
  modalFeedback: z.array(
    z.lazy(() => GetAllQuestionsModalFeedback$outboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => GetAllQuestionsFeedbackInline$outboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => GetAllQuestionsFeedbackBlock$outboundSchema),
  ).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuestionQuestion$ {
  /** @deprecated use `QuestionQuestion$inboundSchema` instead. */
  export const inboundSchema = QuestionQuestion$inboundSchema;
  /** @deprecated use `QuestionQuestion$outboundSchema` instead. */
  export const outboundSchema = QuestionQuestion$outboundSchema;
  /** @deprecated use `QuestionQuestion$Outbound` instead. */
  export type Outbound = QuestionQuestion$Outbound;
}

export function questionQuestionToJSON(
  questionQuestion: QuestionQuestion,
): string {
  return JSON.stringify(
    QuestionQuestion$outboundSchema.parse(questionQuestion),
  );
}

export function questionQuestionFromJSON(
  jsonString: string,
): SafeParseResult<QuestionQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuestionQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuestionQuestion' from JSON`,
  );
}

/** @internal */
export const Question$inboundSchema: z.ZodType<
  Question,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference: z.lazy(() => Reference$inboundSchema),
  question: z.lazy(() => QuestionQuestion$inboundSchema),
});

/** @internal */
export type Question$Outbound = {
  reference: Reference$Outbound;
  question: QuestionQuestion$Outbound;
};

/** @internal */
export const Question$outboundSchema: z.ZodType<
  Question$Outbound,
  z.ZodTypeDef,
  Question
> = z.object({
  reference: z.lazy(() => Reference$outboundSchema),
  question: z.lazy(() => QuestionQuestion$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Question$ {
  /** @deprecated use `Question$inboundSchema` instead. */
  export const inboundSchema = Question$inboundSchema;
  /** @deprecated use `Question$outboundSchema` instead. */
  export const outboundSchema = Question$outboundSchema;
  /** @deprecated use `Question$Outbound` instead. */
  export type Outbound = Question$Outbound;
}

export function questionToJSON(question: Question): string {
  return JSON.stringify(Question$outboundSchema.parse(question));
}

export function questionFromJSON(
  jsonString: string,
): SafeParseResult<Question, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Question$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Question' from JSON`,
  );
}

/** @internal */
export const GetAllQuestionsResponse$inboundSchema: z.ZodType<
  GetAllQuestionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTest: z.string(),
  title: z.string(),
  totalQuestions: z.number(),
  questions: z.array(z.lazy(() => Question$inboundSchema)),
});

/** @internal */
export type GetAllQuestionsResponse$Outbound = {
  assessmentTest: string;
  title: string;
  totalQuestions: number;
  questions: Array<Question$Outbound>;
};

/** @internal */
export const GetAllQuestionsResponse$outboundSchema: z.ZodType<
  GetAllQuestionsResponse$Outbound,
  z.ZodTypeDef,
  GetAllQuestionsResponse
> = z.object({
  assessmentTest: z.string(),
  title: z.string(),
  totalQuestions: z.number(),
  questions: z.array(z.lazy(() => Question$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllQuestionsResponse$ {
  /** @deprecated use `GetAllQuestionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllQuestionsResponse$inboundSchema;
  /** @deprecated use `GetAllQuestionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllQuestionsResponse$outboundSchema;
  /** @deprecated use `GetAllQuestionsResponse$Outbound` instead. */
  export type Outbound = GetAllQuestionsResponse$Outbound;
}

export function getAllQuestionsResponseToJSON(
  getAllQuestionsResponse: GetAllQuestionsResponse,
): string {
  return JSON.stringify(
    GetAllQuestionsResponse$outboundSchema.parse(getAllQuestionsResponse),
  );
}

export function getAllQuestionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllQuestionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllQuestionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllQuestionsResponse' from JSON`,
  );
}
