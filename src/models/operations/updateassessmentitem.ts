/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Assessment item interaction types that are supported by the service provider.
 */
export const TypeRequest = {
  Choice: "choice",
  TextEntry: "text-entry",
  ExtendedText: "extended-text",
  InlineChoice: "inline-choice",
  Match: "match",
  Order: "order",
  Associate: "associate",
  SelectPoint: "select-point",
  GraphicOrder: "graphic-order",
  GraphicAssociate: "graphic-associate",
  GraphicGapMatch: "graphic-gap-match",
  Hotspot: "hotspot",
  Hottext: "hottext",
  Slider: "slider",
  Drawing: "drawing",
  Media: "media",
  Upload: "upload",
} as const;
/**
 * Assessment item interaction types that are supported by the service provider.
 */
export type TypeRequest = ClosedEnum<typeof TypeRequest>;

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const ResponseDeclarationCardinalityRequest = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type ResponseDeclarationCardinalityRequest = ClosedEnum<
  typeof ResponseDeclarationCardinalityRequest
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const ResponseDeclarationBaseTypeRequest = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type ResponseDeclarationBaseTypeRequest = ClosedEnum<
  typeof ResponseDeclarationBaseTypeRequest
>;

/**
 * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
 */
export type CorrectResponseRequest = {
  value: Array<string>;
};

export type ResponseDeclarationRequest = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: ResponseDeclarationCardinalityRequest;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: ResponseDeclarationBaseTypeRequest | undefined;
  /**
   * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
   */
  correctResponse: CorrectResponseRequest;
};

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const OutcomeDeclarationCardinalityRequest = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type OutcomeDeclarationCardinalityRequest = ClosedEnum<
  typeof OutcomeDeclarationCardinalityRequest
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const OutcomeDeclarationBaseTypeRequest = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type OutcomeDeclarationBaseTypeRequest = ClosedEnum<
  typeof OutcomeDeclarationBaseTypeRequest
>;

export type OutcomeDeclarationRequest = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: OutcomeDeclarationCardinalityRequest;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: OutcomeDeclarationBaseTypeRequest | undefined;
};

/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export const TemplateTypeRequest = {
  MatchCorrect: "match_correct",
  MapResponse: "map_response",
} as const;
/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export type TemplateTypeRequest = ClosedEnum<typeof TemplateTypeRequest>;

/**
 * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
 */
export type InlineFeedbackRequest = {
  /**
   * Identifier of the outcome variable to be set with the inline feedback value.
   */
  outcomeIdentifier: string;
  /**
   * Identifier of the variable whose value will be assigned to the outcome variable during response processing.
   */
  variableIdentifier: string;
};

/**
 * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
 */
export type ResponseProcessingRequest = {
  /**
   * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
   */
  templateType: TemplateTypeRequest;
  /**
   * Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
   */
  responseDeclarationIdentifier: string;
  /**
   * Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
   */
  outcomeIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
   */
  correctResponseIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
   */
  incorrectResponseIdentifier: string;
  /**
   * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
   */
  inlineFeedback?: InlineFeedbackRequest | undefined;
};

export type AttributesRequest = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  adaptive: string;
  timeDependent: string;
};

export type QtiResponseDeclarationAttributesRequest = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type QtiCorrectResponseRequest = {
  qtiValue: Array<string>;
};

export type QtiResponseDeclarationRequest = {
  attributes: QtiResponseDeclarationAttributesRequest;
  qtiCorrectResponse: QtiCorrectResponseRequest;
};

export type QtiOutcomeDeclarationAttributesRequest = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type UpdateAssessmentItemQtiOutcomeDeclarationRequest = {
  attributes: QtiOutcomeDeclarationAttributesRequest;
};

export type QtiAssessmentStimulusRefAttributesRequest = {
  identifier: string;
  href: string;
  title: string;
};

export type QtiAssessmentStimulusRefRequest = {
  attributes: QtiAssessmentStimulusRefAttributesRequest;
};

export type QtiAssessmentItemRequest = {
  attributes: AttributesRequest;
  qtiResponseDeclaration: Array<QtiResponseDeclarationRequest>;
  qtiOutcomeDeclaration: Array<
    UpdateAssessmentItemQtiOutcomeDeclarationRequest
  >;
  qtiAssessmentStimulusRef: QtiAssessmentStimulusRefRequest;
  qtiItemBody?: any | undefined;
  qtiResponseProcessing?: any | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type ContentRequest = {
  qtiAssessmentItem: QtiAssessmentItemRequest;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const ModalFeedbackShowHideRequest = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type ModalFeedbackShowHideRequest = ClosedEnum<
  typeof ModalFeedbackShowHideRequest
>;

export type ModalFeedbackRequest = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: ModalFeedbackShowHideRequest;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
   */
  title: string;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const FeedbackInlineShowHideRequest = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type FeedbackInlineShowHideRequest = ClosedEnum<
  typeof FeedbackInlineShowHideRequest
>;

export type FeedbackInlineRequest = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: FeedbackInlineShowHideRequest;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const FeedbackBlockShowHideRequest = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type FeedbackBlockShowHideRequest = ClosedEnum<
  typeof FeedbackBlockShowHideRequest
>;

export type FeedbackBlockRequest = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: FeedbackBlockShowHideRequest;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * The updated assessment item content, interactions, and configuration. Can be provided in either XML or JSON format.
 */
export type UpdateAssessmentItemRequestBody = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Assessment item interaction types that are supported by the service provider.
   */
  type: TypeRequest;
  /**
   * QTI version of the assessment item
   */
  qtiVersion?: string | undefined;
  /**
   * Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
   */
  timeDependent?: boolean | undefined;
  /**
   * Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
   */
  adaptive?: boolean | undefined;
  responseDeclarations?: Array<ResponseDeclarationRequest> | undefined;
  outcomeDeclarations?: Array<OutcomeDeclarationRequest> | undefined;
  /**
   * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
   */
  responseProcessing: ResponseProcessingRequest;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: ContentRequest;
  /**
   * Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
   */
  modalFeedback?: Array<ModalFeedbackRequest> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackInline?: Array<FeedbackInlineRequest> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackBlock?: Array<FeedbackBlockRequest> | undefined;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

export type UpdateAssessmentItemRequest = {
  /**
   * The unique identifier of the assessment item to update
   */
  identifier: string;
  /**
   * The updated assessment item content, interactions, and configuration. Can be provided in either XML or JSON format.
   */
  requestBody: UpdateAssessmentItemRequestBody;
};

/**
 * Assessment item interaction types that are supported by the service provider.
 */
export const UpdateAssessmentItemTypeResponse = {
  Choice: "choice",
  TextEntry: "text-entry",
  ExtendedText: "extended-text",
  InlineChoice: "inline-choice",
  Match: "match",
  Order: "order",
  Associate: "associate",
  SelectPoint: "select-point",
  GraphicOrder: "graphic-order",
  GraphicAssociate: "graphic-associate",
  GraphicGapMatch: "graphic-gap-match",
  Hotspot: "hotspot",
  Hottext: "hottext",
  Slider: "slider",
  Drawing: "drawing",
  Media: "media",
  Upload: "upload",
} as const;
/**
 * Assessment item interaction types that are supported by the service provider.
 */
export type UpdateAssessmentItemTypeResponse = ClosedEnum<
  typeof UpdateAssessmentItemTypeResponse
>;

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const UpdateAssessmentItemResponseDeclarationCardinalityResponse = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type UpdateAssessmentItemResponseDeclarationCardinalityResponse =
  ClosedEnum<typeof UpdateAssessmentItemResponseDeclarationCardinalityResponse>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const UpdateAssessmentItemResponseDeclarationBaseTypeResponse = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type UpdateAssessmentItemResponseDeclarationBaseTypeResponse =
  ClosedEnum<typeof UpdateAssessmentItemResponseDeclarationBaseTypeResponse>;

/**
 * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
 */
export type UpdateAssessmentItemCorrectResponseResponse = {
  value: Array<string>;
};

export type UpdateAssessmentItemResponseDeclarationResponse = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: UpdateAssessmentItemResponseDeclarationCardinalityResponse;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?:
    | UpdateAssessmentItemResponseDeclarationBaseTypeResponse
    | undefined;
  /**
   * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
   */
  correctResponse: UpdateAssessmentItemCorrectResponseResponse;
};

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const UpdateAssessmentItemOutcomeDeclarationCardinalityResponse = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type UpdateAssessmentItemOutcomeDeclarationCardinalityResponse =
  ClosedEnum<typeof UpdateAssessmentItemOutcomeDeclarationCardinalityResponse>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = ClosedEnum<
  typeof UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse
>;

export type UpdateAssessmentItemOutcomeDeclarationResponse = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: UpdateAssessmentItemOutcomeDeclarationCardinalityResponse;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse | undefined;
};

/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export const UpdateAssessmentItemTemplateTypeResponse = {
  MatchCorrect: "match_correct",
  MapResponse: "map_response",
} as const;
/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export type UpdateAssessmentItemTemplateTypeResponse = ClosedEnum<
  typeof UpdateAssessmentItemTemplateTypeResponse
>;

/**
 * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
 */
export type UpdateAssessmentItemInlineFeedbackResponse = {
  /**
   * Identifier of the outcome variable to be set with the inline feedback value.
   */
  outcomeIdentifier: string;
  /**
   * Identifier of the variable whose value will be assigned to the outcome variable during response processing.
   */
  variableIdentifier: string;
};

/**
 * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
 */
export type UpdateAssessmentItemResponseProcessingResponse = {
  /**
   * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
   */
  templateType: UpdateAssessmentItemTemplateTypeResponse;
  /**
   * Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
   */
  responseDeclarationIdentifier: string;
  /**
   * Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
   */
  outcomeIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
   */
  correctResponseIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
   */
  incorrectResponseIdentifier: string;
  /**
   * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
   */
  inlineFeedback?: UpdateAssessmentItemInlineFeedbackResponse | undefined;
};

export type UpdateAssessmentItemAttributesResponse = {
  xmlns: string;
  xmlnsXsi: string;
  xsiSchemaLocation: string;
  identifier: string;
  title: string;
  adaptive: string;
  timeDependent: string;
};

export type UpdateAssessmentItemQtiResponseDeclarationAttributesResponse = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type UpdateAssessmentItemQtiCorrectResponseResponse = {
  qtiValue: Array<string>;
};

export type UpdateAssessmentItemQtiResponseDeclarationResponse = {
  attributes: UpdateAssessmentItemQtiResponseDeclarationAttributesResponse;
  qtiCorrectResponse: UpdateAssessmentItemQtiCorrectResponseResponse;
};

export type UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

export type UpdateAssessmentItemQtiOutcomeDeclarationResponse = {
  attributes: UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse;
};

export type UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse = {
  identifier: string;
  href: string;
  title: string;
};

export type UpdateAssessmentItemQtiAssessmentStimulusRefResponse = {
  attributes: UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse;
};

export type UpdateAssessmentItemQtiAssessmentItemResponse = {
  attributes: UpdateAssessmentItemAttributesResponse;
  qtiResponseDeclaration: Array<
    UpdateAssessmentItemQtiResponseDeclarationResponse
  >;
  qtiOutcomeDeclaration: Array<
    UpdateAssessmentItemQtiOutcomeDeclarationResponse
  >;
  qtiAssessmentStimulusRef:
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse;
  qtiItemBody?: any | undefined;
  qtiResponseProcessing?: any | undefined;
};

/**
 * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
 */
export type UpdateAssessmentItemContentResponse = {
  qtiAssessmentItem: UpdateAssessmentItemQtiAssessmentItemResponse;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const UpdateAssessmentItemModalFeedbackShowHideResponse = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type UpdateAssessmentItemModalFeedbackShowHideResponse = ClosedEnum<
  typeof UpdateAssessmentItemModalFeedbackShowHideResponse
>;

export type UpdateAssessmentItemModalFeedbackResponse = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: UpdateAssessmentItemModalFeedbackShowHideResponse;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
   */
  title: string;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const UpdateAssessmentItemFeedbackInlineShowHideResponse = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type UpdateAssessmentItemFeedbackInlineShowHideResponse = ClosedEnum<
  typeof UpdateAssessmentItemFeedbackInlineShowHideResponse
>;

export type UpdateAssessmentItemFeedbackInlineResponse = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: UpdateAssessmentItemFeedbackInlineShowHideResponse;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const UpdateAssessmentItemFeedbackBlockShowHideResponse = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type UpdateAssessmentItemFeedbackBlockShowHideResponse = ClosedEnum<
  typeof UpdateAssessmentItemFeedbackBlockShowHideResponse
>;

export type UpdateAssessmentItemFeedbackBlockResponse = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: UpdateAssessmentItemFeedbackBlockShowHideResponse;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Assessment item updated successfully
 */
export type UpdateAssessmentItemResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Assessment item interaction types that are supported by the service provider.
   */
  type: UpdateAssessmentItemTypeResponse;
  /**
   * QTI version of the assessment item
   */
  qtiVersion?: string | undefined;
  /**
   * Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
   */
  timeDependent?: boolean | undefined;
  /**
   * Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
   */
  adaptive?: boolean | undefined;
  responseDeclarations?:
    | Array<UpdateAssessmentItemResponseDeclarationResponse>
    | undefined;
  outcomeDeclarations?:
    | Array<UpdateAssessmentItemOutcomeDeclarationResponse>
    | undefined;
  /**
   * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
   */
  responseProcessing: UpdateAssessmentItemResponseProcessingResponse;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  /**
   * Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
   */
  content: UpdateAssessmentItemContentResponse;
  /**
   * Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
   */
  modalFeedback?: Array<UpdateAssessmentItemModalFeedbackResponse> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackInline?:
    | Array<UpdateAssessmentItemFeedbackInlineResponse>
    | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackBlock?: Array<UpdateAssessmentItemFeedbackBlockResponse> | undefined;
  /**
   * ISO 8601 timestamp when the entity was created
   */
  createdAt: Date;
  /**
   * ISO 8601 timestamp when the entity was last updated
   */
  updatedAt: Date;
  /**
   * MongoDB version key for optimistic concurrency control
   */
  v?: number | undefined;
};

/** @internal */
export const TypeRequest$inboundSchema: z.ZodNativeEnum<typeof TypeRequest> = z
  .nativeEnum(TypeRequest);

/** @internal */
export const TypeRequest$outboundSchema: z.ZodNativeEnum<typeof TypeRequest> =
  TypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeRequest$ {
  /** @deprecated use `TypeRequest$inboundSchema` instead. */
  export const inboundSchema = TypeRequest$inboundSchema;
  /** @deprecated use `TypeRequest$outboundSchema` instead. */
  export const outboundSchema = TypeRequest$outboundSchema;
}

/** @internal */
export const ResponseDeclarationCardinalityRequest$inboundSchema:
  z.ZodNativeEnum<typeof ResponseDeclarationCardinalityRequest> = z.nativeEnum(
    ResponseDeclarationCardinalityRequest,
  );

/** @internal */
export const ResponseDeclarationCardinalityRequest$outboundSchema:
  z.ZodNativeEnum<typeof ResponseDeclarationCardinalityRequest> =
    ResponseDeclarationCardinalityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseDeclarationCardinalityRequest$ {
  /** @deprecated use `ResponseDeclarationCardinalityRequest$inboundSchema` instead. */
  export const inboundSchema =
    ResponseDeclarationCardinalityRequest$inboundSchema;
  /** @deprecated use `ResponseDeclarationCardinalityRequest$outboundSchema` instead. */
  export const outboundSchema =
    ResponseDeclarationCardinalityRequest$outboundSchema;
}

/** @internal */
export const ResponseDeclarationBaseTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof ResponseDeclarationBaseTypeRequest
> = z.nativeEnum(ResponseDeclarationBaseTypeRequest);

/** @internal */
export const ResponseDeclarationBaseTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof ResponseDeclarationBaseTypeRequest
> = ResponseDeclarationBaseTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseDeclarationBaseTypeRequest$ {
  /** @deprecated use `ResponseDeclarationBaseTypeRequest$inboundSchema` instead. */
  export const inboundSchema = ResponseDeclarationBaseTypeRequest$inboundSchema;
  /** @deprecated use `ResponseDeclarationBaseTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ResponseDeclarationBaseTypeRequest$outboundSchema;
}

/** @internal */
export const CorrectResponseRequest$inboundSchema: z.ZodType<
  CorrectResponseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.array(z.string()),
});

/** @internal */
export type CorrectResponseRequest$Outbound = {
  value: Array<string>;
};

/** @internal */
export const CorrectResponseRequest$outboundSchema: z.ZodType<
  CorrectResponseRequest$Outbound,
  z.ZodTypeDef,
  CorrectResponseRequest
> = z.object({
  value: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectResponseRequest$ {
  /** @deprecated use `CorrectResponseRequest$inboundSchema` instead. */
  export const inboundSchema = CorrectResponseRequest$inboundSchema;
  /** @deprecated use `CorrectResponseRequest$outboundSchema` instead. */
  export const outboundSchema = CorrectResponseRequest$outboundSchema;
  /** @deprecated use `CorrectResponseRequest$Outbound` instead. */
  export type Outbound = CorrectResponseRequest$Outbound;
}

export function correctResponseRequestToJSON(
  correctResponseRequest: CorrectResponseRequest,
): string {
  return JSON.stringify(
    CorrectResponseRequest$outboundSchema.parse(correctResponseRequest),
  );
}

export function correctResponseRequestFromJSON(
  jsonString: string,
): SafeParseResult<CorrectResponseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectResponseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectResponseRequest' from JSON`,
  );
}

/** @internal */
export const ResponseDeclarationRequest$inboundSchema: z.ZodType<
  ResponseDeclarationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: ResponseDeclarationCardinalityRequest$inboundSchema,
  baseType: ResponseDeclarationBaseTypeRequest$inboundSchema.optional(),
  correctResponse: z.lazy(() => CorrectResponseRequest$inboundSchema),
});

/** @internal */
export type ResponseDeclarationRequest$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
  correctResponse: CorrectResponseRequest$Outbound;
};

/** @internal */
export const ResponseDeclarationRequest$outboundSchema: z.ZodType<
  ResponseDeclarationRequest$Outbound,
  z.ZodTypeDef,
  ResponseDeclarationRequest
> = z.object({
  identifier: z.string(),
  cardinality: ResponseDeclarationCardinalityRequest$outboundSchema,
  baseType: ResponseDeclarationBaseTypeRequest$outboundSchema.optional(),
  correctResponse: z.lazy(() => CorrectResponseRequest$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseDeclarationRequest$ {
  /** @deprecated use `ResponseDeclarationRequest$inboundSchema` instead. */
  export const inboundSchema = ResponseDeclarationRequest$inboundSchema;
  /** @deprecated use `ResponseDeclarationRequest$outboundSchema` instead. */
  export const outboundSchema = ResponseDeclarationRequest$outboundSchema;
  /** @deprecated use `ResponseDeclarationRequest$Outbound` instead. */
  export type Outbound = ResponseDeclarationRequest$Outbound;
}

export function responseDeclarationRequestToJSON(
  responseDeclarationRequest: ResponseDeclarationRequest,
): string {
  return JSON.stringify(
    ResponseDeclarationRequest$outboundSchema.parse(responseDeclarationRequest),
  );
}

export function responseDeclarationRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResponseDeclarationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseDeclarationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseDeclarationRequest' from JSON`,
  );
}

/** @internal */
export const OutcomeDeclarationCardinalityRequest$inboundSchema:
  z.ZodNativeEnum<typeof OutcomeDeclarationCardinalityRequest> = z.nativeEnum(
    OutcomeDeclarationCardinalityRequest,
  );

/** @internal */
export const OutcomeDeclarationCardinalityRequest$outboundSchema:
  z.ZodNativeEnum<typeof OutcomeDeclarationCardinalityRequest> =
    OutcomeDeclarationCardinalityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeDeclarationCardinalityRequest$ {
  /** @deprecated use `OutcomeDeclarationCardinalityRequest$inboundSchema` instead. */
  export const inboundSchema =
    OutcomeDeclarationCardinalityRequest$inboundSchema;
  /** @deprecated use `OutcomeDeclarationCardinalityRequest$outboundSchema` instead. */
  export const outboundSchema =
    OutcomeDeclarationCardinalityRequest$outboundSchema;
}

/** @internal */
export const OutcomeDeclarationBaseTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof OutcomeDeclarationBaseTypeRequest
> = z.nativeEnum(OutcomeDeclarationBaseTypeRequest);

/** @internal */
export const OutcomeDeclarationBaseTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof OutcomeDeclarationBaseTypeRequest
> = OutcomeDeclarationBaseTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeDeclarationBaseTypeRequest$ {
  /** @deprecated use `OutcomeDeclarationBaseTypeRequest$inboundSchema` instead. */
  export const inboundSchema = OutcomeDeclarationBaseTypeRequest$inboundSchema;
  /** @deprecated use `OutcomeDeclarationBaseTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    OutcomeDeclarationBaseTypeRequest$outboundSchema;
}

/** @internal */
export const OutcomeDeclarationRequest$inboundSchema: z.ZodType<
  OutcomeDeclarationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: OutcomeDeclarationCardinalityRequest$inboundSchema,
  baseType: OutcomeDeclarationBaseTypeRequest$inboundSchema.optional(),
});

/** @internal */
export type OutcomeDeclarationRequest$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
};

/** @internal */
export const OutcomeDeclarationRequest$outboundSchema: z.ZodType<
  OutcomeDeclarationRequest$Outbound,
  z.ZodTypeDef,
  OutcomeDeclarationRequest
> = z.object({
  identifier: z.string(),
  cardinality: OutcomeDeclarationCardinalityRequest$outboundSchema,
  baseType: OutcomeDeclarationBaseTypeRequest$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeDeclarationRequest$ {
  /** @deprecated use `OutcomeDeclarationRequest$inboundSchema` instead. */
  export const inboundSchema = OutcomeDeclarationRequest$inboundSchema;
  /** @deprecated use `OutcomeDeclarationRequest$outboundSchema` instead. */
  export const outboundSchema = OutcomeDeclarationRequest$outboundSchema;
  /** @deprecated use `OutcomeDeclarationRequest$Outbound` instead. */
  export type Outbound = OutcomeDeclarationRequest$Outbound;
}

export function outcomeDeclarationRequestToJSON(
  outcomeDeclarationRequest: OutcomeDeclarationRequest,
): string {
  return JSON.stringify(
    OutcomeDeclarationRequest$outboundSchema.parse(outcomeDeclarationRequest),
  );
}

export function outcomeDeclarationRequestFromJSON(
  jsonString: string,
): SafeParseResult<OutcomeDeclarationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutcomeDeclarationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutcomeDeclarationRequest' from JSON`,
  );
}

/** @internal */
export const TemplateTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof TemplateTypeRequest
> = z.nativeEnum(TemplateTypeRequest);

/** @internal */
export const TemplateTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof TemplateTypeRequest
> = TemplateTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateTypeRequest$ {
  /** @deprecated use `TemplateTypeRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateTypeRequest$inboundSchema;
  /** @deprecated use `TemplateTypeRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateTypeRequest$outboundSchema;
}

/** @internal */
export const InlineFeedbackRequest$inboundSchema: z.ZodType<
  InlineFeedbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/** @internal */
export type InlineFeedbackRequest$Outbound = {
  outcomeIdentifier: string;
  variableIdentifier: string;
};

/** @internal */
export const InlineFeedbackRequest$outboundSchema: z.ZodType<
  InlineFeedbackRequest$Outbound,
  z.ZodTypeDef,
  InlineFeedbackRequest
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineFeedbackRequest$ {
  /** @deprecated use `InlineFeedbackRequest$inboundSchema` instead. */
  export const inboundSchema = InlineFeedbackRequest$inboundSchema;
  /** @deprecated use `InlineFeedbackRequest$outboundSchema` instead. */
  export const outboundSchema = InlineFeedbackRequest$outboundSchema;
  /** @deprecated use `InlineFeedbackRequest$Outbound` instead. */
  export type Outbound = InlineFeedbackRequest$Outbound;
}

export function inlineFeedbackRequestToJSON(
  inlineFeedbackRequest: InlineFeedbackRequest,
): string {
  return JSON.stringify(
    InlineFeedbackRequest$outboundSchema.parse(inlineFeedbackRequest),
  );
}

export function inlineFeedbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<InlineFeedbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InlineFeedbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InlineFeedbackRequest' from JSON`,
  );
}

/** @internal */
export const ResponseProcessingRequest$inboundSchema: z.ZodType<
  ResponseProcessingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateType: TemplateTypeRequest$inboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => InlineFeedbackRequest$inboundSchema).optional(),
});

/** @internal */
export type ResponseProcessingRequest$Outbound = {
  templateType: string;
  responseDeclarationIdentifier: string;
  outcomeIdentifier: string;
  correctResponseIdentifier: string;
  incorrectResponseIdentifier: string;
  inlineFeedback?: InlineFeedbackRequest$Outbound | undefined;
};

/** @internal */
export const ResponseProcessingRequest$outboundSchema: z.ZodType<
  ResponseProcessingRequest$Outbound,
  z.ZodTypeDef,
  ResponseProcessingRequest
> = z.object({
  templateType: TemplateTypeRequest$outboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => InlineFeedbackRequest$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseProcessingRequest$ {
  /** @deprecated use `ResponseProcessingRequest$inboundSchema` instead. */
  export const inboundSchema = ResponseProcessingRequest$inboundSchema;
  /** @deprecated use `ResponseProcessingRequest$outboundSchema` instead. */
  export const outboundSchema = ResponseProcessingRequest$outboundSchema;
  /** @deprecated use `ResponseProcessingRequest$Outbound` instead. */
  export type Outbound = ResponseProcessingRequest$Outbound;
}

export function responseProcessingRequestToJSON(
  responseProcessingRequest: ResponseProcessingRequest,
): string {
  return JSON.stringify(
    ResponseProcessingRequest$outboundSchema.parse(responseProcessingRequest),
  );
}

export function responseProcessingRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResponseProcessingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseProcessingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseProcessingRequest' from JSON`,
  );
}

/** @internal */
export const AttributesRequest$inboundSchema: z.ZodType<
  AttributesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  "time-dependent": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "time-dependent": "timeDependent",
  });
});

/** @internal */
export type AttributesRequest$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  adaptive: string;
  "time-dependent": string;
};

/** @internal */
export const AttributesRequest$outboundSchema: z.ZodType<
  AttributesRequest$Outbound,
  z.ZodTypeDef,
  AttributesRequest
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  timeDependent: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    timeDependent: "time-dependent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttributesRequest$ {
  /** @deprecated use `AttributesRequest$inboundSchema` instead. */
  export const inboundSchema = AttributesRequest$inboundSchema;
  /** @deprecated use `AttributesRequest$outboundSchema` instead. */
  export const outboundSchema = AttributesRequest$outboundSchema;
  /** @deprecated use `AttributesRequest$Outbound` instead. */
  export type Outbound = AttributesRequest$Outbound;
}

export function attributesRequestToJSON(
  attributesRequest: AttributesRequest,
): string {
  return JSON.stringify(
    AttributesRequest$outboundSchema.parse(attributesRequest),
  );
}

export function attributesRequestFromJSON(
  jsonString: string,
): SafeParseResult<AttributesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttributesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttributesRequest' from JSON`,
  );
}

/** @internal */
export const QtiResponseDeclarationAttributesRequest$inboundSchema: z.ZodType<
  QtiResponseDeclarationAttributesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: z.string(),
  baseType: z.string(),
});

/** @internal */
export type QtiResponseDeclarationAttributesRequest$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const QtiResponseDeclarationAttributesRequest$outboundSchema: z.ZodType<
  QtiResponseDeclarationAttributesRequest$Outbound,
  z.ZodTypeDef,
  QtiResponseDeclarationAttributesRequest
> = z.object({
  identifier: z.string(),
  cardinality: z.string(),
  baseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiResponseDeclarationAttributesRequest$ {
  /** @deprecated use `QtiResponseDeclarationAttributesRequest$inboundSchema` instead. */
  export const inboundSchema =
    QtiResponseDeclarationAttributesRequest$inboundSchema;
  /** @deprecated use `QtiResponseDeclarationAttributesRequest$outboundSchema` instead. */
  export const outboundSchema =
    QtiResponseDeclarationAttributesRequest$outboundSchema;
  /** @deprecated use `QtiResponseDeclarationAttributesRequest$Outbound` instead. */
  export type Outbound = QtiResponseDeclarationAttributesRequest$Outbound;
}

export function qtiResponseDeclarationAttributesRequestToJSON(
  qtiResponseDeclarationAttributesRequest:
    QtiResponseDeclarationAttributesRequest,
): string {
  return JSON.stringify(
    QtiResponseDeclarationAttributesRequest$outboundSchema.parse(
      qtiResponseDeclarationAttributesRequest,
    ),
  );
}

export function qtiResponseDeclarationAttributesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  QtiResponseDeclarationAttributesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      QtiResponseDeclarationAttributesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'QtiResponseDeclarationAttributesRequest' from JSON`,
  );
}

/** @internal */
export const QtiCorrectResponseRequest$inboundSchema: z.ZodType<
  QtiCorrectResponseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-value": z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "qti-value": "qtiValue",
  });
});

/** @internal */
export type QtiCorrectResponseRequest$Outbound = {
  "qti-value": Array<string>;
};

/** @internal */
export const QtiCorrectResponseRequest$outboundSchema: z.ZodType<
  QtiCorrectResponseRequest$Outbound,
  z.ZodTypeDef,
  QtiCorrectResponseRequest
> = z.object({
  qtiValue: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    qtiValue: "qti-value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiCorrectResponseRequest$ {
  /** @deprecated use `QtiCorrectResponseRequest$inboundSchema` instead. */
  export const inboundSchema = QtiCorrectResponseRequest$inboundSchema;
  /** @deprecated use `QtiCorrectResponseRequest$outboundSchema` instead. */
  export const outboundSchema = QtiCorrectResponseRequest$outboundSchema;
  /** @deprecated use `QtiCorrectResponseRequest$Outbound` instead. */
  export type Outbound = QtiCorrectResponseRequest$Outbound;
}

export function qtiCorrectResponseRequestToJSON(
  qtiCorrectResponseRequest: QtiCorrectResponseRequest,
): string {
  return JSON.stringify(
    QtiCorrectResponseRequest$outboundSchema.parse(qtiCorrectResponseRequest),
  );
}

export function qtiCorrectResponseRequestFromJSON(
  jsonString: string,
): SafeParseResult<QtiCorrectResponseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QtiCorrectResponseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QtiCorrectResponseRequest' from JSON`,
  );
}

/** @internal */
export const QtiResponseDeclarationRequest$inboundSchema: z.ZodType<
  QtiResponseDeclarationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    QtiResponseDeclarationAttributesRequest$inboundSchema
  ),
  "qti-correct-response": z.lazy(() => QtiCorrectResponseRequest$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-correct-response": "qtiCorrectResponse",
  });
});

/** @internal */
export type QtiResponseDeclarationRequest$Outbound = {
  _attributes: QtiResponseDeclarationAttributesRequest$Outbound;
  "qti-correct-response": QtiCorrectResponseRequest$Outbound;
};

/** @internal */
export const QtiResponseDeclarationRequest$outboundSchema: z.ZodType<
  QtiResponseDeclarationRequest$Outbound,
  z.ZodTypeDef,
  QtiResponseDeclarationRequest
> = z.object({
  attributes: z.lazy(() =>
    QtiResponseDeclarationAttributesRequest$outboundSchema
  ),
  qtiCorrectResponse: z.lazy(() => QtiCorrectResponseRequest$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiCorrectResponse: "qti-correct-response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiResponseDeclarationRequest$ {
  /** @deprecated use `QtiResponseDeclarationRequest$inboundSchema` instead. */
  export const inboundSchema = QtiResponseDeclarationRequest$inboundSchema;
  /** @deprecated use `QtiResponseDeclarationRequest$outboundSchema` instead. */
  export const outboundSchema = QtiResponseDeclarationRequest$outboundSchema;
  /** @deprecated use `QtiResponseDeclarationRequest$Outbound` instead. */
  export type Outbound = QtiResponseDeclarationRequest$Outbound;
}

export function qtiResponseDeclarationRequestToJSON(
  qtiResponseDeclarationRequest: QtiResponseDeclarationRequest,
): string {
  return JSON.stringify(
    QtiResponseDeclarationRequest$outboundSchema.parse(
      qtiResponseDeclarationRequest,
    ),
  );
}

export function qtiResponseDeclarationRequestFromJSON(
  jsonString: string,
): SafeParseResult<QtiResponseDeclarationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QtiResponseDeclarationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QtiResponseDeclarationRequest' from JSON`,
  );
}

/** @internal */
export const QtiOutcomeDeclarationAttributesRequest$inboundSchema: z.ZodType<
  QtiOutcomeDeclarationAttributesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: z.string(),
  baseType: z.string(),
});

/** @internal */
export type QtiOutcomeDeclarationAttributesRequest$Outbound = {
  identifier: string;
  cardinality: string;
  baseType: string;
};

/** @internal */
export const QtiOutcomeDeclarationAttributesRequest$outboundSchema: z.ZodType<
  QtiOutcomeDeclarationAttributesRequest$Outbound,
  z.ZodTypeDef,
  QtiOutcomeDeclarationAttributesRequest
> = z.object({
  identifier: z.string(),
  cardinality: z.string(),
  baseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiOutcomeDeclarationAttributesRequest$ {
  /** @deprecated use `QtiOutcomeDeclarationAttributesRequest$inboundSchema` instead. */
  export const inboundSchema =
    QtiOutcomeDeclarationAttributesRequest$inboundSchema;
  /** @deprecated use `QtiOutcomeDeclarationAttributesRequest$outboundSchema` instead. */
  export const outboundSchema =
    QtiOutcomeDeclarationAttributesRequest$outboundSchema;
  /** @deprecated use `QtiOutcomeDeclarationAttributesRequest$Outbound` instead. */
  export type Outbound = QtiOutcomeDeclarationAttributesRequest$Outbound;
}

export function qtiOutcomeDeclarationAttributesRequestToJSON(
  qtiOutcomeDeclarationAttributesRequest:
    QtiOutcomeDeclarationAttributesRequest,
): string {
  return JSON.stringify(
    QtiOutcomeDeclarationAttributesRequest$outboundSchema.parse(
      qtiOutcomeDeclarationAttributesRequest,
    ),
  );
}

export function qtiOutcomeDeclarationAttributesRequestFromJSON(
  jsonString: string,
): SafeParseResult<QtiOutcomeDeclarationAttributesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      QtiOutcomeDeclarationAttributesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QtiOutcomeDeclarationAttributesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiOutcomeDeclarationRequest$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiOutcomeDeclarationRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      QtiOutcomeDeclarationAttributesRequest$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type UpdateAssessmentItemQtiOutcomeDeclarationRequest$Outbound = {
  _attributes: QtiOutcomeDeclarationAttributesRequest$Outbound;
};

/** @internal */
export const UpdateAssessmentItemQtiOutcomeDeclarationRequest$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiOutcomeDeclarationRequest$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiOutcomeDeclarationRequest
  > = z.object({
    attributes: z.lazy(() =>
      QtiOutcomeDeclarationAttributesRequest$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiOutcomeDeclarationRequest$ {
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiOutcomeDeclarationRequest$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiOutcomeDeclarationRequest$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationRequest$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiOutcomeDeclarationRequest$Outbound;
}

export function updateAssessmentItemQtiOutcomeDeclarationRequestToJSON(
  updateAssessmentItemQtiOutcomeDeclarationRequest:
    UpdateAssessmentItemQtiOutcomeDeclarationRequest,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiOutcomeDeclarationRequest$outboundSchema.parse(
      updateAssessmentItemQtiOutcomeDeclarationRequest,
    ),
  );
}

export function updateAssessmentItemQtiOutcomeDeclarationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiOutcomeDeclarationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiOutcomeDeclarationRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemQtiOutcomeDeclarationRequest' from JSON`,
  );
}

/** @internal */
export const QtiAssessmentStimulusRefAttributesRequest$inboundSchema: z.ZodType<
  QtiAssessmentStimulusRefAttributesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string(),
  title: z.string(),
});

/** @internal */
export type QtiAssessmentStimulusRefAttributesRequest$Outbound = {
  identifier: string;
  href: string;
  title: string;
};

/** @internal */
export const QtiAssessmentStimulusRefAttributesRequest$outboundSchema:
  z.ZodType<
    QtiAssessmentStimulusRefAttributesRequest$Outbound,
    z.ZodTypeDef,
    QtiAssessmentStimulusRefAttributesRequest
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiAssessmentStimulusRefAttributesRequest$ {
  /** @deprecated use `QtiAssessmentStimulusRefAttributesRequest$inboundSchema` instead. */
  export const inboundSchema =
    QtiAssessmentStimulusRefAttributesRequest$inboundSchema;
  /** @deprecated use `QtiAssessmentStimulusRefAttributesRequest$outboundSchema` instead. */
  export const outboundSchema =
    QtiAssessmentStimulusRefAttributesRequest$outboundSchema;
  /** @deprecated use `QtiAssessmentStimulusRefAttributesRequest$Outbound` instead. */
  export type Outbound = QtiAssessmentStimulusRefAttributesRequest$Outbound;
}

export function qtiAssessmentStimulusRefAttributesRequestToJSON(
  qtiAssessmentStimulusRefAttributesRequest:
    QtiAssessmentStimulusRefAttributesRequest,
): string {
  return JSON.stringify(
    QtiAssessmentStimulusRefAttributesRequest$outboundSchema.parse(
      qtiAssessmentStimulusRefAttributesRequest,
    ),
  );
}

export function qtiAssessmentStimulusRefAttributesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  QtiAssessmentStimulusRefAttributesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      QtiAssessmentStimulusRefAttributesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'QtiAssessmentStimulusRefAttributesRequest' from JSON`,
  );
}

/** @internal */
export const QtiAssessmentStimulusRefRequest$inboundSchema: z.ZodType<
  QtiAssessmentStimulusRefRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    QtiAssessmentStimulusRefAttributesRequest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type QtiAssessmentStimulusRefRequest$Outbound = {
  _attributes: QtiAssessmentStimulusRefAttributesRequest$Outbound;
};

/** @internal */
export const QtiAssessmentStimulusRefRequest$outboundSchema: z.ZodType<
  QtiAssessmentStimulusRefRequest$Outbound,
  z.ZodTypeDef,
  QtiAssessmentStimulusRefRequest
> = z.object({
  attributes: z.lazy(() =>
    QtiAssessmentStimulusRefAttributesRequest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiAssessmentStimulusRefRequest$ {
  /** @deprecated use `QtiAssessmentStimulusRefRequest$inboundSchema` instead. */
  export const inboundSchema = QtiAssessmentStimulusRefRequest$inboundSchema;
  /** @deprecated use `QtiAssessmentStimulusRefRequest$outboundSchema` instead. */
  export const outboundSchema = QtiAssessmentStimulusRefRequest$outboundSchema;
  /** @deprecated use `QtiAssessmentStimulusRefRequest$Outbound` instead. */
  export type Outbound = QtiAssessmentStimulusRefRequest$Outbound;
}

export function qtiAssessmentStimulusRefRequestToJSON(
  qtiAssessmentStimulusRefRequest: QtiAssessmentStimulusRefRequest,
): string {
  return JSON.stringify(
    QtiAssessmentStimulusRefRequest$outboundSchema.parse(
      qtiAssessmentStimulusRefRequest,
    ),
  );
}

export function qtiAssessmentStimulusRefRequestFromJSON(
  jsonString: string,
): SafeParseResult<QtiAssessmentStimulusRefRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QtiAssessmentStimulusRefRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QtiAssessmentStimulusRefRequest' from JSON`,
  );
}

/** @internal */
export const QtiAssessmentItemRequest$inboundSchema: z.ZodType<
  QtiAssessmentItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => AttributesRequest$inboundSchema),
  "qti-response-declaration": z.array(
    z.lazy(() => QtiResponseDeclarationRequest$inboundSchema),
  ),
  "qti-outcome-declaration": z.array(
    z.lazy(() =>
      UpdateAssessmentItemQtiOutcomeDeclarationRequest$inboundSchema
    ),
  ),
  "qti-assessment-stimulus-ref": z.lazy(() =>
    QtiAssessmentStimulusRefRequest$inboundSchema
  ),
  "qti-item-body": z.any().optional(),
  "qti-response-processing": z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-response-declaration": "qtiResponseDeclaration",
    "qti-outcome-declaration": "qtiOutcomeDeclaration",
    "qti-assessment-stimulus-ref": "qtiAssessmentStimulusRef",
    "qti-item-body": "qtiItemBody",
    "qti-response-processing": "qtiResponseProcessing",
  });
});

/** @internal */
export type QtiAssessmentItemRequest$Outbound = {
  _attributes: AttributesRequest$Outbound;
  "qti-response-declaration": Array<QtiResponseDeclarationRequest$Outbound>;
  "qti-outcome-declaration": Array<
    UpdateAssessmentItemQtiOutcomeDeclarationRequest$Outbound
  >;
  "qti-assessment-stimulus-ref": QtiAssessmentStimulusRefRequest$Outbound;
  "qti-item-body"?: any | undefined;
  "qti-response-processing"?: any | undefined;
};

/** @internal */
export const QtiAssessmentItemRequest$outboundSchema: z.ZodType<
  QtiAssessmentItemRequest$Outbound,
  z.ZodTypeDef,
  QtiAssessmentItemRequest
> = z.object({
  attributes: z.lazy(() => AttributesRequest$outboundSchema),
  qtiResponseDeclaration: z.array(
    z.lazy(() => QtiResponseDeclarationRequest$outboundSchema),
  ),
  qtiOutcomeDeclaration: z.array(
    z.lazy(() =>
      UpdateAssessmentItemQtiOutcomeDeclarationRequest$outboundSchema
    ),
  ),
  qtiAssessmentStimulusRef: z.lazy(() =>
    QtiAssessmentStimulusRefRequest$outboundSchema
  ),
  qtiItemBody: z.any().optional(),
  qtiResponseProcessing: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiResponseDeclaration: "qti-response-declaration",
    qtiOutcomeDeclaration: "qti-outcome-declaration",
    qtiAssessmentStimulusRef: "qti-assessment-stimulus-ref",
    qtiItemBody: "qti-item-body",
    qtiResponseProcessing: "qti-response-processing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiAssessmentItemRequest$ {
  /** @deprecated use `QtiAssessmentItemRequest$inboundSchema` instead. */
  export const inboundSchema = QtiAssessmentItemRequest$inboundSchema;
  /** @deprecated use `QtiAssessmentItemRequest$outboundSchema` instead. */
  export const outboundSchema = QtiAssessmentItemRequest$outboundSchema;
  /** @deprecated use `QtiAssessmentItemRequest$Outbound` instead. */
  export type Outbound = QtiAssessmentItemRequest$Outbound;
}

export function qtiAssessmentItemRequestToJSON(
  qtiAssessmentItemRequest: QtiAssessmentItemRequest,
): string {
  return JSON.stringify(
    QtiAssessmentItemRequest$outboundSchema.parse(qtiAssessmentItemRequest),
  );
}

export function qtiAssessmentItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<QtiAssessmentItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QtiAssessmentItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QtiAssessmentItemRequest' from JSON`,
  );
}

/** @internal */
export const ContentRequest$inboundSchema: z.ZodType<
  ContentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-item": z.lazy(() => QtiAssessmentItemRequest$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-item": "qtiAssessmentItem",
  });
});

/** @internal */
export type ContentRequest$Outbound = {
  "qti-assessment-item": QtiAssessmentItemRequest$Outbound;
};

/** @internal */
export const ContentRequest$outboundSchema: z.ZodType<
  ContentRequest$Outbound,
  z.ZodTypeDef,
  ContentRequest
> = z.object({
  qtiAssessmentItem: z.lazy(() => QtiAssessmentItemRequest$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentItem: "qti-assessment-item",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRequest$ {
  /** @deprecated use `ContentRequest$inboundSchema` instead. */
  export const inboundSchema = ContentRequest$inboundSchema;
  /** @deprecated use `ContentRequest$outboundSchema` instead. */
  export const outboundSchema = ContentRequest$outboundSchema;
  /** @deprecated use `ContentRequest$Outbound` instead. */
  export type Outbound = ContentRequest$Outbound;
}

export function contentRequestToJSON(contentRequest: ContentRequest): string {
  return JSON.stringify(ContentRequest$outboundSchema.parse(contentRequest));
}

export function contentRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRequest' from JSON`,
  );
}

/** @internal */
export const ModalFeedbackShowHideRequest$inboundSchema: z.ZodNativeEnum<
  typeof ModalFeedbackShowHideRequest
> = z.nativeEnum(ModalFeedbackShowHideRequest);

/** @internal */
export const ModalFeedbackShowHideRequest$outboundSchema: z.ZodNativeEnum<
  typeof ModalFeedbackShowHideRequest
> = ModalFeedbackShowHideRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModalFeedbackShowHideRequest$ {
  /** @deprecated use `ModalFeedbackShowHideRequest$inboundSchema` instead. */
  export const inboundSchema = ModalFeedbackShowHideRequest$inboundSchema;
  /** @deprecated use `ModalFeedbackShowHideRequest$outboundSchema` instead. */
  export const outboundSchema = ModalFeedbackShowHideRequest$outboundSchema;
}

/** @internal */
export const ModalFeedbackRequest$inboundSchema: z.ZodType<
  ModalFeedbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: ModalFeedbackShowHideRequest$inboundSchema,
  content: z.string(),
  title: z.string(),
});

/** @internal */
export type ModalFeedbackRequest$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  title: string;
};

/** @internal */
export const ModalFeedbackRequest$outboundSchema: z.ZodType<
  ModalFeedbackRequest$Outbound,
  z.ZodTypeDef,
  ModalFeedbackRequest
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: ModalFeedbackShowHideRequest$outboundSchema,
  content: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModalFeedbackRequest$ {
  /** @deprecated use `ModalFeedbackRequest$inboundSchema` instead. */
  export const inboundSchema = ModalFeedbackRequest$inboundSchema;
  /** @deprecated use `ModalFeedbackRequest$outboundSchema` instead. */
  export const outboundSchema = ModalFeedbackRequest$outboundSchema;
  /** @deprecated use `ModalFeedbackRequest$Outbound` instead. */
  export type Outbound = ModalFeedbackRequest$Outbound;
}

export function modalFeedbackRequestToJSON(
  modalFeedbackRequest: ModalFeedbackRequest,
): string {
  return JSON.stringify(
    ModalFeedbackRequest$outboundSchema.parse(modalFeedbackRequest),
  );
}

export function modalFeedbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModalFeedbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModalFeedbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModalFeedbackRequest' from JSON`,
  );
}

/** @internal */
export const FeedbackInlineShowHideRequest$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackInlineShowHideRequest
> = z.nativeEnum(FeedbackInlineShowHideRequest);

/** @internal */
export const FeedbackInlineShowHideRequest$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackInlineShowHideRequest
> = FeedbackInlineShowHideRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackInlineShowHideRequest$ {
  /** @deprecated use `FeedbackInlineShowHideRequest$inboundSchema` instead. */
  export const inboundSchema = FeedbackInlineShowHideRequest$inboundSchema;
  /** @deprecated use `FeedbackInlineShowHideRequest$outboundSchema` instead. */
  export const outboundSchema = FeedbackInlineShowHideRequest$outboundSchema;
}

/** @internal */
export const FeedbackInlineRequest$inboundSchema: z.ZodType<
  FeedbackInlineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackInlineShowHideRequest$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type FeedbackInlineRequest$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const FeedbackInlineRequest$outboundSchema: z.ZodType<
  FeedbackInlineRequest$Outbound,
  z.ZodTypeDef,
  FeedbackInlineRequest
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackInlineShowHideRequest$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackInlineRequest$ {
  /** @deprecated use `FeedbackInlineRequest$inboundSchema` instead. */
  export const inboundSchema = FeedbackInlineRequest$inboundSchema;
  /** @deprecated use `FeedbackInlineRequest$outboundSchema` instead. */
  export const outboundSchema = FeedbackInlineRequest$outboundSchema;
  /** @deprecated use `FeedbackInlineRequest$Outbound` instead. */
  export type Outbound = FeedbackInlineRequest$Outbound;
}

export function feedbackInlineRequestToJSON(
  feedbackInlineRequest: FeedbackInlineRequest,
): string {
  return JSON.stringify(
    FeedbackInlineRequest$outboundSchema.parse(feedbackInlineRequest),
  );
}

export function feedbackInlineRequestFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackInlineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackInlineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackInlineRequest' from JSON`,
  );
}

/** @internal */
export const FeedbackBlockShowHideRequest$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackBlockShowHideRequest
> = z.nativeEnum(FeedbackBlockShowHideRequest);

/** @internal */
export const FeedbackBlockShowHideRequest$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackBlockShowHideRequest
> = FeedbackBlockShowHideRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackBlockShowHideRequest$ {
  /** @deprecated use `FeedbackBlockShowHideRequest$inboundSchema` instead. */
  export const inboundSchema = FeedbackBlockShowHideRequest$inboundSchema;
  /** @deprecated use `FeedbackBlockShowHideRequest$outboundSchema` instead. */
  export const outboundSchema = FeedbackBlockShowHideRequest$outboundSchema;
}

/** @internal */
export const FeedbackBlockRequest$inboundSchema: z.ZodType<
  FeedbackBlockRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackBlockShowHideRequest$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type FeedbackBlockRequest$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const FeedbackBlockRequest$outboundSchema: z.ZodType<
  FeedbackBlockRequest$Outbound,
  z.ZodTypeDef,
  FeedbackBlockRequest
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackBlockShowHideRequest$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackBlockRequest$ {
  /** @deprecated use `FeedbackBlockRequest$inboundSchema` instead. */
  export const inboundSchema = FeedbackBlockRequest$inboundSchema;
  /** @deprecated use `FeedbackBlockRequest$outboundSchema` instead. */
  export const outboundSchema = FeedbackBlockRequest$outboundSchema;
  /** @deprecated use `FeedbackBlockRequest$Outbound` instead. */
  export type Outbound = FeedbackBlockRequest$Outbound;
}

export function feedbackBlockRequestToJSON(
  feedbackBlockRequest: FeedbackBlockRequest,
): string {
  return JSON.stringify(
    FeedbackBlockRequest$outboundSchema.parse(feedbackBlockRequest),
  );
}

export function feedbackBlockRequestFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackBlockRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackBlockRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackBlockRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemRequestBody$inboundSchema: z.ZodType<
  UpdateAssessmentItemRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: TypeRequest$inboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => ResponseDeclarationRequest$inboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => OutcomeDeclarationRequest$inboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() => ResponseProcessingRequest$inboundSchema),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => ContentRequest$inboundSchema),
  modalFeedback: z.array(z.lazy(() => ModalFeedbackRequest$inboundSchema))
    .optional(),
  feedbackInline: z.array(z.lazy(() => FeedbackInlineRequest$inboundSchema))
    .optional(),
  feedbackBlock: z.array(z.lazy(() => FeedbackBlockRequest$inboundSchema))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type UpdateAssessmentItemRequestBody$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  type: string;
  qtiVersion: string;
  timeDependent: boolean;
  adaptive: boolean;
  responseDeclarations?: Array<ResponseDeclarationRequest$Outbound> | undefined;
  outcomeDeclarations?: Array<OutcomeDeclarationRequest$Outbound> | undefined;
  responseProcessing: ResponseProcessingRequest$Outbound;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: ContentRequest$Outbound;
  modalFeedback?: Array<ModalFeedbackRequest$Outbound> | undefined;
  feedbackInline?: Array<FeedbackInlineRequest$Outbound> | undefined;
  feedbackBlock?: Array<FeedbackBlockRequest$Outbound> | undefined;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const UpdateAssessmentItemRequestBody$outboundSchema: z.ZodType<
  UpdateAssessmentItemRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemRequestBody
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: TypeRequest$outboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => ResponseDeclarationRequest$outboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => OutcomeDeclarationRequest$outboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() => ResponseProcessingRequest$outboundSchema),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => ContentRequest$outboundSchema),
  modalFeedback: z.array(z.lazy(() => ModalFeedbackRequest$outboundSchema))
    .optional(),
  feedbackInline: z.array(z.lazy(() => FeedbackInlineRequest$outboundSchema))
    .optional(),
  feedbackBlock: z.array(z.lazy(() => FeedbackBlockRequest$outboundSchema))
    .optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemRequestBody$ {
  /** @deprecated use `UpdateAssessmentItemRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemRequestBody$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentItemRequestBody$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemRequestBody$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemRequestBody$Outbound;
}

export function updateAssessmentItemRequestBodyToJSON(
  updateAssessmentItemRequestBody: UpdateAssessmentItemRequestBody,
): string {
  return JSON.stringify(
    UpdateAssessmentItemRequestBody$outboundSchema.parse(
      updateAssessmentItemRequestBody,
    ),
  );
}

export function updateAssessmentItemRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentItemRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemRequest$inboundSchema: z.ZodType<
  UpdateAssessmentItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  RequestBody: z.lazy(() => UpdateAssessmentItemRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAssessmentItemRequest$Outbound = {
  identifier: string;
  RequestBody: UpdateAssessmentItemRequestBody$Outbound;
};

/** @internal */
export const UpdateAssessmentItemRequest$outboundSchema: z.ZodType<
  UpdateAssessmentItemRequest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemRequest
> = z.object({
  identifier: z.string(),
  requestBody: z.lazy(() => UpdateAssessmentItemRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemRequest$ {
  /** @deprecated use `UpdateAssessmentItemRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemRequest$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentItemRequest$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemRequest$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemRequest$Outbound;
}

export function updateAssessmentItemRequestToJSON(
  updateAssessmentItemRequest: UpdateAssessmentItemRequest,
): string {
  return JSON.stringify(
    UpdateAssessmentItemRequest$outboundSchema.parse(
      updateAssessmentItemRequest,
    ),
  );
}

export function updateAssessmentItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentItemTypeResponse
> = z.nativeEnum(UpdateAssessmentItemTypeResponse);

/** @internal */
export const UpdateAssessmentItemTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAssessmentItemTypeResponse
> = UpdateAssessmentItemTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemTypeResponse$ {
  /** @deprecated use `UpdateAssessmentItemTypeResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemTypeResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemTypeResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentItemTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemResponseDeclarationCardinalityResponse$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemResponseDeclarationCardinalityResponse
  > = z.nativeEnum(UpdateAssessmentItemResponseDeclarationCardinalityResponse);

/** @internal */
export const UpdateAssessmentItemResponseDeclarationCardinalityResponse$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemResponseDeclarationCardinalityResponse
  > = UpdateAssessmentItemResponseDeclarationCardinalityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemResponseDeclarationCardinalityResponse$ {
  /** @deprecated use `UpdateAssessmentItemResponseDeclarationCardinalityResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemResponseDeclarationCardinalityResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponseDeclarationCardinalityResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemResponseDeclarationCardinalityResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemResponseDeclarationBaseTypeResponse$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemResponseDeclarationBaseTypeResponse
  > = z.nativeEnum(UpdateAssessmentItemResponseDeclarationBaseTypeResponse);

/** @internal */
export const UpdateAssessmentItemResponseDeclarationBaseTypeResponse$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemResponseDeclarationBaseTypeResponse
  > = UpdateAssessmentItemResponseDeclarationBaseTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemResponseDeclarationBaseTypeResponse$ {
  /** @deprecated use `UpdateAssessmentItemResponseDeclarationBaseTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemResponseDeclarationBaseTypeResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponseDeclarationBaseTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemResponseDeclarationBaseTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemCorrectResponseResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemCorrectResponseResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.array(z.string()),
  });

/** @internal */
export type UpdateAssessmentItemCorrectResponseResponse$Outbound = {
  value: Array<string>;
};

/** @internal */
export const UpdateAssessmentItemCorrectResponseResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemCorrectResponseResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemCorrectResponseResponse
  > = z.object({
    value: z.array(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemCorrectResponseResponse$ {
  /** @deprecated use `UpdateAssessmentItemCorrectResponseResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemCorrectResponseResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemCorrectResponseResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemCorrectResponseResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemCorrectResponseResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemCorrectResponseResponse$Outbound;
}

export function updateAssessmentItemCorrectResponseResponseToJSON(
  updateAssessmentItemCorrectResponseResponse:
    UpdateAssessmentItemCorrectResponseResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemCorrectResponseResponse$outboundSchema.parse(
      updateAssessmentItemCorrectResponseResponse,
    ),
  );
}

export function updateAssessmentItemCorrectResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemCorrectResponseResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemCorrectResponseResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemCorrectResponseResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemResponseDeclarationResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemResponseDeclarationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality:
      UpdateAssessmentItemResponseDeclarationCardinalityResponse$inboundSchema,
    baseType:
      UpdateAssessmentItemResponseDeclarationBaseTypeResponse$inboundSchema
        .optional(),
    correctResponse: z.lazy(() =>
      UpdateAssessmentItemCorrectResponseResponse$inboundSchema
    ),
  });

/** @internal */
export type UpdateAssessmentItemResponseDeclarationResponse$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
  correctResponse: UpdateAssessmentItemCorrectResponseResponse$Outbound;
};

/** @internal */
export const UpdateAssessmentItemResponseDeclarationResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemResponseDeclarationResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemResponseDeclarationResponse
  > = z.object({
    identifier: z.string(),
    cardinality:
      UpdateAssessmentItemResponseDeclarationCardinalityResponse$outboundSchema,
    baseType:
      UpdateAssessmentItemResponseDeclarationBaseTypeResponse$outboundSchema
        .optional(),
    correctResponse: z.lazy(() =>
      UpdateAssessmentItemCorrectResponseResponse$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemResponseDeclarationResponse$ {
  /** @deprecated use `UpdateAssessmentItemResponseDeclarationResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemResponseDeclarationResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponseDeclarationResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemResponseDeclarationResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponseDeclarationResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemResponseDeclarationResponse$Outbound;
}

export function updateAssessmentItemResponseDeclarationResponseToJSON(
  updateAssessmentItemResponseDeclarationResponse:
    UpdateAssessmentItemResponseDeclarationResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemResponseDeclarationResponse$outboundSchema.parse(
      updateAssessmentItemResponseDeclarationResponse,
    ),
  );
}

export function updateAssessmentItemResponseDeclarationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemResponseDeclarationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemResponseDeclarationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemResponseDeclarationResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemOutcomeDeclarationCardinalityResponse
  > = z.nativeEnum(UpdateAssessmentItemOutcomeDeclarationCardinalityResponse);

/** @internal */
export const UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemOutcomeDeclarationCardinalityResponse
  > = UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$ {
  /** @deprecated use `UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse
  > = z.nativeEnum(UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse);

/** @internal */
export const UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse
  > = UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$ {
  /** @deprecated use `UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemOutcomeDeclarationResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemOutcomeDeclarationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality:
      UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$inboundSchema,
    baseType:
      UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$inboundSchema
        .optional(),
  });

/** @internal */
export type UpdateAssessmentItemOutcomeDeclarationResponse$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
};

/** @internal */
export const UpdateAssessmentItemOutcomeDeclarationResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemOutcomeDeclarationResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemOutcomeDeclarationResponse
  > = z.object({
    identifier: z.string(),
    cardinality:
      UpdateAssessmentItemOutcomeDeclarationCardinalityResponse$outboundSchema,
    baseType:
      UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOutcomeDeclarationResponse$ {
  /** @deprecated use `UpdateAssessmentItemOutcomeDeclarationResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOutcomeDeclarationResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOutcomeDeclarationResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOutcomeDeclarationResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOutcomeDeclarationResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemOutcomeDeclarationResponse$Outbound;
}

export function updateAssessmentItemOutcomeDeclarationResponseToJSON(
  updateAssessmentItemOutcomeDeclarationResponse:
    UpdateAssessmentItemOutcomeDeclarationResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemOutcomeDeclarationResponse$outboundSchema.parse(
      updateAssessmentItemOutcomeDeclarationResponse,
    ),
  );
}

export function updateAssessmentItemOutcomeDeclarationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemOutcomeDeclarationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemOutcomeDeclarationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemOutcomeDeclarationResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemTemplateTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemTemplateTypeResponse> = z
    .nativeEnum(UpdateAssessmentItemTemplateTypeResponse);

/** @internal */
export const UpdateAssessmentItemTemplateTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemTemplateTypeResponse> =
    UpdateAssessmentItemTemplateTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemTemplateTypeResponse$ {
  /** @deprecated use `UpdateAssessmentItemTemplateTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemTemplateTypeResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemTemplateTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemTemplateTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemInlineFeedbackResponse$inboundSchema:
  z.ZodType<UpdateAssessmentItemInlineFeedbackResponse, z.ZodTypeDef, unknown> =
    z.object({
      outcomeIdentifier: z.string(),
      variableIdentifier: z.string(),
    });

/** @internal */
export type UpdateAssessmentItemInlineFeedbackResponse$Outbound = {
  outcomeIdentifier: string;
  variableIdentifier: string;
};

/** @internal */
export const UpdateAssessmentItemInlineFeedbackResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemInlineFeedbackResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemInlineFeedbackResponse
  > = z.object({
    outcomeIdentifier: z.string(),
    variableIdentifier: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemInlineFeedbackResponse$ {
  /** @deprecated use `UpdateAssessmentItemInlineFeedbackResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemInlineFeedbackResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemInlineFeedbackResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemInlineFeedbackResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemInlineFeedbackResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemInlineFeedbackResponse$Outbound;
}

export function updateAssessmentItemInlineFeedbackResponseToJSON(
  updateAssessmentItemInlineFeedbackResponse:
    UpdateAssessmentItemInlineFeedbackResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemInlineFeedbackResponse$outboundSchema.parse(
      updateAssessmentItemInlineFeedbackResponse,
    ),
  );
}

export function updateAssessmentItemInlineFeedbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemInlineFeedbackResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemInlineFeedbackResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemInlineFeedbackResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemResponseProcessingResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemResponseProcessingResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    templateType: UpdateAssessmentItemTemplateTypeResponse$inboundSchema,
    responseDeclarationIdentifier: z.string(),
    outcomeIdentifier: z.string(),
    correctResponseIdentifier: z.string(),
    incorrectResponseIdentifier: z.string(),
    inlineFeedback: z.lazy(() =>
      UpdateAssessmentItemInlineFeedbackResponse$inboundSchema
    ).optional(),
  });

/** @internal */
export type UpdateAssessmentItemResponseProcessingResponse$Outbound = {
  templateType: string;
  responseDeclarationIdentifier: string;
  outcomeIdentifier: string;
  correctResponseIdentifier: string;
  incorrectResponseIdentifier: string;
  inlineFeedback?:
    | UpdateAssessmentItemInlineFeedbackResponse$Outbound
    | undefined;
};

/** @internal */
export const UpdateAssessmentItemResponseProcessingResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemResponseProcessingResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemResponseProcessingResponse
  > = z.object({
    templateType: UpdateAssessmentItemTemplateTypeResponse$outboundSchema,
    responseDeclarationIdentifier: z.string(),
    outcomeIdentifier: z.string(),
    correctResponseIdentifier: z.string(),
    incorrectResponseIdentifier: z.string(),
    inlineFeedback: z.lazy(() =>
      UpdateAssessmentItemInlineFeedbackResponse$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemResponseProcessingResponse$ {
  /** @deprecated use `UpdateAssessmentItemResponseProcessingResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemResponseProcessingResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponseProcessingResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemResponseProcessingResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponseProcessingResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemResponseProcessingResponse$Outbound;
}

export function updateAssessmentItemResponseProcessingResponseToJSON(
  updateAssessmentItemResponseProcessingResponse:
    UpdateAssessmentItemResponseProcessingResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemResponseProcessingResponse$outboundSchema.parse(
      updateAssessmentItemResponseProcessingResponse,
    ),
  );
}

export function updateAssessmentItemResponseProcessingResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemResponseProcessingResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemResponseProcessingResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemResponseProcessingResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemAttributesResponse$inboundSchema: z.ZodType<
  UpdateAssessmentItemAttributesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  xmlns: z.string(),
  "xmlns:xsi": z.string(),
  "xsi:schemaLocation": z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  "time-dependent": z.string(),
}).transform((v) => {
  return remap$(v, {
    "xmlns:xsi": "xmlnsXsi",
    "xsi:schemaLocation": "xsiSchemaLocation",
    "time-dependent": "timeDependent",
  });
});

/** @internal */
export type UpdateAssessmentItemAttributesResponse$Outbound = {
  xmlns: string;
  "xmlns:xsi": string;
  "xsi:schemaLocation": string;
  identifier: string;
  title: string;
  adaptive: string;
  "time-dependent": string;
};

/** @internal */
export const UpdateAssessmentItemAttributesResponse$outboundSchema: z.ZodType<
  UpdateAssessmentItemAttributesResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemAttributesResponse
> = z.object({
  xmlns: z.string(),
  xmlnsXsi: z.string(),
  xsiSchemaLocation: z.string(),
  identifier: z.string(),
  title: z.string(),
  adaptive: z.string(),
  timeDependent: z.string(),
}).transform((v) => {
  return remap$(v, {
    xmlnsXsi: "xmlns:xsi",
    xsiSchemaLocation: "xsi:schemaLocation",
    timeDependent: "time-dependent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemAttributesResponse$ {
  /** @deprecated use `UpdateAssessmentItemAttributesResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemAttributesResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemAttributesResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemAttributesResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemAttributesResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemAttributesResponse$Outbound;
}

export function updateAssessmentItemAttributesResponseToJSON(
  updateAssessmentItemAttributesResponse:
    UpdateAssessmentItemAttributesResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemAttributesResponse$outboundSchema.parse(
      updateAssessmentItemAttributesResponse,
    ),
  );
}

export function updateAssessmentItemAttributesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemAttributesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemAttributesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemAttributesResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$Outbound =
  {
    identifier: string;
    cardinality: string;
    baseType: string;
  };

/** @internal */
export const UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$Outbound;
}

export function updateAssessmentItemQtiResponseDeclarationAttributesResponseToJSON(
  updateAssessmentItemQtiResponseDeclarationAttributesResponse:
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$outboundSchema
      .parse(updateAssessmentItemQtiResponseDeclarationAttributesResponse),
  );
}

export function updateAssessmentItemQtiResponseDeclarationAttributesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiResponseDeclarationAttributesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemQtiResponseDeclarationAttributesResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiCorrectResponseResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiCorrectResponseResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "qti-value": z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "qti-value": "qtiValue",
    });
  });

/** @internal */
export type UpdateAssessmentItemQtiCorrectResponseResponse$Outbound = {
  "qti-value": Array<string>;
};

/** @internal */
export const UpdateAssessmentItemQtiCorrectResponseResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiCorrectResponseResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiCorrectResponseResponse
  > = z.object({
    qtiValue: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      qtiValue: "qti-value",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiCorrectResponseResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiCorrectResponseResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiCorrectResponseResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiCorrectResponseResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiCorrectResponseResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiCorrectResponseResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiCorrectResponseResponse$Outbound;
}

export function updateAssessmentItemQtiCorrectResponseResponseToJSON(
  updateAssessmentItemQtiCorrectResponseResponse:
    UpdateAssessmentItemQtiCorrectResponseResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiCorrectResponseResponse$outboundSchema.parse(
      updateAssessmentItemQtiCorrectResponseResponse,
    ),
  );
}

export function updateAssessmentItemQtiCorrectResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiCorrectResponseResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiCorrectResponseResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemQtiCorrectResponseResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiResponseDeclarationResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiResponseDeclarationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$inboundSchema
    ),
    "qti-correct-response": z.lazy(() =>
      UpdateAssessmentItemQtiCorrectResponseResponse$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-correct-response": "qtiCorrectResponse",
    });
  });

/** @internal */
export type UpdateAssessmentItemQtiResponseDeclarationResponse$Outbound = {
  _attributes:
    UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$Outbound;
  "qti-correct-response":
    UpdateAssessmentItemQtiCorrectResponseResponse$Outbound;
};

/** @internal */
export const UpdateAssessmentItemQtiResponseDeclarationResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiResponseDeclarationResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiResponseDeclarationResponse
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentItemQtiResponseDeclarationAttributesResponse$outboundSchema
    ),
    qtiCorrectResponse: z.lazy(() =>
      UpdateAssessmentItemQtiCorrectResponseResponse$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiCorrectResponse: "qti-correct-response",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiResponseDeclarationResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiResponseDeclarationResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiResponseDeclarationResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiResponseDeclarationResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiResponseDeclarationResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiResponseDeclarationResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiResponseDeclarationResponse$Outbound;
}

export function updateAssessmentItemQtiResponseDeclarationResponseToJSON(
  updateAssessmentItemQtiResponseDeclarationResponse:
    UpdateAssessmentItemQtiResponseDeclarationResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiResponseDeclarationResponse$outboundSchema.parse(
      updateAssessmentItemQtiResponseDeclarationResponse,
    ),
  );
}

export function updateAssessmentItemQtiResponseDeclarationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiResponseDeclarationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiResponseDeclarationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemQtiResponseDeclarationResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/** @internal */
export type UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$Outbound =
  {
    identifier: string;
    cardinality: string;
    baseType: string;
  };

/** @internal */
export const UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse
  > = z.object({
    identifier: z.string(),
    cardinality: z.string(),
    baseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$Outbound;
}

export function updateAssessmentItemQtiOutcomeDeclarationAttributesResponseToJSON(
  updateAssessmentItemQtiOutcomeDeclarationAttributesResponse:
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$outboundSchema
      .parse(updateAssessmentItemQtiOutcomeDeclarationAttributesResponse),
  );
}

export function updateAssessmentItemQtiOutcomeDeclarationAttributesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiOutcomeDeclarationResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiOutcomeDeclarationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type UpdateAssessmentItemQtiOutcomeDeclarationResponse$Outbound = {
  _attributes:
    UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$Outbound;
};

/** @internal */
export const UpdateAssessmentItemQtiOutcomeDeclarationResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiOutcomeDeclarationResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiOutcomeDeclarationResponse
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiOutcomeDeclarationResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiOutcomeDeclarationResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiOutcomeDeclarationResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiOutcomeDeclarationResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiOutcomeDeclarationResponse$Outbound;
}

export function updateAssessmentItemQtiOutcomeDeclarationResponseToJSON(
  updateAssessmentItemQtiOutcomeDeclarationResponse:
    UpdateAssessmentItemQtiOutcomeDeclarationResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiOutcomeDeclarationResponse$outboundSchema.parse(
      updateAssessmentItemQtiOutcomeDeclarationResponse,
    ),
  );
}

export function updateAssessmentItemQtiOutcomeDeclarationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiOutcomeDeclarationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiOutcomeDeclarationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemQtiOutcomeDeclarationResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/** @internal */
export type UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$Outbound =
  {
    identifier: string;
    href: string;
    title: string;
  };

/** @internal */
export const UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse
  > = z.object({
    identifier: z.string(),
    href: z.string(),
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$Outbound;
}

export function updateAssessmentItemQtiAssessmentStimulusRefAttributesResponseToJSON(
  updateAssessmentItemQtiAssessmentStimulusRefAttributesResponse:
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$outboundSchema
      .parse(updateAssessmentItemQtiAssessmentStimulusRefAttributesResponse),
  );
}

export function updateAssessmentItemQtiAssessmentStimulusRefAttributesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiAssessmentStimulusRefResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
    });
  });

/** @internal */
export type UpdateAssessmentItemQtiAssessmentStimulusRefResponse$Outbound = {
  _attributes:
    UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$Outbound;
};

/** @internal */
export const UpdateAssessmentItemQtiAssessmentStimulusRefResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiAssessmentStimulusRefResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentStimulusRefResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentStimulusRefResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentStimulusRefResponse$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse$Outbound;
}

export function updateAssessmentItemQtiAssessmentStimulusRefResponseToJSON(
  updateAssessmentItemQtiAssessmentStimulusRefResponse:
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse$outboundSchema.parse(
      updateAssessmentItemQtiAssessmentStimulusRefResponse,
    ),
  );
}

export function updateAssessmentItemQtiAssessmentStimulusRefResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiAssessmentStimulusRefResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiAssessmentStimulusRefResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemQtiAssessmentStimulusRefResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemQtiAssessmentItemResponse$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiAssessmentItemResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _attributes: z.lazy(() =>
      UpdateAssessmentItemAttributesResponse$inboundSchema
    ),
    "qti-response-declaration": z.array(
      z.lazy(() =>
        UpdateAssessmentItemQtiResponseDeclarationResponse$inboundSchema
      ),
    ),
    "qti-outcome-declaration": z.array(
      z.lazy(() =>
        UpdateAssessmentItemQtiOutcomeDeclarationResponse$inboundSchema
      ),
    ),
    "qti-assessment-stimulus-ref": z.lazy(() =>
      UpdateAssessmentItemQtiAssessmentStimulusRefResponse$inboundSchema
    ),
    "qti-item-body": z.any().optional(),
    "qti-response-processing": z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_attributes": "attributes",
      "qti-response-declaration": "qtiResponseDeclaration",
      "qti-outcome-declaration": "qtiOutcomeDeclaration",
      "qti-assessment-stimulus-ref": "qtiAssessmentStimulusRef",
      "qti-item-body": "qtiItemBody",
      "qti-response-processing": "qtiResponseProcessing",
    });
  });

/** @internal */
export type UpdateAssessmentItemQtiAssessmentItemResponse$Outbound = {
  _attributes: UpdateAssessmentItemAttributesResponse$Outbound;
  "qti-response-declaration": Array<
    UpdateAssessmentItemQtiResponseDeclarationResponse$Outbound
  >;
  "qti-outcome-declaration": Array<
    UpdateAssessmentItemQtiOutcomeDeclarationResponse$Outbound
  >;
  "qti-assessment-stimulus-ref":
    UpdateAssessmentItemQtiAssessmentStimulusRefResponse$Outbound;
  "qti-item-body"?: any | undefined;
  "qti-response-processing"?: any | undefined;
};

/** @internal */
export const UpdateAssessmentItemQtiAssessmentItemResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemQtiAssessmentItemResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemQtiAssessmentItemResponse
  > = z.object({
    attributes: z.lazy(() =>
      UpdateAssessmentItemAttributesResponse$outboundSchema
    ),
    qtiResponseDeclaration: z.array(
      z.lazy(() =>
        UpdateAssessmentItemQtiResponseDeclarationResponse$outboundSchema
      ),
    ),
    qtiOutcomeDeclaration: z.array(
      z.lazy(() =>
        UpdateAssessmentItemQtiOutcomeDeclarationResponse$outboundSchema
      ),
    ),
    qtiAssessmentStimulusRef: z.lazy(() =>
      UpdateAssessmentItemQtiAssessmentStimulusRefResponse$outboundSchema
    ),
    qtiItemBody: z.any().optional(),
    qtiResponseProcessing: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributes: "_attributes",
      qtiResponseDeclaration: "qti-response-declaration",
      qtiOutcomeDeclaration: "qti-outcome-declaration",
      qtiAssessmentStimulusRef: "qti-assessment-stimulus-ref",
      qtiItemBody: "qti-item-body",
      qtiResponseProcessing: "qti-response-processing",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemQtiAssessmentItemResponse$ {
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentItemResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemQtiAssessmentItemResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentItemResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemQtiAssessmentItemResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemQtiAssessmentItemResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemQtiAssessmentItemResponse$Outbound;
}

export function updateAssessmentItemQtiAssessmentItemResponseToJSON(
  updateAssessmentItemQtiAssessmentItemResponse:
    UpdateAssessmentItemQtiAssessmentItemResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemQtiAssessmentItemResponse$outboundSchema.parse(
      updateAssessmentItemQtiAssessmentItemResponse,
    ),
  );
}

export function updateAssessmentItemQtiAssessmentItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemQtiAssessmentItemResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemQtiAssessmentItemResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemQtiAssessmentItemResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemContentResponse$inboundSchema: z.ZodType<
  UpdateAssessmentItemContentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-assessment-item": z.lazy(() =>
    UpdateAssessmentItemQtiAssessmentItemResponse$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-item": "qtiAssessmentItem",
  });
});

/** @internal */
export type UpdateAssessmentItemContentResponse$Outbound = {
  "qti-assessment-item": UpdateAssessmentItemQtiAssessmentItemResponse$Outbound;
};

/** @internal */
export const UpdateAssessmentItemContentResponse$outboundSchema: z.ZodType<
  UpdateAssessmentItemContentResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemContentResponse
> = z.object({
  qtiAssessmentItem: z.lazy(() =>
    UpdateAssessmentItemQtiAssessmentItemResponse$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentItem: "qti-assessment-item",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemContentResponse$ {
  /** @deprecated use `UpdateAssessmentItemContentResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemContentResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemContentResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemContentResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemContentResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemContentResponse$Outbound;
}

export function updateAssessmentItemContentResponseToJSON(
  updateAssessmentItemContentResponse: UpdateAssessmentItemContentResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemContentResponse$outboundSchema.parse(
      updateAssessmentItemContentResponse,
    ),
  );
}

export function updateAssessmentItemContentResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemContentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemContentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemContentResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemModalFeedbackShowHideResponse$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemModalFeedbackShowHideResponse> = z
    .nativeEnum(UpdateAssessmentItemModalFeedbackShowHideResponse);

/** @internal */
export const UpdateAssessmentItemModalFeedbackShowHideResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemModalFeedbackShowHideResponse> =
    UpdateAssessmentItemModalFeedbackShowHideResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemModalFeedbackShowHideResponse$ {
  /** @deprecated use `UpdateAssessmentItemModalFeedbackShowHideResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemModalFeedbackShowHideResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemModalFeedbackShowHideResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemModalFeedbackShowHideResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemModalFeedbackResponse$inboundSchema: z.ZodType<
  UpdateAssessmentItemModalFeedbackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: UpdateAssessmentItemModalFeedbackShowHideResponse$inboundSchema,
  content: z.string(),
  title: z.string(),
});

/** @internal */
export type UpdateAssessmentItemModalFeedbackResponse$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  title: string;
};

/** @internal */
export const UpdateAssessmentItemModalFeedbackResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemModalFeedbackResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemModalFeedbackResponse
  > = z.object({
    outcomeIdentifier: z.string(),
    identifier: z.string(),
    showHide: UpdateAssessmentItemModalFeedbackShowHideResponse$outboundSchema,
    content: z.string(),
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemModalFeedbackResponse$ {
  /** @deprecated use `UpdateAssessmentItemModalFeedbackResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemModalFeedbackResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemModalFeedbackResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemModalFeedbackResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemModalFeedbackResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemModalFeedbackResponse$Outbound;
}

export function updateAssessmentItemModalFeedbackResponseToJSON(
  updateAssessmentItemModalFeedbackResponse:
    UpdateAssessmentItemModalFeedbackResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemModalFeedbackResponse$outboundSchema.parse(
      updateAssessmentItemModalFeedbackResponse,
    ),
  );
}

export function updateAssessmentItemModalFeedbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemModalFeedbackResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemModalFeedbackResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemModalFeedbackResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemFeedbackInlineShowHideResponse$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemFeedbackInlineShowHideResponse> = z
    .nativeEnum(UpdateAssessmentItemFeedbackInlineShowHideResponse);

/** @internal */
export const UpdateAssessmentItemFeedbackInlineShowHideResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemFeedbackInlineShowHideResponse> =
    UpdateAssessmentItemFeedbackInlineShowHideResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemFeedbackInlineShowHideResponse$ {
  /** @deprecated use `UpdateAssessmentItemFeedbackInlineShowHideResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemFeedbackInlineShowHideResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemFeedbackInlineShowHideResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemFeedbackInlineShowHideResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemFeedbackInlineResponse$inboundSchema:
  z.ZodType<UpdateAssessmentItemFeedbackInlineResponse, z.ZodTypeDef, unknown> =
    z.object({
      outcomeIdentifier: z.string(),
      identifier: z.string(),
      showHide:
        UpdateAssessmentItemFeedbackInlineShowHideResponse$inboundSchema,
      content: z.string(),
      class: z.array(z.string()),
    });

/** @internal */
export type UpdateAssessmentItemFeedbackInlineResponse$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const UpdateAssessmentItemFeedbackInlineResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemFeedbackInlineResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemFeedbackInlineResponse
  > = z.object({
    outcomeIdentifier: z.string(),
    identifier: z.string(),
    showHide: UpdateAssessmentItemFeedbackInlineShowHideResponse$outboundSchema,
    content: z.string(),
    class: z.array(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemFeedbackInlineResponse$ {
  /** @deprecated use `UpdateAssessmentItemFeedbackInlineResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemFeedbackInlineResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemFeedbackInlineResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemFeedbackInlineResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemFeedbackInlineResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemFeedbackInlineResponse$Outbound;
}

export function updateAssessmentItemFeedbackInlineResponseToJSON(
  updateAssessmentItemFeedbackInlineResponse:
    UpdateAssessmentItemFeedbackInlineResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemFeedbackInlineResponse$outboundSchema.parse(
      updateAssessmentItemFeedbackInlineResponse,
    ),
  );
}

export function updateAssessmentItemFeedbackInlineResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemFeedbackInlineResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemFeedbackInlineResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemFeedbackInlineResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemFeedbackBlockShowHideResponse$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemFeedbackBlockShowHideResponse> = z
    .nativeEnum(UpdateAssessmentItemFeedbackBlockShowHideResponse);

/** @internal */
export const UpdateAssessmentItemFeedbackBlockShowHideResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAssessmentItemFeedbackBlockShowHideResponse> =
    UpdateAssessmentItemFeedbackBlockShowHideResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemFeedbackBlockShowHideResponse$ {
  /** @deprecated use `UpdateAssessmentItemFeedbackBlockShowHideResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemFeedbackBlockShowHideResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemFeedbackBlockShowHideResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemFeedbackBlockShowHideResponse$outboundSchema;
}

/** @internal */
export const UpdateAssessmentItemFeedbackBlockResponse$inboundSchema: z.ZodType<
  UpdateAssessmentItemFeedbackBlockResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: UpdateAssessmentItemFeedbackBlockShowHideResponse$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type UpdateAssessmentItemFeedbackBlockResponse$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const UpdateAssessmentItemFeedbackBlockResponse$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemFeedbackBlockResponse$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemFeedbackBlockResponse
  > = z.object({
    outcomeIdentifier: z.string(),
    identifier: z.string(),
    showHide: UpdateAssessmentItemFeedbackBlockShowHideResponse$outboundSchema,
    content: z.string(),
    class: z.array(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemFeedbackBlockResponse$ {
  /** @deprecated use `UpdateAssessmentItemFeedbackBlockResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemFeedbackBlockResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemFeedbackBlockResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemFeedbackBlockResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemFeedbackBlockResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemFeedbackBlockResponse$Outbound;
}

export function updateAssessmentItemFeedbackBlockResponseToJSON(
  updateAssessmentItemFeedbackBlockResponse:
    UpdateAssessmentItemFeedbackBlockResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemFeedbackBlockResponse$outboundSchema.parse(
      updateAssessmentItemFeedbackBlockResponse,
    ),
  );
}

export function updateAssessmentItemFeedbackBlockResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAssessmentItemFeedbackBlockResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAssessmentItemFeedbackBlockResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAssessmentItemFeedbackBlockResponse' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentItemResponse$inboundSchema: z.ZodType<
  UpdateAssessmentItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: UpdateAssessmentItemTypeResponse$inboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => UpdateAssessmentItemResponseDeclarationResponse$inboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => UpdateAssessmentItemOutcomeDeclarationResponse$inboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    UpdateAssessmentItemResponseProcessingResponse$inboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentItemContentResponse$inboundSchema),
  modalFeedback: z.array(
    z.lazy(() => UpdateAssessmentItemModalFeedbackResponse$inboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => UpdateAssessmentItemFeedbackInlineResponse$inboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => UpdateAssessmentItemFeedbackBlockResponse$inboundSchema),
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "__v": "v",
  });
});

/** @internal */
export type UpdateAssessmentItemResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  type: string;
  qtiVersion: string;
  timeDependent: boolean;
  adaptive: boolean;
  responseDeclarations?:
    | Array<UpdateAssessmentItemResponseDeclarationResponse$Outbound>
    | undefined;
  outcomeDeclarations?:
    | Array<UpdateAssessmentItemOutcomeDeclarationResponse$Outbound>
    | undefined;
  responseProcessing: UpdateAssessmentItemResponseProcessingResponse$Outbound;
  metadata?: { [k: string]: any } | undefined;
  rawXml: string;
  content: UpdateAssessmentItemContentResponse$Outbound;
  modalFeedback?:
    | Array<UpdateAssessmentItemModalFeedbackResponse$Outbound>
    | undefined;
  feedbackInline?:
    | Array<UpdateAssessmentItemFeedbackInlineResponse$Outbound>
    | undefined;
  feedbackBlock?:
    | Array<UpdateAssessmentItemFeedbackBlockResponse$Outbound>
    | undefined;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const UpdateAssessmentItemResponse$outboundSchema: z.ZodType<
  UpdateAssessmentItemResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  type: UpdateAssessmentItemTypeResponse$outboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() =>
      UpdateAssessmentItemResponseDeclarationResponse$outboundSchema
    ),
  ).optional(),
  outcomeDeclarations: z.array(
    z.lazy(() => UpdateAssessmentItemOutcomeDeclarationResponse$outboundSchema),
  ).optional(),
  responseProcessing: z.lazy(() =>
    UpdateAssessmentItemResponseProcessingResponse$outboundSchema
  ),
  metadata: z.record(z.any()).optional(),
  rawXml: z.string(),
  content: z.lazy(() => UpdateAssessmentItemContentResponse$outboundSchema),
  modalFeedback: z.array(
    z.lazy(() => UpdateAssessmentItemModalFeedbackResponse$outboundSchema),
  ).optional(),
  feedbackInline: z.array(
    z.lazy(() => UpdateAssessmentItemFeedbackInlineResponse$outboundSchema),
  ).optional(),
  feedbackBlock: z.array(
    z.lazy(() => UpdateAssessmentItemFeedbackBlockResponse$outboundSchema),
  ).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemResponse$ {
  /** @deprecated use `UpdateAssessmentItemResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentItemResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemResponse$Outbound;
}

export function updateAssessmentItemResponseToJSON(
  updateAssessmentItemResponse: UpdateAssessmentItemResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentItemResponse$outboundSchema.parse(
      updateAssessmentItemResponse,
    ),
  );
}

export function updateAssessmentItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentItemResponse' from JSON`,
  );
}
