/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateTestPartRequest = {
  /**
   * The unique identifier of the parent assessment test where the test part will be created
   */
  assessmentTestIdentifier: string;
  /**
   * The test part to create
   */
  testPart: models.TestPart;
};

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const CreateTestPartNavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type CreateTestPartNavigationMode = ClosedEnum<
  typeof CreateTestPartNavigationMode
>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const CreateTestPartSubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type CreateTestPartSubmissionMode = ClosedEnum<
  typeof CreateTestPartSubmissionMode
>;

export type CreateTestPartAttributes = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
};

export type CreateTestPartQtiAssessmentSectionAttributes = {
  identifier: string;
  title: string;
  visible: string;
  required: string;
  fixed: string;
};

export type CreateTestPartQtiAssessmentItemRefAttributes = {
  identifier: string;
  href: string;
};

export type CreateTestPartQtiAssessmentItemRef = {
  attributes: CreateTestPartQtiAssessmentItemRefAttributes;
};

export type CreateTestPartQtiAssessmentSection = {
  attributes: CreateTestPartQtiAssessmentSectionAttributes;
  qtiAssessmentItemRef?: Array<CreateTestPartQtiAssessmentItemRef> | undefined;
};

export type CreateTestPartQtiTestPart = {
  attributes: CreateTestPartAttributes;
  qtiAssessmentSection: Array<CreateTestPartQtiAssessmentSection>;
};

export type CreateTestPartContent = {
  qtiTestPart: CreateTestPartQtiTestPart;
};

/**
 * Response data returned after successfully creating a new test part. Includes the generated XML and parsed content structure.
 */
export type CreateTestPartResponse = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: CreateTestPartNavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: CreateTestPartSubmissionMode;
  qtiAssessmentSection: Array<models.Section>;
  /**
   * Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
   */
  rawXml: string;
  content: CreateTestPartContent;
};

/** @internal */
export const CreateTestPartRequest$inboundSchema: z.ZodType<
  CreateTestPartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  TestPart: models.TestPart$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "TestPart": "testPart",
  });
});

/** @internal */
export type CreateTestPartRequest$Outbound = {
  assessmentTestIdentifier: string;
  TestPart: models.TestPart$Outbound;
};

/** @internal */
export const CreateTestPartRequest$outboundSchema: z.ZodType<
  CreateTestPartRequest$Outbound,
  z.ZodTypeDef,
  CreateTestPartRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPart: models.TestPart$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    testPart: "TestPart",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartRequest$ {
  /** @deprecated use `CreateTestPartRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartRequest$inboundSchema;
  /** @deprecated use `CreateTestPartRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartRequest$outboundSchema;
  /** @deprecated use `CreateTestPartRequest$Outbound` instead. */
  export type Outbound = CreateTestPartRequest$Outbound;
}

export function createTestPartRequestToJSON(
  createTestPartRequest: CreateTestPartRequest,
): string {
  return JSON.stringify(
    CreateTestPartRequest$outboundSchema.parse(createTestPartRequest),
  );
}

export function createTestPartRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestPartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTestPartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestPartRequest' from JSON`,
  );
}

/** @internal */
export const CreateTestPartNavigationMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateTestPartNavigationMode
> = z.nativeEnum(CreateTestPartNavigationMode);

/** @internal */
export const CreateTestPartNavigationMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateTestPartNavigationMode
> = CreateTestPartNavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartNavigationMode$ {
  /** @deprecated use `CreateTestPartNavigationMode$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartNavigationMode$inboundSchema;
  /** @deprecated use `CreateTestPartNavigationMode$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartNavigationMode$outboundSchema;
}

/** @internal */
export const CreateTestPartSubmissionMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateTestPartSubmissionMode
> = z.nativeEnum(CreateTestPartSubmissionMode);

/** @internal */
export const CreateTestPartSubmissionMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateTestPartSubmissionMode
> = CreateTestPartSubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartSubmissionMode$ {
  /** @deprecated use `CreateTestPartSubmissionMode$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartSubmissionMode$inboundSchema;
  /** @deprecated use `CreateTestPartSubmissionMode$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartSubmissionMode$outboundSchema;
}

/** @internal */
export const CreateTestPartAttributes$inboundSchema: z.ZodType<
  CreateTestPartAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  "navigation-mode": z.string(),
  "submission-mode": z.string(),
}).transform((v) => {
  return remap$(v, {
    "navigation-mode": "navigationMode",
    "submission-mode": "submissionMode",
  });
});

/** @internal */
export type CreateTestPartAttributes$Outbound = {
  identifier: string;
  "navigation-mode": string;
  "submission-mode": string;
};

/** @internal */
export const CreateTestPartAttributes$outboundSchema: z.ZodType<
  CreateTestPartAttributes$Outbound,
  z.ZodTypeDef,
  CreateTestPartAttributes
> = z.object({
  identifier: z.string(),
  navigationMode: z.string(),
  submissionMode: z.string(),
}).transform((v) => {
  return remap$(v, {
    navigationMode: "navigation-mode",
    submissionMode: "submission-mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartAttributes$ {
  /** @deprecated use `CreateTestPartAttributes$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartAttributes$inboundSchema;
  /** @deprecated use `CreateTestPartAttributes$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartAttributes$outboundSchema;
  /** @deprecated use `CreateTestPartAttributes$Outbound` instead. */
  export type Outbound = CreateTestPartAttributes$Outbound;
}

export function createTestPartAttributesToJSON(
  createTestPartAttributes: CreateTestPartAttributes,
): string {
  return JSON.stringify(
    CreateTestPartAttributes$outboundSchema.parse(createTestPartAttributes),
  );
}

export function createTestPartAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestPartAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTestPartAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestPartAttributes' from JSON`,
  );
}

/** @internal */
export const CreateTestPartQtiAssessmentSectionAttributes$inboundSchema:
  z.ZodType<
    CreateTestPartQtiAssessmentSectionAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
    required: z.string(),
    fixed: z.string(),
  });

/** @internal */
export type CreateTestPartQtiAssessmentSectionAttributes$Outbound = {
  identifier: string;
  title: string;
  visible: string;
  required: string;
  fixed: string;
};

/** @internal */
export const CreateTestPartQtiAssessmentSectionAttributes$outboundSchema:
  z.ZodType<
    CreateTestPartQtiAssessmentSectionAttributes$Outbound,
    z.ZodTypeDef,
    CreateTestPartQtiAssessmentSectionAttributes
  > = z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.string(),
    required: z.string(),
    fixed: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartQtiAssessmentSectionAttributes$ {
  /** @deprecated use `CreateTestPartQtiAssessmentSectionAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateTestPartQtiAssessmentSectionAttributes$inboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentSectionAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateTestPartQtiAssessmentSectionAttributes$outboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentSectionAttributes$Outbound` instead. */
  export type Outbound = CreateTestPartQtiAssessmentSectionAttributes$Outbound;
}

export function createTestPartQtiAssessmentSectionAttributesToJSON(
  createTestPartQtiAssessmentSectionAttributes:
    CreateTestPartQtiAssessmentSectionAttributes,
): string {
  return JSON.stringify(
    CreateTestPartQtiAssessmentSectionAttributes$outboundSchema.parse(
      createTestPartQtiAssessmentSectionAttributes,
    ),
  );
}

export function createTestPartQtiAssessmentSectionAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTestPartQtiAssessmentSectionAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTestPartQtiAssessmentSectionAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTestPartQtiAssessmentSectionAttributes' from JSON`,
  );
}

/** @internal */
export const CreateTestPartQtiAssessmentItemRefAttributes$inboundSchema:
  z.ZodType<
    CreateTestPartQtiAssessmentItemRefAttributes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/** @internal */
export type CreateTestPartQtiAssessmentItemRefAttributes$Outbound = {
  identifier: string;
  href: string;
};

/** @internal */
export const CreateTestPartQtiAssessmentItemRefAttributes$outboundSchema:
  z.ZodType<
    CreateTestPartQtiAssessmentItemRefAttributes$Outbound,
    z.ZodTypeDef,
    CreateTestPartQtiAssessmentItemRefAttributes
  > = z.object({
    identifier: z.string(),
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartQtiAssessmentItemRefAttributes$ {
  /** @deprecated use `CreateTestPartQtiAssessmentItemRefAttributes$inboundSchema` instead. */
  export const inboundSchema =
    CreateTestPartQtiAssessmentItemRefAttributes$inboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentItemRefAttributes$outboundSchema` instead. */
  export const outboundSchema =
    CreateTestPartQtiAssessmentItemRefAttributes$outboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentItemRefAttributes$Outbound` instead. */
  export type Outbound = CreateTestPartQtiAssessmentItemRefAttributes$Outbound;
}

export function createTestPartQtiAssessmentItemRefAttributesToJSON(
  createTestPartQtiAssessmentItemRefAttributes:
    CreateTestPartQtiAssessmentItemRefAttributes,
): string {
  return JSON.stringify(
    CreateTestPartQtiAssessmentItemRefAttributes$outboundSchema.parse(
      createTestPartQtiAssessmentItemRefAttributes,
    ),
  );
}

export function createTestPartQtiAssessmentItemRefAttributesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTestPartQtiAssessmentItemRefAttributes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTestPartQtiAssessmentItemRefAttributes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTestPartQtiAssessmentItemRefAttributes' from JSON`,
  );
}

/** @internal */
export const CreateTestPartQtiAssessmentItemRef$inboundSchema: z.ZodType<
  CreateTestPartQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    CreateTestPartQtiAssessmentItemRefAttributes$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
  });
});

/** @internal */
export type CreateTestPartQtiAssessmentItemRef$Outbound = {
  _attributes: CreateTestPartQtiAssessmentItemRefAttributes$Outbound;
};

/** @internal */
export const CreateTestPartQtiAssessmentItemRef$outboundSchema: z.ZodType<
  CreateTestPartQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  CreateTestPartQtiAssessmentItemRef
> = z.object({
  attributes: z.lazy(() =>
    CreateTestPartQtiAssessmentItemRefAttributes$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartQtiAssessmentItemRef$ {
  /** @deprecated use `CreateTestPartQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    CreateTestPartQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = CreateTestPartQtiAssessmentItemRef$Outbound;
}

export function createTestPartQtiAssessmentItemRefToJSON(
  createTestPartQtiAssessmentItemRef: CreateTestPartQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    CreateTestPartQtiAssessmentItemRef$outboundSchema.parse(
      createTestPartQtiAssessmentItemRef,
    ),
  );
}

export function createTestPartQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestPartQtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTestPartQtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestPartQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const CreateTestPartQtiAssessmentSection$inboundSchema: z.ZodType<
  CreateTestPartQtiAssessmentSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() =>
    CreateTestPartQtiAssessmentSectionAttributes$inboundSchema
  ),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => CreateTestPartQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type CreateTestPartQtiAssessmentSection$Outbound = {
  _attributes: CreateTestPartQtiAssessmentSectionAttributes$Outbound;
  "qti-assessment-item-ref"?:
    | Array<CreateTestPartQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const CreateTestPartQtiAssessmentSection$outboundSchema: z.ZodType<
  CreateTestPartQtiAssessmentSection$Outbound,
  z.ZodTypeDef,
  CreateTestPartQtiAssessmentSection
> = z.object({
  attributes: z.lazy(() =>
    CreateTestPartQtiAssessmentSectionAttributes$outboundSchema
  ),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => CreateTestPartQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartQtiAssessmentSection$ {
  /** @deprecated use `CreateTestPartQtiAssessmentSection$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartQtiAssessmentSection$inboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentSection$outboundSchema` instead. */
  export const outboundSchema =
    CreateTestPartQtiAssessmentSection$outboundSchema;
  /** @deprecated use `CreateTestPartQtiAssessmentSection$Outbound` instead. */
  export type Outbound = CreateTestPartQtiAssessmentSection$Outbound;
}

export function createTestPartQtiAssessmentSectionToJSON(
  createTestPartQtiAssessmentSection: CreateTestPartQtiAssessmentSection,
): string {
  return JSON.stringify(
    CreateTestPartQtiAssessmentSection$outboundSchema.parse(
      createTestPartQtiAssessmentSection,
    ),
  );
}

export function createTestPartQtiAssessmentSectionFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestPartQtiAssessmentSection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTestPartQtiAssessmentSection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestPartQtiAssessmentSection' from JSON`,
  );
}

/** @internal */
export const CreateTestPartQtiTestPart$inboundSchema: z.ZodType<
  CreateTestPartQtiTestPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  _attributes: z.lazy(() => CreateTestPartAttributes$inboundSchema),
  "qti-assessment-section": z.array(
    z.lazy(() => CreateTestPartQtiAssessmentSection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "_attributes": "attributes",
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type CreateTestPartQtiTestPart$Outbound = {
  _attributes: CreateTestPartAttributes$Outbound;
  "qti-assessment-section": Array<CreateTestPartQtiAssessmentSection$Outbound>;
};

/** @internal */
export const CreateTestPartQtiTestPart$outboundSchema: z.ZodType<
  CreateTestPartQtiTestPart$Outbound,
  z.ZodTypeDef,
  CreateTestPartQtiTestPart
> = z.object({
  attributes: z.lazy(() => CreateTestPartAttributes$outboundSchema),
  qtiAssessmentSection: z.array(
    z.lazy(() => CreateTestPartQtiAssessmentSection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    attributes: "_attributes",
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartQtiTestPart$ {
  /** @deprecated use `CreateTestPartQtiTestPart$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartQtiTestPart$inboundSchema;
  /** @deprecated use `CreateTestPartQtiTestPart$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartQtiTestPart$outboundSchema;
  /** @deprecated use `CreateTestPartQtiTestPart$Outbound` instead. */
  export type Outbound = CreateTestPartQtiTestPart$Outbound;
}

export function createTestPartQtiTestPartToJSON(
  createTestPartQtiTestPart: CreateTestPartQtiTestPart,
): string {
  return JSON.stringify(
    CreateTestPartQtiTestPart$outboundSchema.parse(createTestPartQtiTestPart),
  );
}

export function createTestPartQtiTestPartFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestPartQtiTestPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTestPartQtiTestPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestPartQtiTestPart' from JSON`,
  );
}

/** @internal */
export const CreateTestPartContent$inboundSchema: z.ZodType<
  CreateTestPartContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  "qti-test-part": z.lazy(() => CreateTestPartQtiTestPart$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-test-part": "qtiTestPart",
  });
});

/** @internal */
export type CreateTestPartContent$Outbound = {
  "qti-test-part": CreateTestPartQtiTestPart$Outbound;
};

/** @internal */
export const CreateTestPartContent$outboundSchema: z.ZodType<
  CreateTestPartContent$Outbound,
  z.ZodTypeDef,
  CreateTestPartContent
> = z.object({
  qtiTestPart: z.lazy(() => CreateTestPartQtiTestPart$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiTestPart: "qti-test-part",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartContent$ {
  /** @deprecated use `CreateTestPartContent$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartContent$inboundSchema;
  /** @deprecated use `CreateTestPartContent$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartContent$outboundSchema;
  /** @deprecated use `CreateTestPartContent$Outbound` instead. */
  export type Outbound = CreateTestPartContent$Outbound;
}

export function createTestPartContentToJSON(
  createTestPartContent: CreateTestPartContent,
): string {
  return JSON.stringify(
    CreateTestPartContent$outboundSchema.parse(createTestPartContent),
  );
}

export function createTestPartContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestPartContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTestPartContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestPartContent' from JSON`,
  );
}

/** @internal */
export const CreateTestPartResponse$inboundSchema: z.ZodType<
  CreateTestPartResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: CreateTestPartNavigationMode$inboundSchema,
  submissionMode: CreateTestPartSubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(models.Section$inboundSchema),
  rawXml: z.string(),
  content: z.lazy(() => CreateTestPartContent$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type CreateTestPartResponse$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<models.Section$Outbound>;
  rawXml: string;
  content: CreateTestPartContent$Outbound;
};

/** @internal */
export const CreateTestPartResponse$outboundSchema: z.ZodType<
  CreateTestPartResponse$Outbound,
  z.ZodTypeDef,
  CreateTestPartResponse
> = z.object({
  identifier: z.string(),
  navigationMode: CreateTestPartNavigationMode$outboundSchema,
  submissionMode: CreateTestPartSubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(models.Section$outboundSchema),
  rawXml: z.string(),
  content: z.lazy(() => CreateTestPartContent$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartResponse$ {
  /** @deprecated use `CreateTestPartResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartResponse$inboundSchema;
  /** @deprecated use `CreateTestPartResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartResponse$outboundSchema;
  /** @deprecated use `CreateTestPartResponse$Outbound` instead. */
  export type Outbound = CreateTestPartResponse$Outbound;
}

export function createTestPartResponseToJSON(
  createTestPartResponse: CreateTestPartResponse,
): string {
  return JSON.stringify(
    CreateTestPartResponse$outboundSchema.parse(createTestPartResponse),
  );
}

export function createTestPartResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestPartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTestPartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestPartResponse' from JSON`,
  );
}
