/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Add a reference to an existing assessment item in a section. The assessment item must exist in the assessment-items collection on the service provider.
 */
export type AddAssessmentItemRequestBody = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
};

export type AddAssessmentItemRequest = {
  /**
   * Root assessment test identifier
   */
  assessmentTestIdentifier: string;
  /**
   * Parent test part identifier
   */
  testPartIdentifier: string;
  /**
   * Section identifier
   */
  identifier: string;
  /**
   * The assessment item identifier to add to the section
   */
  requestBody: AddAssessmentItemRequestBody;
};

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type AddAssessmentItemQtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
 */
export type AddAssessmentItemResponse = {
  /**
   * MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
   */
  id: string;
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?:
    | Array<AddAssessmentItemQtiAssessmentItemRef>
    | undefined;
};

/** @internal */
export const AddAssessmentItemRequestBody$inboundSchema: z.ZodType<
  AddAssessmentItemRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
  sequence: z.number().int().optional(),
});

/** @internal */
export type AddAssessmentItemRequestBody$Outbound = {
  identifier: string;
  href?: string | undefined;
  sequence?: number | undefined;
};

/** @internal */
export const AddAssessmentItemRequestBody$outboundSchema: z.ZodType<
  AddAssessmentItemRequestBody$Outbound,
  z.ZodTypeDef,
  AddAssessmentItemRequestBody
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
  sequence: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAssessmentItemRequestBody$ {
  /** @deprecated use `AddAssessmentItemRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddAssessmentItemRequestBody$inboundSchema;
  /** @deprecated use `AddAssessmentItemRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddAssessmentItemRequestBody$outboundSchema;
  /** @deprecated use `AddAssessmentItemRequestBody$Outbound` instead. */
  export type Outbound = AddAssessmentItemRequestBody$Outbound;
}

export function addAssessmentItemRequestBodyToJSON(
  addAssessmentItemRequestBody: AddAssessmentItemRequestBody,
): string {
  return JSON.stringify(
    AddAssessmentItemRequestBody$outboundSchema.parse(
      addAssessmentItemRequestBody,
    ),
  );
}

export function addAssessmentItemRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddAssessmentItemRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddAssessmentItemRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddAssessmentItemRequestBody' from JSON`,
  );
}

/** @internal */
export const AddAssessmentItemRequest$inboundSchema: z.ZodType<
  AddAssessmentItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
  RequestBody: z.lazy(() => AddAssessmentItemRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddAssessmentItemRequest$Outbound = {
  assessmentTestIdentifier: string;
  testPartIdentifier: string;
  identifier: string;
  RequestBody: AddAssessmentItemRequestBody$Outbound;
};

/** @internal */
export const AddAssessmentItemRequest$outboundSchema: z.ZodType<
  AddAssessmentItemRequest$Outbound,
  z.ZodTypeDef,
  AddAssessmentItemRequest
> = z.object({
  assessmentTestIdentifier: z.string(),
  testPartIdentifier: z.string(),
  identifier: z.string(),
  requestBody: z.lazy(() => AddAssessmentItemRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAssessmentItemRequest$ {
  /** @deprecated use `AddAssessmentItemRequest$inboundSchema` instead. */
  export const inboundSchema = AddAssessmentItemRequest$inboundSchema;
  /** @deprecated use `AddAssessmentItemRequest$outboundSchema` instead. */
  export const outboundSchema = AddAssessmentItemRequest$outboundSchema;
  /** @deprecated use `AddAssessmentItemRequest$Outbound` instead. */
  export type Outbound = AddAssessmentItemRequest$Outbound;
}

export function addAssessmentItemRequestToJSON(
  addAssessmentItemRequest: AddAssessmentItemRequest,
): string {
  return JSON.stringify(
    AddAssessmentItemRequest$outboundSchema.parse(addAssessmentItemRequest),
  );
}

export function addAssessmentItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddAssessmentItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddAssessmentItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddAssessmentItemRequest' from JSON`,
  );
}

/** @internal */
export const AddAssessmentItemQtiAssessmentItemRef$inboundSchema: z.ZodType<
  AddAssessmentItemQtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type AddAssessmentItemQtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const AddAssessmentItemQtiAssessmentItemRef$outboundSchema: z.ZodType<
  AddAssessmentItemQtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  AddAssessmentItemQtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAssessmentItemQtiAssessmentItemRef$ {
  /** @deprecated use `AddAssessmentItemQtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema =
    AddAssessmentItemQtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `AddAssessmentItemQtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema =
    AddAssessmentItemQtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `AddAssessmentItemQtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = AddAssessmentItemQtiAssessmentItemRef$Outbound;
}

export function addAssessmentItemQtiAssessmentItemRefToJSON(
  addAssessmentItemQtiAssessmentItemRef: AddAssessmentItemQtiAssessmentItemRef,
): string {
  return JSON.stringify(
    AddAssessmentItemQtiAssessmentItemRef$outboundSchema.parse(
      addAssessmentItemQtiAssessmentItemRef,
    ),
  );
}

export function addAssessmentItemQtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<AddAssessmentItemQtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AddAssessmentItemQtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddAssessmentItemQtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const AddAssessmentItemResponse$inboundSchema: z.ZodType<
  AddAssessmentItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  "qti-assessment-item-ref": z.array(
    z.lazy(() => AddAssessmentItemQtiAssessmentItemRef$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "qti-assessment-item-ref": "qtiAssessmentItemRef",
  });
});

/** @internal */
export type AddAssessmentItemResponse$Outbound = {
  _id: string;
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?:
    | Array<AddAssessmentItemQtiAssessmentItemRef$Outbound>
    | undefined;
};

/** @internal */
export const AddAssessmentItemResponse$outboundSchema: z.ZodType<
  AddAssessmentItemResponse$Outbound,
  z.ZodTypeDef,
  AddAssessmentItemResponse
> = z.object({
  id: z.string(),
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => AddAssessmentItemQtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAssessmentItemResponse$ {
  /** @deprecated use `AddAssessmentItemResponse$inboundSchema` instead. */
  export const inboundSchema = AddAssessmentItemResponse$inboundSchema;
  /** @deprecated use `AddAssessmentItemResponse$outboundSchema` instead. */
  export const outboundSchema = AddAssessmentItemResponse$outboundSchema;
  /** @deprecated use `AddAssessmentItemResponse$Outbound` instead. */
  export type Outbound = AddAssessmentItemResponse$Outbound;
}

export function addAssessmentItemResponseToJSON(
  addAssessmentItemResponse: AddAssessmentItemResponse,
): string {
  return JSON.stringify(
    AddAssessmentItemResponse$outboundSchema.parse(addAssessmentItemResponse),
  );
}

export function addAssessmentItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddAssessmentItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddAssessmentItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddAssessmentItemResponse' from JSON`,
  );
}
