/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Assessment item interaction types that are supported by the service provider.
 */
export const Type = {
  Choice: "choice",
  TextEntry: "text-entry",
  ExtendedText: "extended-text",
  InlineChoice: "inline-choice",
  Match: "match",
  Order: "order",
  Associate: "associate",
  SelectPoint: "select-point",
  GraphicOrder: "graphic-order",
  GraphicAssociate: "graphic-associate",
  GraphicGapMatch: "graphic-gap-match",
  Hotspot: "hotspot",
  Hottext: "hottext",
  Slider: "slider",
  Drawing: "drawing",
  Media: "media",
  Upload: "upload",
} as const;
/**
 * Assessment item interaction types that are supported by the service provider.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const ResponseDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type ResponseDeclarationCardinality = ClosedEnum<
  typeof ResponseDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const ResponseDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type ResponseDeclarationBaseType = ClosedEnum<
  typeof ResponseDeclarationBaseType
>;

/**
 * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
 */
export type CorrectResponse = {
  value: Array<string>;
};

export type ResponseDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: ResponseDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: ResponseDeclarationBaseType | undefined;
  /**
   * Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
   */
  correctResponse: CorrectResponse;
};

/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export const OutcomeDeclarationCardinality = {
  Single: "single",
  Multiple: "multiple",
  Ordered: "ordered",
  Record: "record",
} as const;
/**
 * Specifies how many values the response variable can hold and whether order matters.
 */
export type OutcomeDeclarationCardinality = ClosedEnum<
  typeof OutcomeDeclarationCardinality
>;

/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export const OutcomeDeclarationBaseType = {
  Identifier: "identifier",
  Boolean: "boolean",
  Integer: "integer",
  Float: "float",
  String: "string",
  Point: "point",
  Pair: "pair",
  DirectedPair: "directedPair",
  Duration: "duration",
  File: "file",
  Uri: "uri",
} as const;
/**
 * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
 */
export type OutcomeDeclarationBaseType = ClosedEnum<
  typeof OutcomeDeclarationBaseType
>;

export type OutcomeDeclaration = {
  /**
   * Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
   */
  identifier: string;
  /**
   * Specifies how many values the response variable can hold and whether order matters.
   */
  cardinality: OutcomeDeclarationCardinality;
  /**
   * Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
   */
  baseType?: OutcomeDeclarationBaseType | undefined;
};

/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export const TemplateType = {
  MatchCorrect: "match_correct",
  MapResponse: "map_response",
} as const;
/**
 * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
 */
export type TemplateType = ClosedEnum<typeof TemplateType>;

/**
 * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
 */
export type InlineFeedback = {
  /**
   * Identifier of the outcome variable to be set with the inline feedback value.
   */
  outcomeIdentifier: string;
  /**
   * Identifier of the variable whose value will be assigned to the outcome variable during response processing.
   */
  variableIdentifier: string;
};

/**
 * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
 */
export type ResponseProcessing = {
  /**
   * Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
   */
  templateType: TemplateType;
  /**
   * Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
   */
  responseDeclarationIdentifier: string;
  /**
   * Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
   */
  outcomeIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
   */
  correctResponseIdentifier: string;
  /**
   * Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
   */
  incorrectResponseIdentifier: string;
  /**
   * Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
   */
  inlineFeedback?: InlineFeedback | undefined;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const ModalFeedbackShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type ModalFeedbackShowHide = ClosedEnum<typeof ModalFeedbackShowHide>;

export type ModalFeedback = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: ModalFeedbackShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
   */
  title: string;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const FeedbackInlineShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type FeedbackInlineShowHide = ClosedEnum<typeof FeedbackInlineShowHide>;

export type FeedbackInline = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: FeedbackInlineShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export const FeedbackBlockShowHide = {
  Show: "show",
  Hide: "hide",
} as const;
/**
 * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
 */
export type FeedbackBlockShowHide = ClosedEnum<typeof FeedbackBlockShowHide>;

export type FeedbackBlock = {
  /**
   * Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
   */
  outcomeIdentifier: string;
  /**
   * Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
   */
  identifier: string;
  /**
   * Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
   */
  showHide: FeedbackBlockShowHide;
  /**
   * The HTML or text content to be displayed as feedback to the candidate.
   */
  content: string;
  /**
   * CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
   */
  class: Array<string>;
};

export type AssessmentItem = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Assessment item interaction types that are supported by the service provider.
   */
  type: Type;
  /**
   * QTI version of the assessment item
   */
  qtiVersion?: string | undefined;
  /**
   * Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
   */
  timeDependent?: boolean | undefined;
  /**
   * Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
   */
  adaptive?: boolean | undefined;
  responseDeclarations?: Array<ResponseDeclaration> | undefined;
  outcomeDeclarations?: Array<OutcomeDeclaration> | undefined;
  /**
   * Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
   */
  responseProcessing: ResponseProcessing;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
   */
  modalFeedback?: Array<ModalFeedback> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackInline?: Array<FeedbackInline> | undefined;
  /**
   * Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
   */
  feedbackBlock?: Array<FeedbackBlock> | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ResponseDeclarationCardinality$inboundSchema: z.ZodNativeEnum<
  typeof ResponseDeclarationCardinality
> = z.nativeEnum(ResponseDeclarationCardinality);

/** @internal */
export const ResponseDeclarationCardinality$outboundSchema: z.ZodNativeEnum<
  typeof ResponseDeclarationCardinality
> = ResponseDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseDeclarationCardinality$ {
  /** @deprecated use `ResponseDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema = ResponseDeclarationCardinality$inboundSchema;
  /** @deprecated use `ResponseDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema = ResponseDeclarationCardinality$outboundSchema;
}

/** @internal */
export const ResponseDeclarationBaseType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseDeclarationBaseType
> = z.nativeEnum(ResponseDeclarationBaseType);

/** @internal */
export const ResponseDeclarationBaseType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseDeclarationBaseType
> = ResponseDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseDeclarationBaseType$ {
  /** @deprecated use `ResponseDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema = ResponseDeclarationBaseType$inboundSchema;
  /** @deprecated use `ResponseDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema = ResponseDeclarationBaseType$outboundSchema;
}

/** @internal */
export const CorrectResponse$inboundSchema: z.ZodType<
  CorrectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.array(z.string()),
});

/** @internal */
export type CorrectResponse$Outbound = {
  value: Array<string>;
};

/** @internal */
export const CorrectResponse$outboundSchema: z.ZodType<
  CorrectResponse$Outbound,
  z.ZodTypeDef,
  CorrectResponse
> = z.object({
  value: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectResponse$ {
  /** @deprecated use `CorrectResponse$inboundSchema` instead. */
  export const inboundSchema = CorrectResponse$inboundSchema;
  /** @deprecated use `CorrectResponse$outboundSchema` instead. */
  export const outboundSchema = CorrectResponse$outboundSchema;
  /** @deprecated use `CorrectResponse$Outbound` instead. */
  export type Outbound = CorrectResponse$Outbound;
}

export function correctResponseToJSON(
  correctResponse: CorrectResponse,
): string {
  return JSON.stringify(CorrectResponse$outboundSchema.parse(correctResponse));
}

export function correctResponseFromJSON(
  jsonString: string,
): SafeParseResult<CorrectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectResponse' from JSON`,
  );
}

/** @internal */
export const ResponseDeclaration$inboundSchema: z.ZodType<
  ResponseDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: ResponseDeclarationCardinality$inboundSchema,
  baseType: ResponseDeclarationBaseType$inboundSchema.optional(),
  correctResponse: z.lazy(() => CorrectResponse$inboundSchema),
});

/** @internal */
export type ResponseDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
  correctResponse: CorrectResponse$Outbound;
};

/** @internal */
export const ResponseDeclaration$outboundSchema: z.ZodType<
  ResponseDeclaration$Outbound,
  z.ZodTypeDef,
  ResponseDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: ResponseDeclarationCardinality$outboundSchema,
  baseType: ResponseDeclarationBaseType$outboundSchema.optional(),
  correctResponse: z.lazy(() => CorrectResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseDeclaration$ {
  /** @deprecated use `ResponseDeclaration$inboundSchema` instead. */
  export const inboundSchema = ResponseDeclaration$inboundSchema;
  /** @deprecated use `ResponseDeclaration$outboundSchema` instead. */
  export const outboundSchema = ResponseDeclaration$outboundSchema;
  /** @deprecated use `ResponseDeclaration$Outbound` instead. */
  export type Outbound = ResponseDeclaration$Outbound;
}

export function responseDeclarationToJSON(
  responseDeclaration: ResponseDeclaration,
): string {
  return JSON.stringify(
    ResponseDeclaration$outboundSchema.parse(responseDeclaration),
  );
}

export function responseDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<ResponseDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseDeclaration' from JSON`,
  );
}

/** @internal */
export const OutcomeDeclarationCardinality$inboundSchema: z.ZodNativeEnum<
  typeof OutcomeDeclarationCardinality
> = z.nativeEnum(OutcomeDeclarationCardinality);

/** @internal */
export const OutcomeDeclarationCardinality$outboundSchema: z.ZodNativeEnum<
  typeof OutcomeDeclarationCardinality
> = OutcomeDeclarationCardinality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeDeclarationCardinality$ {
  /** @deprecated use `OutcomeDeclarationCardinality$inboundSchema` instead. */
  export const inboundSchema = OutcomeDeclarationCardinality$inboundSchema;
  /** @deprecated use `OutcomeDeclarationCardinality$outboundSchema` instead. */
  export const outboundSchema = OutcomeDeclarationCardinality$outboundSchema;
}

/** @internal */
export const OutcomeDeclarationBaseType$inboundSchema: z.ZodNativeEnum<
  typeof OutcomeDeclarationBaseType
> = z.nativeEnum(OutcomeDeclarationBaseType);

/** @internal */
export const OutcomeDeclarationBaseType$outboundSchema: z.ZodNativeEnum<
  typeof OutcomeDeclarationBaseType
> = OutcomeDeclarationBaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeDeclarationBaseType$ {
  /** @deprecated use `OutcomeDeclarationBaseType$inboundSchema` instead. */
  export const inboundSchema = OutcomeDeclarationBaseType$inboundSchema;
  /** @deprecated use `OutcomeDeclarationBaseType$outboundSchema` instead. */
  export const outboundSchema = OutcomeDeclarationBaseType$outboundSchema;
}

/** @internal */
export const OutcomeDeclaration$inboundSchema: z.ZodType<
  OutcomeDeclaration,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  cardinality: OutcomeDeclarationCardinality$inboundSchema,
  baseType: OutcomeDeclarationBaseType$inboundSchema.optional(),
});

/** @internal */
export type OutcomeDeclaration$Outbound = {
  identifier: string;
  cardinality: string;
  baseType?: string | undefined;
};

/** @internal */
export const OutcomeDeclaration$outboundSchema: z.ZodType<
  OutcomeDeclaration$Outbound,
  z.ZodTypeDef,
  OutcomeDeclaration
> = z.object({
  identifier: z.string(),
  cardinality: OutcomeDeclarationCardinality$outboundSchema,
  baseType: OutcomeDeclarationBaseType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeDeclaration$ {
  /** @deprecated use `OutcomeDeclaration$inboundSchema` instead. */
  export const inboundSchema = OutcomeDeclaration$inboundSchema;
  /** @deprecated use `OutcomeDeclaration$outboundSchema` instead. */
  export const outboundSchema = OutcomeDeclaration$outboundSchema;
  /** @deprecated use `OutcomeDeclaration$Outbound` instead. */
  export type Outbound = OutcomeDeclaration$Outbound;
}

export function outcomeDeclarationToJSON(
  outcomeDeclaration: OutcomeDeclaration,
): string {
  return JSON.stringify(
    OutcomeDeclaration$outboundSchema.parse(outcomeDeclaration),
  );
}

export function outcomeDeclarationFromJSON(
  jsonString: string,
): SafeParseResult<OutcomeDeclaration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutcomeDeclaration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutcomeDeclaration' from JSON`,
  );
}

/** @internal */
export const TemplateType$inboundSchema: z.ZodNativeEnum<typeof TemplateType> =
  z.nativeEnum(TemplateType);

/** @internal */
export const TemplateType$outboundSchema: z.ZodNativeEnum<typeof TemplateType> =
  TemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateType$ {
  /** @deprecated use `TemplateType$inboundSchema` instead. */
  export const inboundSchema = TemplateType$inboundSchema;
  /** @deprecated use `TemplateType$outboundSchema` instead. */
  export const outboundSchema = TemplateType$outboundSchema;
}

/** @internal */
export const InlineFeedback$inboundSchema: z.ZodType<
  InlineFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/** @internal */
export type InlineFeedback$Outbound = {
  outcomeIdentifier: string;
  variableIdentifier: string;
};

/** @internal */
export const InlineFeedback$outboundSchema: z.ZodType<
  InlineFeedback$Outbound,
  z.ZodTypeDef,
  InlineFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  variableIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineFeedback$ {
  /** @deprecated use `InlineFeedback$inboundSchema` instead. */
  export const inboundSchema = InlineFeedback$inboundSchema;
  /** @deprecated use `InlineFeedback$outboundSchema` instead. */
  export const outboundSchema = InlineFeedback$outboundSchema;
  /** @deprecated use `InlineFeedback$Outbound` instead. */
  export type Outbound = InlineFeedback$Outbound;
}

export function inlineFeedbackToJSON(inlineFeedback: InlineFeedback): string {
  return JSON.stringify(InlineFeedback$outboundSchema.parse(inlineFeedback));
}

export function inlineFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<InlineFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InlineFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InlineFeedback' from JSON`,
  );
}

/** @internal */
export const ResponseProcessing$inboundSchema: z.ZodType<
  ResponseProcessing,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateType: TemplateType$inboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => InlineFeedback$inboundSchema).optional(),
});

/** @internal */
export type ResponseProcessing$Outbound = {
  templateType: string;
  responseDeclarationIdentifier: string;
  outcomeIdentifier: string;
  correctResponseIdentifier: string;
  incorrectResponseIdentifier: string;
  inlineFeedback?: InlineFeedback$Outbound | undefined;
};

/** @internal */
export const ResponseProcessing$outboundSchema: z.ZodType<
  ResponseProcessing$Outbound,
  z.ZodTypeDef,
  ResponseProcessing
> = z.object({
  templateType: TemplateType$outboundSchema,
  responseDeclarationIdentifier: z.string(),
  outcomeIdentifier: z.string(),
  correctResponseIdentifier: z.string(),
  incorrectResponseIdentifier: z.string(),
  inlineFeedback: z.lazy(() => InlineFeedback$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseProcessing$ {
  /** @deprecated use `ResponseProcessing$inboundSchema` instead. */
  export const inboundSchema = ResponseProcessing$inboundSchema;
  /** @deprecated use `ResponseProcessing$outboundSchema` instead. */
  export const outboundSchema = ResponseProcessing$outboundSchema;
  /** @deprecated use `ResponseProcessing$Outbound` instead. */
  export type Outbound = ResponseProcessing$Outbound;
}

export function responseProcessingToJSON(
  responseProcessing: ResponseProcessing,
): string {
  return JSON.stringify(
    ResponseProcessing$outboundSchema.parse(responseProcessing),
  );
}

export function responseProcessingFromJSON(
  jsonString: string,
): SafeParseResult<ResponseProcessing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseProcessing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseProcessing' from JSON`,
  );
}

/** @internal */
export const ModalFeedbackShowHide$inboundSchema: z.ZodNativeEnum<
  typeof ModalFeedbackShowHide
> = z.nativeEnum(ModalFeedbackShowHide);

/** @internal */
export const ModalFeedbackShowHide$outboundSchema: z.ZodNativeEnum<
  typeof ModalFeedbackShowHide
> = ModalFeedbackShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModalFeedbackShowHide$ {
  /** @deprecated use `ModalFeedbackShowHide$inboundSchema` instead. */
  export const inboundSchema = ModalFeedbackShowHide$inboundSchema;
  /** @deprecated use `ModalFeedbackShowHide$outboundSchema` instead. */
  export const outboundSchema = ModalFeedbackShowHide$outboundSchema;
}

/** @internal */
export const ModalFeedback$inboundSchema: z.ZodType<
  ModalFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: ModalFeedbackShowHide$inboundSchema,
  content: z.string(),
  title: z.string(),
});

/** @internal */
export type ModalFeedback$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  title: string;
};

/** @internal */
export const ModalFeedback$outboundSchema: z.ZodType<
  ModalFeedback$Outbound,
  z.ZodTypeDef,
  ModalFeedback
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: ModalFeedbackShowHide$outboundSchema,
  content: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModalFeedback$ {
  /** @deprecated use `ModalFeedback$inboundSchema` instead. */
  export const inboundSchema = ModalFeedback$inboundSchema;
  /** @deprecated use `ModalFeedback$outboundSchema` instead. */
  export const outboundSchema = ModalFeedback$outboundSchema;
  /** @deprecated use `ModalFeedback$Outbound` instead. */
  export type Outbound = ModalFeedback$Outbound;
}

export function modalFeedbackToJSON(modalFeedback: ModalFeedback): string {
  return JSON.stringify(ModalFeedback$outboundSchema.parse(modalFeedback));
}

export function modalFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<ModalFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModalFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModalFeedback' from JSON`,
  );
}

/** @internal */
export const FeedbackInlineShowHide$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackInlineShowHide
> = z.nativeEnum(FeedbackInlineShowHide);

/** @internal */
export const FeedbackInlineShowHide$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackInlineShowHide
> = FeedbackInlineShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackInlineShowHide$ {
  /** @deprecated use `FeedbackInlineShowHide$inboundSchema` instead. */
  export const inboundSchema = FeedbackInlineShowHide$inboundSchema;
  /** @deprecated use `FeedbackInlineShowHide$outboundSchema` instead. */
  export const outboundSchema = FeedbackInlineShowHide$outboundSchema;
}

/** @internal */
export const FeedbackInline$inboundSchema: z.ZodType<
  FeedbackInline,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackInlineShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type FeedbackInline$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const FeedbackInline$outboundSchema: z.ZodType<
  FeedbackInline$Outbound,
  z.ZodTypeDef,
  FeedbackInline
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackInlineShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackInline$ {
  /** @deprecated use `FeedbackInline$inboundSchema` instead. */
  export const inboundSchema = FeedbackInline$inboundSchema;
  /** @deprecated use `FeedbackInline$outboundSchema` instead. */
  export const outboundSchema = FeedbackInline$outboundSchema;
  /** @deprecated use `FeedbackInline$Outbound` instead. */
  export type Outbound = FeedbackInline$Outbound;
}

export function feedbackInlineToJSON(feedbackInline: FeedbackInline): string {
  return JSON.stringify(FeedbackInline$outboundSchema.parse(feedbackInline));
}

export function feedbackInlineFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackInline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackInline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackInline' from JSON`,
  );
}

/** @internal */
export const FeedbackBlockShowHide$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackBlockShowHide
> = z.nativeEnum(FeedbackBlockShowHide);

/** @internal */
export const FeedbackBlockShowHide$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackBlockShowHide
> = FeedbackBlockShowHide$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackBlockShowHide$ {
  /** @deprecated use `FeedbackBlockShowHide$inboundSchema` instead. */
  export const inboundSchema = FeedbackBlockShowHide$inboundSchema;
  /** @deprecated use `FeedbackBlockShowHide$outboundSchema` instead. */
  export const outboundSchema = FeedbackBlockShowHide$outboundSchema;
}

/** @internal */
export const FeedbackBlock$inboundSchema: z.ZodType<
  FeedbackBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackBlockShowHide$inboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/** @internal */
export type FeedbackBlock$Outbound = {
  outcomeIdentifier: string;
  identifier: string;
  showHide: string;
  content: string;
  class: Array<string>;
};

/** @internal */
export const FeedbackBlock$outboundSchema: z.ZodType<
  FeedbackBlock$Outbound,
  z.ZodTypeDef,
  FeedbackBlock
> = z.object({
  outcomeIdentifier: z.string(),
  identifier: z.string(),
  showHide: FeedbackBlockShowHide$outboundSchema,
  content: z.string(),
  class: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackBlock$ {
  /** @deprecated use `FeedbackBlock$inboundSchema` instead. */
  export const inboundSchema = FeedbackBlock$inboundSchema;
  /** @deprecated use `FeedbackBlock$outboundSchema` instead. */
  export const outboundSchema = FeedbackBlock$outboundSchema;
  /** @deprecated use `FeedbackBlock$Outbound` instead. */
  export type Outbound = FeedbackBlock$Outbound;
}

export function feedbackBlockToJSON(feedbackBlock: FeedbackBlock): string {
  return JSON.stringify(FeedbackBlock$outboundSchema.parse(feedbackBlock));
}

export function feedbackBlockFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackBlock' from JSON`,
  );
}

/** @internal */
export const AssessmentItem$inboundSchema: z.ZodType<
  AssessmentItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  title: z.string(),
  type: Type$inboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(z.lazy(() => ResponseDeclaration$inboundSchema))
    .optional(),
  outcomeDeclarations: z.array(z.lazy(() => OutcomeDeclaration$inboundSchema))
    .optional(),
  responseProcessing: z.lazy(() => ResponseProcessing$inboundSchema),
  metadata: z.record(z.any()).optional(),
  modalFeedback: z.array(z.lazy(() => ModalFeedback$inboundSchema)).optional(),
  feedbackInline: z.array(z.lazy(() => FeedbackInline$inboundSchema))
    .optional(),
  feedbackBlock: z.array(z.lazy(() => FeedbackBlock$inboundSchema)).optional(),
});

/** @internal */
export type AssessmentItem$Outbound = {
  identifier: string;
  title: string;
  type: string;
  qtiVersion: string;
  timeDependent: boolean;
  adaptive: boolean;
  responseDeclarations?: Array<ResponseDeclaration$Outbound> | undefined;
  outcomeDeclarations?: Array<OutcomeDeclaration$Outbound> | undefined;
  responseProcessing: ResponseProcessing$Outbound;
  metadata?: { [k: string]: any } | undefined;
  modalFeedback?: Array<ModalFeedback$Outbound> | undefined;
  feedbackInline?: Array<FeedbackInline$Outbound> | undefined;
  feedbackBlock?: Array<FeedbackBlock$Outbound> | undefined;
};

/** @internal */
export const AssessmentItem$outboundSchema: z.ZodType<
  AssessmentItem$Outbound,
  z.ZodTypeDef,
  AssessmentItem
> = z.object({
  identifier: z.string(),
  title: z.string(),
  type: Type$outboundSchema,
  qtiVersion: z.string().default("3.0"),
  timeDependent: z.boolean().default(false),
  adaptive: z.boolean().default(false),
  responseDeclarations: z.array(
    z.lazy(() => ResponseDeclaration$outboundSchema),
  ).optional(),
  outcomeDeclarations: z.array(z.lazy(() => OutcomeDeclaration$outboundSchema))
    .optional(),
  responseProcessing: z.lazy(() => ResponseProcessing$outboundSchema),
  metadata: z.record(z.any()).optional(),
  modalFeedback: z.array(z.lazy(() => ModalFeedback$outboundSchema)).optional(),
  feedbackInline: z.array(z.lazy(() => FeedbackInline$outboundSchema))
    .optional(),
  feedbackBlock: z.array(z.lazy(() => FeedbackBlock$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentItem$ {
  /** @deprecated use `AssessmentItem$inboundSchema` instead. */
  export const inboundSchema = AssessmentItem$inboundSchema;
  /** @deprecated use `AssessmentItem$outboundSchema` instead. */
  export const outboundSchema = AssessmentItem$outboundSchema;
  /** @deprecated use `AssessmentItem$Outbound` instead. */
  export type Outbound = AssessmentItem$Outbound;
}

export function assessmentItemToJSON(assessmentItem: AssessmentItem): string {
  return JSON.stringify(AssessmentItem$outboundSchema.parse(assessmentItem));
}

export function assessmentItemFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentItem' from JSON`,
  );
}
