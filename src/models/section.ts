/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Assessment item reference schema for linking assessment items to sections
 */
export type QtiAssessmentItemRef = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * URI reference to the assessment item resource location on the service provider
   */
  href?: string | undefined;
};

/**
 * Core assessment section schema containing all essential section attributes
 */
export type Section = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
   */
  visible?: boolean | undefined;
  /**
   * If a child element is required it must appear (at least once) in the selection.
   */
  required?: boolean | undefined;
  /**
   * If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
   */
  fixed?: boolean | undefined;
  /**
   * Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
   */
  sequence?: number | undefined;
  /**
   * Collection of assessment items that are referenced within this section.
   */
  qtiAssessmentItemRef?: Array<QtiAssessmentItemRef> | undefined;
};

/** @internal */
export const QtiAssessmentItemRef$inboundSchema: z.ZodType<
  QtiAssessmentItemRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/** @internal */
export type QtiAssessmentItemRef$Outbound = {
  identifier: string;
  href?: string | undefined;
};

/** @internal */
export const QtiAssessmentItemRef$outboundSchema: z.ZodType<
  QtiAssessmentItemRef$Outbound,
  z.ZodTypeDef,
  QtiAssessmentItemRef
> = z.object({
  identifier: z.string(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QtiAssessmentItemRef$ {
  /** @deprecated use `QtiAssessmentItemRef$inboundSchema` instead. */
  export const inboundSchema = QtiAssessmentItemRef$inboundSchema;
  /** @deprecated use `QtiAssessmentItemRef$outboundSchema` instead. */
  export const outboundSchema = QtiAssessmentItemRef$outboundSchema;
  /** @deprecated use `QtiAssessmentItemRef$Outbound` instead. */
  export type Outbound = QtiAssessmentItemRef$Outbound;
}

export function qtiAssessmentItemRefToJSON(
  qtiAssessmentItemRef: QtiAssessmentItemRef,
): string {
  return JSON.stringify(
    QtiAssessmentItemRef$outboundSchema.parse(qtiAssessmentItemRef),
  );
}

export function qtiAssessmentItemRefFromJSON(
  jsonString: string,
): SafeParseResult<QtiAssessmentItemRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QtiAssessmentItemRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QtiAssessmentItemRef' from JSON`,
  );
}

/** @internal */
export const Section$inboundSchema: z.ZodType<Section, z.ZodTypeDef, unknown> =
  z.object({
    identifier: z.string(),
    title: z.string(),
    visible: z.boolean().default(true),
    required: z.boolean().default(true),
    fixed: z.boolean().default(false),
    sequence: z.number().int().optional(),
    "qti-assessment-item-ref": z.array(
      z.lazy(() => QtiAssessmentItemRef$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "qti-assessment-item-ref": "qtiAssessmentItemRef",
    });
  });

/** @internal */
export type Section$Outbound = {
  identifier: string;
  title: string;
  visible: boolean;
  required: boolean;
  fixed: boolean;
  sequence?: number | undefined;
  "qti-assessment-item-ref"?: Array<QtiAssessmentItemRef$Outbound> | undefined;
};

/** @internal */
export const Section$outboundSchema: z.ZodType<
  Section$Outbound,
  z.ZodTypeDef,
  Section
> = z.object({
  identifier: z.string(),
  title: z.string(),
  visible: z.boolean().default(true),
  required: z.boolean().default(true),
  fixed: z.boolean().default(false),
  sequence: z.number().int().optional(),
  qtiAssessmentItemRef: z.array(
    z.lazy(() => QtiAssessmentItemRef$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentItemRef: "qti-assessment-item-ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Section$ {
  /** @deprecated use `Section$inboundSchema` instead. */
  export const inboundSchema = Section$inboundSchema;
  /** @deprecated use `Section$outboundSchema` instead. */
  export const outboundSchema = Section$outboundSchema;
  /** @deprecated use `Section$Outbound` instead. */
  export type Outbound = Section$Outbound;
}

export function sectionToJSON(section: Section): string {
  return JSON.stringify(Section$outboundSchema.parse(section));
}

export function sectionFromJSON(
  jsonString: string,
): SafeParseResult<Section, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Section$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Section' from JSON`,
  );
}
