/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Section,
  Section$inboundSchema,
  Section$Outbound,
  Section$outboundSchema,
} from "./section.js";

/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export const NavigationMode = {
  Linear: "linear",
  Nonlinear: "nonlinear",
} as const;
/**
 * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
 */
export type NavigationMode = ClosedEnum<typeof NavigationMode>;

/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export const SubmissionMode = {
  Individual: "individual",
  Simultaneous: "simultaneous",
} as const;
/**
 * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
 */
export type SubmissionMode = ClosedEnum<typeof SubmissionMode>;

/**
 * Complete test part structure as parsed from XML.
 */
export type TestPart = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
   */
  navigationMode: NavigationMode;
  /**
   * Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
   */
  submissionMode: SubmissionMode;
  qtiAssessmentSection: Array<Section>;
};

/** @internal */
export const NavigationMode$inboundSchema: z.ZodNativeEnum<
  typeof NavigationMode
> = z.nativeEnum(NavigationMode);

/** @internal */
export const NavigationMode$outboundSchema: z.ZodNativeEnum<
  typeof NavigationMode
> = NavigationMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NavigationMode$ {
  /** @deprecated use `NavigationMode$inboundSchema` instead. */
  export const inboundSchema = NavigationMode$inboundSchema;
  /** @deprecated use `NavigationMode$outboundSchema` instead. */
  export const outboundSchema = NavigationMode$outboundSchema;
}

/** @internal */
export const SubmissionMode$inboundSchema: z.ZodNativeEnum<
  typeof SubmissionMode
> = z.nativeEnum(SubmissionMode);

/** @internal */
export const SubmissionMode$outboundSchema: z.ZodNativeEnum<
  typeof SubmissionMode
> = SubmissionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmissionMode$ {
  /** @deprecated use `SubmissionMode$inboundSchema` instead. */
  export const inboundSchema = SubmissionMode$inboundSchema;
  /** @deprecated use `SubmissionMode$outboundSchema` instead. */
  export const outboundSchema = SubmissionMode$outboundSchema;
}

/** @internal */
export const TestPart$inboundSchema: z.ZodType<
  TestPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  navigationMode: NavigationMode$inboundSchema,
  submissionMode: SubmissionMode$inboundSchema,
  "qti-assessment-section": z.array(Section$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "qti-assessment-section": "qtiAssessmentSection",
  });
});

/** @internal */
export type TestPart$Outbound = {
  identifier: string;
  navigationMode: string;
  submissionMode: string;
  "qti-assessment-section": Array<Section$Outbound>;
};

/** @internal */
export const TestPart$outboundSchema: z.ZodType<
  TestPart$Outbound,
  z.ZodTypeDef,
  TestPart
> = z.object({
  identifier: z.string(),
  navigationMode: NavigationMode$outboundSchema,
  submissionMode: SubmissionMode$outboundSchema,
  qtiAssessmentSection: z.array(Section$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    qtiAssessmentSection: "qti-assessment-section",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestPart$ {
  /** @deprecated use `TestPart$inboundSchema` instead. */
  export const inboundSchema = TestPart$inboundSchema;
  /** @deprecated use `TestPart$outboundSchema` instead. */
  export const outboundSchema = TestPart$outboundSchema;
  /** @deprecated use `TestPart$Outbound` instead. */
  export type Outbound = TestPart$Outbound;
}

export function testPartToJSON(testPart: TestPart): string {
  return JSON.stringify(TestPart$outboundSchema.parse(testPart));
}

export function testPartFromJSON(
  jsonString: string,
): SafeParseResult<TestPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestPart' from JSON`,
  );
}
