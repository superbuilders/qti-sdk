/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * XML update not supported yet
 */
export type UpdateTestPartNotImplementedErrorData = {
  error: string;
};

/**
 * XML update not supported yet
 */
export class UpdateTestPartNotImplementedError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateTestPartNotImplementedErrorData;

  constructor(
    err: UpdateTestPartNotImplementedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "UpdateTestPartNotImplementedError";
  }
}

/**
 * Internal server error response
 */
export type UpdateTestPartInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class UpdateTestPartInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateTestPartInternalServerErrorData;

  constructor(
    err: UpdateTestPartInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "UpdateTestPartInternalServerError";
  }
}

/**
 * Assessment test or test part not found
 */
export type UpdateTestPartNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test or test part not found
 */
export class UpdateTestPartNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateTestPartNotFoundErrorData;

  constructor(
    err: UpdateTestPartNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "UpdateTestPartNotFoundError";
  }
}

/**
 * Missing required parameters or invalid test part data
 */
export type UpdateTestPartBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Missing required parameters or invalid test part data
 */
export class UpdateTestPartBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateTestPartBadRequestErrorData;

  constructor(
    err: UpdateTestPartBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "UpdateTestPartBadRequestError";
  }
}

/** @internal */
export const UpdateTestPartNotImplementedError$inboundSchema: z.ZodType<
  UpdateTestPartNotImplementedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateTestPartNotImplementedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateTestPartNotImplementedError$Outbound = {
  error: string;
};

/** @internal */
export const UpdateTestPartNotImplementedError$outboundSchema: z.ZodType<
  UpdateTestPartNotImplementedError$Outbound,
  z.ZodTypeDef,
  UpdateTestPartNotImplementedError
> = z.instanceof(UpdateTestPartNotImplementedError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTestPartNotImplementedError$ {
  /** @deprecated use `UpdateTestPartNotImplementedError$inboundSchema` instead. */
  export const inboundSchema = UpdateTestPartNotImplementedError$inboundSchema;
  /** @deprecated use `UpdateTestPartNotImplementedError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTestPartNotImplementedError$outboundSchema;
  /** @deprecated use `UpdateTestPartNotImplementedError$Outbound` instead. */
  export type Outbound = UpdateTestPartNotImplementedError$Outbound;
}

/** @internal */
export const UpdateTestPartInternalServerError$inboundSchema: z.ZodType<
  UpdateTestPartInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateTestPartInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateTestPartInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const UpdateTestPartInternalServerError$outboundSchema: z.ZodType<
  UpdateTestPartInternalServerError$Outbound,
  z.ZodTypeDef,
  UpdateTestPartInternalServerError
> = z.instanceof(UpdateTestPartInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTestPartInternalServerError$ {
  /** @deprecated use `UpdateTestPartInternalServerError$inboundSchema` instead. */
  export const inboundSchema = UpdateTestPartInternalServerError$inboundSchema;
  /** @deprecated use `UpdateTestPartInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTestPartInternalServerError$outboundSchema;
  /** @deprecated use `UpdateTestPartInternalServerError$Outbound` instead. */
  export type Outbound = UpdateTestPartInternalServerError$Outbound;
}

/** @internal */
export const UpdateTestPartNotFoundError$inboundSchema: z.ZodType<
  UpdateTestPartNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateTestPartNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateTestPartNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const UpdateTestPartNotFoundError$outboundSchema: z.ZodType<
  UpdateTestPartNotFoundError$Outbound,
  z.ZodTypeDef,
  UpdateTestPartNotFoundError
> = z.instanceof(UpdateTestPartNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTestPartNotFoundError$ {
  /** @deprecated use `UpdateTestPartNotFoundError$inboundSchema` instead. */
  export const inboundSchema = UpdateTestPartNotFoundError$inboundSchema;
  /** @deprecated use `UpdateTestPartNotFoundError$outboundSchema` instead. */
  export const outboundSchema = UpdateTestPartNotFoundError$outboundSchema;
  /** @deprecated use `UpdateTestPartNotFoundError$Outbound` instead. */
  export type Outbound = UpdateTestPartNotFoundError$Outbound;
}

/** @internal */
export const UpdateTestPartBadRequestError$inboundSchema: z.ZodType<
  UpdateTestPartBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateTestPartBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateTestPartBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const UpdateTestPartBadRequestError$outboundSchema: z.ZodType<
  UpdateTestPartBadRequestError$Outbound,
  z.ZodTypeDef,
  UpdateTestPartBadRequestError
> = z.instanceof(UpdateTestPartBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTestPartBadRequestError$ {
  /** @deprecated use `UpdateTestPartBadRequestError$inboundSchema` instead. */
  export const inboundSchema = UpdateTestPartBadRequestError$inboundSchema;
  /** @deprecated use `UpdateTestPartBadRequestError$outboundSchema` instead. */
  export const outboundSchema = UpdateTestPartBadRequestError$outboundSchema;
  /** @deprecated use `UpdateTestPartBadRequestError$Outbound` instead. */
  export type Outbound = UpdateTestPartBadRequestError$Outbound;
}
