/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type CreateAssessmentTestRawInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class CreateAssessmentTestRawInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: CreateAssessmentTestRawInternalServerErrorData;

  constructor(
    err: CreateAssessmentTestRawInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "CreateAssessmentTestRawInternalServerError";
  }
}

/**
 * Assessment test with this identifier already exists
 */
export type CreateAssessmentTestRawConflictErrorData = {
  error: string;
};

/**
 * Assessment test with this identifier already exists
 */
export class CreateAssessmentTestRawConflictError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: CreateAssessmentTestRawConflictErrorData;

  constructor(
    err: CreateAssessmentTestRawConflictErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "CreateAssessmentTestRawConflictError";
  }
}

/**
 * Invalid assessment test data
 */
export type CreateAssessmentTestRawBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Invalid assessment test data
 */
export class CreateAssessmentTestRawBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateAssessmentTestRawBadRequestErrorData;

  constructor(
    err: CreateAssessmentTestRawBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "CreateAssessmentTestRawBadRequestError";
  }
}

/** @internal */
export const CreateAssessmentTestRawInternalServerError$inboundSchema:
  z.ZodType<CreateAssessmentTestRawInternalServerError, z.ZodTypeDef, unknown> =
    z.object({
      error: z.string(),
      message: z.string(),
      eventId: z.string().optional(),
      details: z.string(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new CreateAssessmentTestRawInternalServerError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type CreateAssessmentTestRawInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const CreateAssessmentTestRawInternalServerError$outboundSchema:
  z.ZodType<
    CreateAssessmentTestRawInternalServerError$Outbound,
    z.ZodTypeDef,
    CreateAssessmentTestRawInternalServerError
  > = z.instanceof(CreateAssessmentTestRawInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
      message: z.string(),
      eventId: z.string().optional(),
      details: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawInternalServerError$ {
  /** @deprecated use `CreateAssessmentTestRawInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawInternalServerError$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawInternalServerError$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawInternalServerError$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawInternalServerError$Outbound;
}

/** @internal */
export const CreateAssessmentTestRawConflictError$inboundSchema: z.ZodType<
  CreateAssessmentTestRawConflictError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateAssessmentTestRawConflictError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateAssessmentTestRawConflictError$Outbound = {
  error: string;
};

/** @internal */
export const CreateAssessmentTestRawConflictError$outboundSchema: z.ZodType<
  CreateAssessmentTestRawConflictError$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawConflictError
> = z.instanceof(CreateAssessmentTestRawConflictError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawConflictError$ {
  /** @deprecated use `CreateAssessmentTestRawConflictError$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawConflictError$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawConflictError$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawConflictError$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawConflictError$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawConflictError$Outbound;
}

/** @internal */
export const CreateAssessmentTestRawBadRequestError$inboundSchema: z.ZodType<
  CreateAssessmentTestRawBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateAssessmentTestRawBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateAssessmentTestRawBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const CreateAssessmentTestRawBadRequestError$outboundSchema: z.ZodType<
  CreateAssessmentTestRawBadRequestError$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestRawBadRequestError
> = z.instanceof(CreateAssessmentTestRawBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestRawBadRequestError$ {
  /** @deprecated use `CreateAssessmentTestRawBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestRawBadRequestError$inboundSchema;
  /** @deprecated use `CreateAssessmentTestRawBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestRawBadRequestError$outboundSchema;
  /** @deprecated use `CreateAssessmentTestRawBadRequestError$Outbound` instead. */
  export type Outbound = CreateAssessmentTestRawBadRequestError$Outbound;
}
