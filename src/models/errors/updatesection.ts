/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * XML format not supported
 */
export type UpdateSectionNotImplementedErrorData = {
  error: string;
};

/**
 * XML format not supported
 */
export class UpdateSectionNotImplementedError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateSectionNotImplementedErrorData;

  constructor(
    err: UpdateSectionNotImplementedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "UpdateSectionNotImplementedError";
  }
}

/**
 * Internal server error response
 */
export type UpdateSectionInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class UpdateSectionInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateSectionInternalServerErrorData;

  constructor(
    err: UpdateSectionInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "UpdateSectionInternalServerError";
  }
}

/**
 * Assessment test, test part, or section not found
 */
export type UpdateSectionNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test, test part, or section not found
 */
export class UpdateSectionNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateSectionNotFoundErrorData;

  constructor(
    err: UpdateSectionNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "UpdateSectionNotFoundError";
  }
}

/**
 * Missing required parameters or invalid section data
 */
export type UpdateSectionBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Missing required parameters or invalid section data
 */
export class UpdateSectionBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateSectionBadRequestErrorData;

  constructor(
    err: UpdateSectionBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "UpdateSectionBadRequestError";
  }
}

/** @internal */
export const UpdateSectionNotImplementedError$inboundSchema: z.ZodType<
  UpdateSectionNotImplementedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateSectionNotImplementedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateSectionNotImplementedError$Outbound = {
  error: string;
};

/** @internal */
export const UpdateSectionNotImplementedError$outboundSchema: z.ZodType<
  UpdateSectionNotImplementedError$Outbound,
  z.ZodTypeDef,
  UpdateSectionNotImplementedError
> = z.instanceof(UpdateSectionNotImplementedError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSectionNotImplementedError$ {
  /** @deprecated use `UpdateSectionNotImplementedError$inboundSchema` instead. */
  export const inboundSchema = UpdateSectionNotImplementedError$inboundSchema;
  /** @deprecated use `UpdateSectionNotImplementedError$outboundSchema` instead. */
  export const outboundSchema = UpdateSectionNotImplementedError$outboundSchema;
  /** @deprecated use `UpdateSectionNotImplementedError$Outbound` instead. */
  export type Outbound = UpdateSectionNotImplementedError$Outbound;
}

/** @internal */
export const UpdateSectionInternalServerError$inboundSchema: z.ZodType<
  UpdateSectionInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateSectionInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateSectionInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const UpdateSectionInternalServerError$outboundSchema: z.ZodType<
  UpdateSectionInternalServerError$Outbound,
  z.ZodTypeDef,
  UpdateSectionInternalServerError
> = z.instanceof(UpdateSectionInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSectionInternalServerError$ {
  /** @deprecated use `UpdateSectionInternalServerError$inboundSchema` instead. */
  export const inboundSchema = UpdateSectionInternalServerError$inboundSchema;
  /** @deprecated use `UpdateSectionInternalServerError$outboundSchema` instead. */
  export const outboundSchema = UpdateSectionInternalServerError$outboundSchema;
  /** @deprecated use `UpdateSectionInternalServerError$Outbound` instead. */
  export type Outbound = UpdateSectionInternalServerError$Outbound;
}

/** @internal */
export const UpdateSectionNotFoundError$inboundSchema: z.ZodType<
  UpdateSectionNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateSectionNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateSectionNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const UpdateSectionNotFoundError$outboundSchema: z.ZodType<
  UpdateSectionNotFoundError$Outbound,
  z.ZodTypeDef,
  UpdateSectionNotFoundError
> = z.instanceof(UpdateSectionNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSectionNotFoundError$ {
  /** @deprecated use `UpdateSectionNotFoundError$inboundSchema` instead. */
  export const inboundSchema = UpdateSectionNotFoundError$inboundSchema;
  /** @deprecated use `UpdateSectionNotFoundError$outboundSchema` instead. */
  export const outboundSchema = UpdateSectionNotFoundError$outboundSchema;
  /** @deprecated use `UpdateSectionNotFoundError$Outbound` instead. */
  export type Outbound = UpdateSectionNotFoundError$Outbound;
}

/** @internal */
export const UpdateSectionBadRequestError$inboundSchema: z.ZodType<
  UpdateSectionBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateSectionBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateSectionBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const UpdateSectionBadRequestError$outboundSchema: z.ZodType<
  UpdateSectionBadRequestError$Outbound,
  z.ZodTypeDef,
  UpdateSectionBadRequestError
> = z.instanceof(UpdateSectionBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSectionBadRequestError$ {
  /** @deprecated use `UpdateSectionBadRequestError$inboundSchema` instead. */
  export const inboundSchema = UpdateSectionBadRequestError$inboundSchema;
  /** @deprecated use `UpdateSectionBadRequestError$outboundSchema` instead. */
  export const outboundSchema = UpdateSectionBadRequestError$outboundSchema;
  /** @deprecated use `UpdateSectionBadRequestError$Outbound` instead. */
  export type Outbound = UpdateSectionBadRequestError$Outbound;
}
