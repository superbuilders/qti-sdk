/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type SearchTestPartsInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class SearchTestPartsInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: SearchTestPartsInternalServerErrorData;

  constructor(
    err: SearchTestPartsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "SearchTestPartsInternalServerError";
  }
}

/**
 * Assessment test not found
 */
export type SearchTestPartsNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test not found
 */
export class SearchTestPartsNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SearchTestPartsNotFoundErrorData;

  constructor(
    err: SearchTestPartsNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "SearchTestPartsNotFoundError";
  }
}

/**
 * Missing required parameters
 */
export type SearchTestPartsBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Missing required parameters
 */
export class SearchTestPartsBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: SearchTestPartsBadRequestErrorData;

  constructor(
    err: SearchTestPartsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "SearchTestPartsBadRequestError";
  }
}

/** @internal */
export const SearchTestPartsInternalServerError$inboundSchema: z.ZodType<
  SearchTestPartsInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchTestPartsInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchTestPartsInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const SearchTestPartsInternalServerError$outboundSchema: z.ZodType<
  SearchTestPartsInternalServerError$Outbound,
  z.ZodTypeDef,
  SearchTestPartsInternalServerError
> = z.instanceof(SearchTestPartsInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsInternalServerError$ {
  /** @deprecated use `SearchTestPartsInternalServerError$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsInternalServerError$inboundSchema;
  /** @deprecated use `SearchTestPartsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    SearchTestPartsInternalServerError$outboundSchema;
  /** @deprecated use `SearchTestPartsInternalServerError$Outbound` instead. */
  export type Outbound = SearchTestPartsInternalServerError$Outbound;
}

/** @internal */
export const SearchTestPartsNotFoundError$inboundSchema: z.ZodType<
  SearchTestPartsNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchTestPartsNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchTestPartsNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const SearchTestPartsNotFoundError$outboundSchema: z.ZodType<
  SearchTestPartsNotFoundError$Outbound,
  z.ZodTypeDef,
  SearchTestPartsNotFoundError
> = z.instanceof(SearchTestPartsNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsNotFoundError$ {
  /** @deprecated use `SearchTestPartsNotFoundError$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsNotFoundError$inboundSchema;
  /** @deprecated use `SearchTestPartsNotFoundError$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsNotFoundError$outboundSchema;
  /** @deprecated use `SearchTestPartsNotFoundError$Outbound` instead. */
  export type Outbound = SearchTestPartsNotFoundError$Outbound;
}

/** @internal */
export const SearchTestPartsBadRequestError$inboundSchema: z.ZodType<
  SearchTestPartsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchTestPartsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchTestPartsBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const SearchTestPartsBadRequestError$outboundSchema: z.ZodType<
  SearchTestPartsBadRequestError$Outbound,
  z.ZodTypeDef,
  SearchTestPartsBadRequestError
> = z.instanceof(SearchTestPartsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTestPartsBadRequestError$ {
  /** @deprecated use `SearchTestPartsBadRequestError$inboundSchema` instead. */
  export const inboundSchema = SearchTestPartsBadRequestError$inboundSchema;
  /** @deprecated use `SearchTestPartsBadRequestError$outboundSchema` instead. */
  export const outboundSchema = SearchTestPartsBadRequestError$outboundSchema;
  /** @deprecated use `SearchTestPartsBadRequestError$Outbound` instead. */
  export type Outbound = SearchTestPartsBadRequestError$Outbound;
}
