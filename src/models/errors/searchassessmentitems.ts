/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type SearchAssessmentItemsInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class SearchAssessmentItemsInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: SearchAssessmentItemsInternalServerErrorData;

  constructor(
    err: SearchAssessmentItemsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "SearchAssessmentItemsInternalServerError";
  }
}

/**
 * Validation failed
 */
export type SearchAssessmentItemsBadRequestErrorData = {
  /**
   * High-level error message
   */
  error: string;
  /**
   * Machine code identifying error type
   */
  code: string;
  /**
   * Additional human details
   */
  details?: string | undefined;
  /**
   * Structured metadata from validation layer
   */
  meta: operations.Meta;
};

/**
 * Validation failed
 */
export class SearchAssessmentItemsBadRequestError extends QtiError {
  /**
   * High-level error message
   */
  error: string;
  /**
   * Machine code identifying error type
   */
  code: string;
  /**
   * Additional human details
   */
  details?: string | undefined;
  /**
   * Structured metadata from validation layer
   */
  meta: operations.Meta;

  /** The original data that was passed to this error instance. */
  data$: SearchAssessmentItemsBadRequestErrorData;

  constructor(
    err: SearchAssessmentItemsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    this.code = err.code;
    if (err.details != null) this.details = err.details;
    this.meta = err.meta;

    this.name = "SearchAssessmentItemsBadRequestError";
  }
}

/** @internal */
export const SearchAssessmentItemsInternalServerError$inboundSchema: z.ZodType<
  SearchAssessmentItemsInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchAssessmentItemsInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchAssessmentItemsInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const SearchAssessmentItemsInternalServerError$outboundSchema: z.ZodType<
  SearchAssessmentItemsInternalServerError$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsInternalServerError
> = z.instanceof(SearchAssessmentItemsInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsInternalServerError$ {
  /** @deprecated use `SearchAssessmentItemsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsInternalServerError$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsInternalServerError$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsInternalServerError$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsInternalServerError$Outbound;
}

/** @internal */
export const SearchAssessmentItemsBadRequestError$inboundSchema: z.ZodType<
  SearchAssessmentItemsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  code: z.string(),
  details: z.string().optional(),
  meta: z.lazy(() => operations.Meta$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchAssessmentItemsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchAssessmentItemsBadRequestError$Outbound = {
  error: string;
  code: string;
  details?: string | undefined;
  meta: operations.Meta$Outbound;
};

/** @internal */
export const SearchAssessmentItemsBadRequestError$outboundSchema: z.ZodType<
  SearchAssessmentItemsBadRequestError$Outbound,
  z.ZodTypeDef,
  SearchAssessmentItemsBadRequestError
> = z.instanceof(SearchAssessmentItemsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    code: z.string(),
    details: z.string().optional(),
    meta: z.lazy(() => operations.Meta$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentItemsBadRequestError$ {
  /** @deprecated use `SearchAssessmentItemsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentItemsBadRequestError$inboundSchema;
  /** @deprecated use `SearchAssessmentItemsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentItemsBadRequestError$outboundSchema;
  /** @deprecated use `SearchAssessmentItemsBadRequestError$Outbound` instead. */
  export type Outbound = SearchAssessmentItemsBadRequestError$Outbound;
}
