/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type SearchSectionsInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class SearchSectionsInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: SearchSectionsInternalServerErrorData;

  constructor(
    err: SearchSectionsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "SearchSectionsInternalServerError";
  }
}

/**
 * Assessment test or test part not found
 */
export type SearchSectionsNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test or test part not found
 */
export class SearchSectionsNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SearchSectionsNotFoundErrorData;

  constructor(
    err: SearchSectionsNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "SearchSectionsNotFoundError";
  }
}

/**
 * Missing required parameters
 */
export type SearchSectionsBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Missing required parameters
 */
export class SearchSectionsBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: SearchSectionsBadRequestErrorData;

  constructor(
    err: SearchSectionsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "SearchSectionsBadRequestError";
  }
}

/** @internal */
export const SearchSectionsInternalServerError$inboundSchema: z.ZodType<
  SearchSectionsInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchSectionsInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchSectionsInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const SearchSectionsInternalServerError$outboundSchema: z.ZodType<
  SearchSectionsInternalServerError$Outbound,
  z.ZodTypeDef,
  SearchSectionsInternalServerError
> = z.instanceof(SearchSectionsInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsInternalServerError$ {
  /** @deprecated use `SearchSectionsInternalServerError$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsInternalServerError$inboundSchema;
  /** @deprecated use `SearchSectionsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    SearchSectionsInternalServerError$outboundSchema;
  /** @deprecated use `SearchSectionsInternalServerError$Outbound` instead. */
  export type Outbound = SearchSectionsInternalServerError$Outbound;
}

/** @internal */
export const SearchSectionsNotFoundError$inboundSchema: z.ZodType<
  SearchSectionsNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchSectionsNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchSectionsNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const SearchSectionsNotFoundError$outboundSchema: z.ZodType<
  SearchSectionsNotFoundError$Outbound,
  z.ZodTypeDef,
  SearchSectionsNotFoundError
> = z.instanceof(SearchSectionsNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsNotFoundError$ {
  /** @deprecated use `SearchSectionsNotFoundError$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsNotFoundError$inboundSchema;
  /** @deprecated use `SearchSectionsNotFoundError$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsNotFoundError$outboundSchema;
  /** @deprecated use `SearchSectionsNotFoundError$Outbound` instead. */
  export type Outbound = SearchSectionsNotFoundError$Outbound;
}

/** @internal */
export const SearchSectionsBadRequestError$inboundSchema: z.ZodType<
  SearchSectionsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchSectionsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchSectionsBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const SearchSectionsBadRequestError$outboundSchema: z.ZodType<
  SearchSectionsBadRequestError$Outbound,
  z.ZodTypeDef,
  SearchSectionsBadRequestError
> = z.instanceof(SearchSectionsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSectionsBadRequestError$ {
  /** @deprecated use `SearchSectionsBadRequestError$inboundSchema` instead. */
  export const inboundSchema = SearchSectionsBadRequestError$inboundSchema;
  /** @deprecated use `SearchSectionsBadRequestError$outboundSchema` instead. */
  export const outboundSchema = SearchSectionsBadRequestError$outboundSchema;
  /** @deprecated use `SearchSectionsBadRequestError$Outbound` instead. */
  export type Outbound = SearchSectionsBadRequestError$Outbound;
}
