/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type UpdateAssessmentTestMetadataInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class UpdateAssessmentTestMetadataInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentTestMetadataInternalServerErrorData;

  constructor(
    err: UpdateAssessmentTestMetadataInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "UpdateAssessmentTestMetadataInternalServerError";
  }
}

/**
 * Assessment test not found
 */
export type UpdateAssessmentTestMetadataNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test not found
 */
export class UpdateAssessmentTestMetadataNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentTestMetadataNotFoundErrorData;

  constructor(
    err: UpdateAssessmentTestMetadataNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "UpdateAssessmentTestMetadataNotFoundError";
  }
}

/**
 * Metadata is required and must be an object
 */
export type UpdateAssessmentTestMetadataBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Metadata is required and must be an object
 */
export class UpdateAssessmentTestMetadataBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentTestMetadataBadRequestErrorData;

  constructor(
    err: UpdateAssessmentTestMetadataBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "UpdateAssessmentTestMetadataBadRequestError";
  }
}

/** @internal */
export const UpdateAssessmentTestMetadataInternalServerError$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new UpdateAssessmentTestMetadataInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type UpdateAssessmentTestMetadataInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const UpdateAssessmentTestMetadataInternalServerError$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataInternalServerError$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataInternalServerError
  > = z.instanceof(UpdateAssessmentTestMetadataInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
      message: z.string(),
      eventId: z.string().optional(),
      details: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataInternalServerError$ {
  /** @deprecated use `UpdateAssessmentTestMetadataInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataInternalServerError$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataInternalServerError$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataInternalServerError$Outbound` instead. */
  export type Outbound =
    UpdateAssessmentTestMetadataInternalServerError$Outbound;
}

/** @internal */
export const UpdateAssessmentTestMetadataNotFoundError$inboundSchema: z.ZodType<
  UpdateAssessmentTestMetadataNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateAssessmentTestMetadataNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateAssessmentTestMetadataNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const UpdateAssessmentTestMetadataNotFoundError$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataNotFoundError$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataNotFoundError
  > = z.instanceof(UpdateAssessmentTestMetadataNotFoundError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataNotFoundError$ {
  /** @deprecated use `UpdateAssessmentTestMetadataNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataNotFoundError$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataNotFoundError$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataNotFoundError$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataNotFoundError$Outbound;
}

/** @internal */
export const UpdateAssessmentTestMetadataBadRequestError$inboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string(),
    details: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new UpdateAssessmentTestMetadataBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type UpdateAssessmentTestMetadataBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const UpdateAssessmentTestMetadataBadRequestError$outboundSchema:
  z.ZodType<
    UpdateAssessmentTestMetadataBadRequestError$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentTestMetadataBadRequestError
  > = z.instanceof(UpdateAssessmentTestMetadataBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
      details: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentTestMetadataBadRequestError$ {
  /** @deprecated use `UpdateAssessmentTestMetadataBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentTestMetadataBadRequestError$inboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentTestMetadataBadRequestError$outboundSchema;
  /** @deprecated use `UpdateAssessmentTestMetadataBadRequestError$Outbound` instead. */
  export type Outbound = UpdateAssessmentTestMetadataBadRequestError$Outbound;
}
