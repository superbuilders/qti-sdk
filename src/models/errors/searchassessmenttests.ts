/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type SearchAssessmentTestsInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class SearchAssessmentTestsInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: SearchAssessmentTestsInternalServerErrorData;

  constructor(
    err: SearchAssessmentTestsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "SearchAssessmentTestsInternalServerError";
  }
}

/**
 * Invalid request parameters
 */
export type SearchAssessmentTestsBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Invalid request parameters
 */
export class SearchAssessmentTestsBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: SearchAssessmentTestsBadRequestErrorData;

  constructor(
    err: SearchAssessmentTestsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "SearchAssessmentTestsBadRequestError";
  }
}

/** @internal */
export const SearchAssessmentTestsInternalServerError$inboundSchema: z.ZodType<
  SearchAssessmentTestsInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchAssessmentTestsInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchAssessmentTestsInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const SearchAssessmentTestsInternalServerError$outboundSchema: z.ZodType<
  SearchAssessmentTestsInternalServerError$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsInternalServerError
> = z.instanceof(SearchAssessmentTestsInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsInternalServerError$ {
  /** @deprecated use `SearchAssessmentTestsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsInternalServerError$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsInternalServerError$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsInternalServerError$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsInternalServerError$Outbound;
}

/** @internal */
export const SearchAssessmentTestsBadRequestError$inboundSchema: z.ZodType<
  SearchAssessmentTestsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchAssessmentTestsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchAssessmentTestsBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const SearchAssessmentTestsBadRequestError$outboundSchema: z.ZodType<
  SearchAssessmentTestsBadRequestError$Outbound,
  z.ZodTypeDef,
  SearchAssessmentTestsBadRequestError
> = z.instanceof(SearchAssessmentTestsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssessmentTestsBadRequestError$ {
  /** @deprecated use `SearchAssessmentTestsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    SearchAssessmentTestsBadRequestError$inboundSchema;
  /** @deprecated use `SearchAssessmentTestsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    SearchAssessmentTestsBadRequestError$outboundSchema;
  /** @deprecated use `SearchAssessmentTestsBadRequestError$Outbound` instead. */
  export type Outbound = SearchAssessmentTestsBadRequestError$Outbound;
}
