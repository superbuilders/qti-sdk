/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type CreateAssessmentTestInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class CreateAssessmentTestInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: CreateAssessmentTestInternalServerErrorData;

  constructor(
    err: CreateAssessmentTestInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "CreateAssessmentTestInternalServerError";
  }
}

/**
 * Assessment test with this identifier already exists
 */
export type CreateAssessmentTestConflictErrorData = {
  error: string;
};

/**
 * Assessment test with this identifier already exists
 */
export class CreateAssessmentTestConflictError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: CreateAssessmentTestConflictErrorData;

  constructor(
    err: CreateAssessmentTestConflictErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "CreateAssessmentTestConflictError";
  }
}

/**
 * Invalid assessment test data
 */
export type CreateAssessmentTestBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Invalid assessment test data
 */
export class CreateAssessmentTestBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateAssessmentTestBadRequestErrorData;

  constructor(
    err: CreateAssessmentTestBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "CreateAssessmentTestBadRequestError";
  }
}

/** @internal */
export const CreateAssessmentTestInternalServerError$inboundSchema: z.ZodType<
  CreateAssessmentTestInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateAssessmentTestInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateAssessmentTestInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const CreateAssessmentTestInternalServerError$outboundSchema: z.ZodType<
  CreateAssessmentTestInternalServerError$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestInternalServerError
> = z.instanceof(CreateAssessmentTestInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestInternalServerError$ {
  /** @deprecated use `CreateAssessmentTestInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestInternalServerError$inboundSchema;
  /** @deprecated use `CreateAssessmentTestInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestInternalServerError$outboundSchema;
  /** @deprecated use `CreateAssessmentTestInternalServerError$Outbound` instead. */
  export type Outbound = CreateAssessmentTestInternalServerError$Outbound;
}

/** @internal */
export const CreateAssessmentTestConflictError$inboundSchema: z.ZodType<
  CreateAssessmentTestConflictError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateAssessmentTestConflictError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateAssessmentTestConflictError$Outbound = {
  error: string;
};

/** @internal */
export const CreateAssessmentTestConflictError$outboundSchema: z.ZodType<
  CreateAssessmentTestConflictError$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestConflictError
> = z.instanceof(CreateAssessmentTestConflictError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestConflictError$ {
  /** @deprecated use `CreateAssessmentTestConflictError$inboundSchema` instead. */
  export const inboundSchema = CreateAssessmentTestConflictError$inboundSchema;
  /** @deprecated use `CreateAssessmentTestConflictError$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestConflictError$outboundSchema;
  /** @deprecated use `CreateAssessmentTestConflictError$Outbound` instead. */
  export type Outbound = CreateAssessmentTestConflictError$Outbound;
}

/** @internal */
export const CreateAssessmentTestBadRequestError$inboundSchema: z.ZodType<
  CreateAssessmentTestBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateAssessmentTestBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateAssessmentTestBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const CreateAssessmentTestBadRequestError$outboundSchema: z.ZodType<
  CreateAssessmentTestBadRequestError$Outbound,
  z.ZodTypeDef,
  CreateAssessmentTestBadRequestError
> = z.instanceof(CreateAssessmentTestBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssessmentTestBadRequestError$ {
  /** @deprecated use `CreateAssessmentTestBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssessmentTestBadRequestError$inboundSchema;
  /** @deprecated use `CreateAssessmentTestBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssessmentTestBadRequestError$outboundSchema;
  /** @deprecated use `CreateAssessmentTestBadRequestError$Outbound` instead. */
  export type Outbound = CreateAssessmentTestBadRequestError$Outbound;
}
