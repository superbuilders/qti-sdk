/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type SearchStimuliInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class SearchStimuliInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: SearchStimuliInternalServerErrorData;

  constructor(
    err: SearchStimuliInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "SearchStimuliInternalServerError";
  }
}

/** @internal */
export const SearchStimuliInternalServerError$inboundSchema: z.ZodType<
  SearchStimuliInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SearchStimuliInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SearchStimuliInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const SearchStimuliInternalServerError$outboundSchema: z.ZodType<
  SearchStimuliInternalServerError$Outbound,
  z.ZodTypeDef,
  SearchStimuliInternalServerError
> = z.instanceof(SearchStimuliInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStimuliInternalServerError$ {
  /** @deprecated use `SearchStimuliInternalServerError$inboundSchema` instead. */
  export const inboundSchema = SearchStimuliInternalServerError$inboundSchema;
  /** @deprecated use `SearchStimuliInternalServerError$outboundSchema` instead. */
  export const outboundSchema = SearchStimuliInternalServerError$outboundSchema;
  /** @deprecated use `SearchStimuliInternalServerError$Outbound` instead. */
  export type Outbound = SearchStimuliInternalServerError$Outbound;
}
