/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type CreateTestPartInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class CreateTestPartInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: CreateTestPartInternalServerErrorData;

  constructor(
    err: CreateTestPartInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "CreateTestPartInternalServerError";
  }
}

/**
 * Test part with this identifier already exists
 */
export type CreateTestPartConflictErrorData = {
  error: string;
};

/**
 * Test part with this identifier already exists
 */
export class CreateTestPartConflictError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: CreateTestPartConflictErrorData;

  constructor(
    err: CreateTestPartConflictErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "CreateTestPartConflictError";
  }
}

/**
 * Assessment test not found
 */
export type CreateTestPartNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test not found
 */
export class CreateTestPartNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: CreateTestPartNotFoundErrorData;

  constructor(
    err: CreateTestPartNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "CreateTestPartNotFoundError";
  }
}

/**
 * Missig required paramater or Invalid test part data
 */
export type CreateTestPartBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Missig required paramater or Invalid test part data
 */
export class CreateTestPartBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateTestPartBadRequestErrorData;

  constructor(
    err: CreateTestPartBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "CreateTestPartBadRequestError";
  }
}

/** @internal */
export const CreateTestPartInternalServerError$inboundSchema: z.ZodType<
  CreateTestPartInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateTestPartInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateTestPartInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const CreateTestPartInternalServerError$outboundSchema: z.ZodType<
  CreateTestPartInternalServerError$Outbound,
  z.ZodTypeDef,
  CreateTestPartInternalServerError
> = z.instanceof(CreateTestPartInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartInternalServerError$ {
  /** @deprecated use `CreateTestPartInternalServerError$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartInternalServerError$inboundSchema;
  /** @deprecated use `CreateTestPartInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    CreateTestPartInternalServerError$outboundSchema;
  /** @deprecated use `CreateTestPartInternalServerError$Outbound` instead. */
  export type Outbound = CreateTestPartInternalServerError$Outbound;
}

/** @internal */
export const CreateTestPartConflictError$inboundSchema: z.ZodType<
  CreateTestPartConflictError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateTestPartConflictError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateTestPartConflictError$Outbound = {
  error: string;
};

/** @internal */
export const CreateTestPartConflictError$outboundSchema: z.ZodType<
  CreateTestPartConflictError$Outbound,
  z.ZodTypeDef,
  CreateTestPartConflictError
> = z.instanceof(CreateTestPartConflictError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartConflictError$ {
  /** @deprecated use `CreateTestPartConflictError$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartConflictError$inboundSchema;
  /** @deprecated use `CreateTestPartConflictError$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartConflictError$outboundSchema;
  /** @deprecated use `CreateTestPartConflictError$Outbound` instead. */
  export type Outbound = CreateTestPartConflictError$Outbound;
}

/** @internal */
export const CreateTestPartNotFoundError$inboundSchema: z.ZodType<
  CreateTestPartNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateTestPartNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateTestPartNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const CreateTestPartNotFoundError$outboundSchema: z.ZodType<
  CreateTestPartNotFoundError$Outbound,
  z.ZodTypeDef,
  CreateTestPartNotFoundError
> = z.instanceof(CreateTestPartNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartNotFoundError$ {
  /** @deprecated use `CreateTestPartNotFoundError$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartNotFoundError$inboundSchema;
  /** @deprecated use `CreateTestPartNotFoundError$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartNotFoundError$outboundSchema;
  /** @deprecated use `CreateTestPartNotFoundError$Outbound` instead. */
  export type Outbound = CreateTestPartNotFoundError$Outbound;
}

/** @internal */
export const CreateTestPartBadRequestError$inboundSchema: z.ZodType<
  CreateTestPartBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateTestPartBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateTestPartBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const CreateTestPartBadRequestError$outboundSchema: z.ZodType<
  CreateTestPartBadRequestError$Outbound,
  z.ZodTypeDef,
  CreateTestPartBadRequestError
> = z.instanceof(CreateTestPartBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestPartBadRequestError$ {
  /** @deprecated use `CreateTestPartBadRequestError$inboundSchema` instead. */
  export const inboundSchema = CreateTestPartBadRequestError$inboundSchema;
  /** @deprecated use `CreateTestPartBadRequestError$outboundSchema` instead. */
  export const outboundSchema = CreateTestPartBadRequestError$outboundSchema;
  /** @deprecated use `CreateTestPartBadRequestError$Outbound` instead. */
  export type Outbound = CreateTestPartBadRequestError$Outbound;
}
