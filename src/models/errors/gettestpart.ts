/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type GetTestPartInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class GetTestPartInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: GetTestPartInternalServerErrorData;

  constructor(
    err: GetTestPartInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "GetTestPartInternalServerError";
  }
}

/**
 * Assessment test or test part not found
 */
export type GetTestPartNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test or test part not found
 */
export class GetTestPartNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetTestPartNotFoundErrorData;

  constructor(
    err: GetTestPartNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetTestPartNotFoundError";
  }
}

/** @internal */
export const GetTestPartInternalServerError$inboundSchema: z.ZodType<
  GetTestPartInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetTestPartInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetTestPartInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const GetTestPartInternalServerError$outboundSchema: z.ZodType<
  GetTestPartInternalServerError$Outbound,
  z.ZodTypeDef,
  GetTestPartInternalServerError
> = z.instanceof(GetTestPartInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartInternalServerError$ {
  /** @deprecated use `GetTestPartInternalServerError$inboundSchema` instead. */
  export const inboundSchema = GetTestPartInternalServerError$inboundSchema;
  /** @deprecated use `GetTestPartInternalServerError$outboundSchema` instead. */
  export const outboundSchema = GetTestPartInternalServerError$outboundSchema;
  /** @deprecated use `GetTestPartInternalServerError$Outbound` instead. */
  export type Outbound = GetTestPartInternalServerError$Outbound;
}

/** @internal */
export const GetTestPartNotFoundError$inboundSchema: z.ZodType<
  GetTestPartNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetTestPartNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetTestPartNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const GetTestPartNotFoundError$outboundSchema: z.ZodType<
  GetTestPartNotFoundError$Outbound,
  z.ZodTypeDef,
  GetTestPartNotFoundError
> = z.instanceof(GetTestPartNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestPartNotFoundError$ {
  /** @deprecated use `GetTestPartNotFoundError$inboundSchema` instead. */
  export const inboundSchema = GetTestPartNotFoundError$inboundSchema;
  /** @deprecated use `GetTestPartNotFoundError$outboundSchema` instead. */
  export const outboundSchema = GetTestPartNotFoundError$outboundSchema;
  /** @deprecated use `GetTestPartNotFoundError$Outbound` instead. */
  export type Outbound = GetTestPartNotFoundError$Outbound;
}
