/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type DeleteTestPartInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class DeleteTestPartInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: DeleteTestPartInternalServerErrorData;

  constructor(
    err: DeleteTestPartInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "DeleteTestPartInternalServerError";
  }
}

/**
 * Assessment test or test part not found
 */
export type DeleteTestPartNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test or test part not found
 */
export class DeleteTestPartNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: DeleteTestPartNotFoundErrorData;

  constructor(
    err: DeleteTestPartNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "DeleteTestPartNotFoundError";
  }
}

/** @internal */
export const DeleteTestPartInternalServerError$inboundSchema: z.ZodType<
  DeleteTestPartInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeleteTestPartInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeleteTestPartInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const DeleteTestPartInternalServerError$outboundSchema: z.ZodType<
  DeleteTestPartInternalServerError$Outbound,
  z.ZodTypeDef,
  DeleteTestPartInternalServerError
> = z.instanceof(DeleteTestPartInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTestPartInternalServerError$ {
  /** @deprecated use `DeleteTestPartInternalServerError$inboundSchema` instead. */
  export const inboundSchema = DeleteTestPartInternalServerError$inboundSchema;
  /** @deprecated use `DeleteTestPartInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeleteTestPartInternalServerError$outboundSchema;
  /** @deprecated use `DeleteTestPartInternalServerError$Outbound` instead. */
  export type Outbound = DeleteTestPartInternalServerError$Outbound;
}

/** @internal */
export const DeleteTestPartNotFoundError$inboundSchema: z.ZodType<
  DeleteTestPartNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeleteTestPartNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeleteTestPartNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const DeleteTestPartNotFoundError$outboundSchema: z.ZodType<
  DeleteTestPartNotFoundError$Outbound,
  z.ZodTypeDef,
  DeleteTestPartNotFoundError
> = z.instanceof(DeleteTestPartNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTestPartNotFoundError$ {
  /** @deprecated use `DeleteTestPartNotFoundError$inboundSchema` instead. */
  export const inboundSchema = DeleteTestPartNotFoundError$inboundSchema;
  /** @deprecated use `DeleteTestPartNotFoundError$outboundSchema` instead. */
  export const outboundSchema = DeleteTestPartNotFoundError$outboundSchema;
  /** @deprecated use `DeleteTestPartNotFoundError$Outbound` instead. */
  export type Outbound = DeleteTestPartNotFoundError$Outbound;
}
