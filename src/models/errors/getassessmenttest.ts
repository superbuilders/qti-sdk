/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type GetAssessmentTestInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class GetAssessmentTestInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: GetAssessmentTestInternalServerErrorData;

  constructor(
    err: GetAssessmentTestInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "GetAssessmentTestInternalServerError";
  }
}

/**
 * Assessment test not found
 */
export type GetAssessmentTestNotFoundErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Assessment test not found
 */
export class GetAssessmentTestNotFoundError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetAssessmentTestNotFoundErrorData;

  constructor(
    err: GetAssessmentTestNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "GetAssessmentTestNotFoundError";
  }
}

/** @internal */
export const GetAssessmentTestInternalServerError$inboundSchema: z.ZodType<
  GetAssessmentTestInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetAssessmentTestInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetAssessmentTestInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const GetAssessmentTestInternalServerError$outboundSchema: z.ZodType<
  GetAssessmentTestInternalServerError$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestInternalServerError
> = z.instanceof(GetAssessmentTestInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestInternalServerError$ {
  /** @deprecated use `GetAssessmentTestInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    GetAssessmentTestInternalServerError$inboundSchema;
  /** @deprecated use `GetAssessmentTestInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    GetAssessmentTestInternalServerError$outboundSchema;
  /** @deprecated use `GetAssessmentTestInternalServerError$Outbound` instead. */
  export type Outbound = GetAssessmentTestInternalServerError$Outbound;
}

/** @internal */
export const GetAssessmentTestNotFoundError$inboundSchema: z.ZodType<
  GetAssessmentTestNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetAssessmentTestNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetAssessmentTestNotFoundError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const GetAssessmentTestNotFoundError$outboundSchema: z.ZodType<
  GetAssessmentTestNotFoundError$Outbound,
  z.ZodTypeDef,
  GetAssessmentTestNotFoundError
> = z.instanceof(GetAssessmentTestNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentTestNotFoundError$ {
  /** @deprecated use `GetAssessmentTestNotFoundError$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentTestNotFoundError$inboundSchema;
  /** @deprecated use `GetAssessmentTestNotFoundError$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentTestNotFoundError$outboundSchema;
  /** @deprecated use `GetAssessmentTestNotFoundError$Outbound` instead. */
  export type Outbound = GetAssessmentTestNotFoundError$Outbound;
}
