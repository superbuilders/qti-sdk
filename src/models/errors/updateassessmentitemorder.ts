/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type UpdateAssessmentItemOrderInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class UpdateAssessmentItemOrderInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentItemOrderInternalServerErrorData;

  constructor(
    err: UpdateAssessmentItemOrderInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "UpdateAssessmentItemOrderInternalServerError";
  }
}

/**
 * Assessment test, test part, section, or item references not found
 */
export type UpdateAssessmentItemOrderNotFoundErrorData = {
  error: string;
};

/**
 * Assessment test, test part, section, or item references not found
 */
export class UpdateAssessmentItemOrderNotFoundError extends QtiError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentItemOrderNotFoundErrorData;

  constructor(
    err: UpdateAssessmentItemOrderNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "UpdateAssessmentItemOrderNotFoundError";
  }
}

/**
 * Invalid items array or validation error
 */
export type UpdateAssessmentItemOrderBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Invalid items array or validation error
 */
export class UpdateAssessmentItemOrderBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentItemOrderBadRequestErrorData;

  constructor(
    err: UpdateAssessmentItemOrderBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "UpdateAssessmentItemOrderBadRequestError";
  }
}

/** @internal */
export const UpdateAssessmentItemOrderInternalServerError$inboundSchema:
  z.ZodType<
    UpdateAssessmentItemOrderInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new UpdateAssessmentItemOrderInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type UpdateAssessmentItemOrderInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const UpdateAssessmentItemOrderInternalServerError$outboundSchema:
  z.ZodType<
    UpdateAssessmentItemOrderInternalServerError$Outbound,
    z.ZodTypeDef,
    UpdateAssessmentItemOrderInternalServerError
  > = z.instanceof(UpdateAssessmentItemOrderInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
      message: z.string(),
      eventId: z.string().optional(),
      details: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderInternalServerError$ {
  /** @deprecated use `UpdateAssessmentItemOrderInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOrderInternalServerError$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOrderInternalServerError$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderInternalServerError$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderInternalServerError$Outbound;
}

/** @internal */
export const UpdateAssessmentItemOrderNotFoundError$inboundSchema: z.ZodType<
  UpdateAssessmentItemOrderNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateAssessmentItemOrderNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateAssessmentItemOrderNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const UpdateAssessmentItemOrderNotFoundError$outboundSchema: z.ZodType<
  UpdateAssessmentItemOrderNotFoundError$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemOrderNotFoundError
> = z.instanceof(UpdateAssessmentItemOrderNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderNotFoundError$ {
  /** @deprecated use `UpdateAssessmentItemOrderNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOrderNotFoundError$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOrderNotFoundError$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderNotFoundError$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderNotFoundError$Outbound;
}

/** @internal */
export const UpdateAssessmentItemOrderBadRequestError$inboundSchema: z.ZodType<
  UpdateAssessmentItemOrderBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateAssessmentItemOrderBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateAssessmentItemOrderBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const UpdateAssessmentItemOrderBadRequestError$outboundSchema: z.ZodType<
  UpdateAssessmentItemOrderBadRequestError$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemOrderBadRequestError
> = z.instanceof(UpdateAssessmentItemOrderBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemOrderBadRequestError$ {
  /** @deprecated use `UpdateAssessmentItemOrderBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemOrderBadRequestError$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemOrderBadRequestError$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemOrderBadRequestError$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemOrderBadRequestError$Outbound;
}
