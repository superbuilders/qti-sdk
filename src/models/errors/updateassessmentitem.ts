/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type UpdateAssessmentItemInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class UpdateAssessmentItemInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentItemInternalServerErrorData;

  constructor(
    err: UpdateAssessmentItemInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "UpdateAssessmentItemInternalServerError";
  }
}

/**
 * Item not found
 */
export type UpdateAssessmentItemNotFoundErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Item not found
 */
export class UpdateAssessmentItemNotFoundError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentItemNotFoundErrorData;

  constructor(
    err: UpdateAssessmentItemNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "UpdateAssessmentItemNotFoundError";
  }
}

/**
 * Invalid request body or stimulus not found
 */
export type UpdateAssessmentItemBadRequestErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Invalid request body or stimulus not found
 */
export class UpdateAssessmentItemBadRequestError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateAssessmentItemBadRequestErrorData;

  constructor(
    err: UpdateAssessmentItemBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "UpdateAssessmentItemBadRequestError";
  }
}

/** @internal */
export const UpdateAssessmentItemInternalServerError$inboundSchema: z.ZodType<
  UpdateAssessmentItemInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateAssessmentItemInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateAssessmentItemInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const UpdateAssessmentItemInternalServerError$outboundSchema: z.ZodType<
  UpdateAssessmentItemInternalServerError$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemInternalServerError
> = z.instanceof(UpdateAssessmentItemInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemInternalServerError$ {
  /** @deprecated use `UpdateAssessmentItemInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemInternalServerError$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemInternalServerError$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemInternalServerError$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemInternalServerError$Outbound;
}

/** @internal */
export const UpdateAssessmentItemNotFoundError$inboundSchema: z.ZodType<
  UpdateAssessmentItemNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateAssessmentItemNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateAssessmentItemNotFoundError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const UpdateAssessmentItemNotFoundError$outboundSchema: z.ZodType<
  UpdateAssessmentItemNotFoundError$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemNotFoundError
> = z.instanceof(UpdateAssessmentItemNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemNotFoundError$ {
  /** @deprecated use `UpdateAssessmentItemNotFoundError$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentItemNotFoundError$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemNotFoundError$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemNotFoundError$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemNotFoundError$Outbound;
}

/** @internal */
export const UpdateAssessmentItemBadRequestError$inboundSchema: z.ZodType<
  UpdateAssessmentItemBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateAssessmentItemBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateAssessmentItemBadRequestError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const UpdateAssessmentItemBadRequestError$outboundSchema: z.ZodType<
  UpdateAssessmentItemBadRequestError$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentItemBadRequestError
> = z.instanceof(UpdateAssessmentItemBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentItemBadRequestError$ {
  /** @deprecated use `UpdateAssessmentItemBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAssessmentItemBadRequestError$inboundSchema;
  /** @deprecated use `UpdateAssessmentItemBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentItemBadRequestError$outboundSchema;
  /** @deprecated use `UpdateAssessmentItemBadRequestError$Outbound` instead. */
  export type Outbound = UpdateAssessmentItemBadRequestError$Outbound;
}
