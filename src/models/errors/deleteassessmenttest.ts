/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { QtiError } from "./qtierror.js";

/**
 * Internal server error response
 */
export type DeleteAssessmentTestInternalServerErrorData = {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;
};

/**
 * Internal server error response
 */
export class DeleteAssessmentTestInternalServerError extends QtiError {
  /**
   * Error type identifier
   */
  error: string;
  /**
   * Sentry event ID for error tracking
   */
  eventId?: string | undefined;
  /**
   * Stack trace or additional error details
   */
  details: string;

  /** The original data that was passed to this error instance. */
  data$: DeleteAssessmentTestInternalServerErrorData;

  constructor(
    err: DeleteAssessmentTestInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.eventId != null) this.eventId = err.eventId;
    this.details = err.details;

    this.name = "DeleteAssessmentTestInternalServerError";
  }
}

/**
 * Assessment test not found
 */
export type DeleteAssessmentTestNotFoundErrorData = {
  error: string;
  details?: string | undefined;
};

/**
 * Assessment test not found
 */
export class DeleteAssessmentTestNotFoundError extends QtiError {
  error: string;
  details?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeleteAssessmentTestNotFoundErrorData;

  constructor(
    err: DeleteAssessmentTestNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.details != null) this.details = err.details;

    this.name = "DeleteAssessmentTestNotFoundError";
  }
}

/** @internal */
export const DeleteAssessmentTestInternalServerError$inboundSchema: z.ZodType<
  DeleteAssessmentTestInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  message: z.string(),
  eventId: z.string().optional(),
  details: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeleteAssessmentTestInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeleteAssessmentTestInternalServerError$Outbound = {
  error: string;
  message: string;
  eventId?: string | undefined;
  details: string;
};

/** @internal */
export const DeleteAssessmentTestInternalServerError$outboundSchema: z.ZodType<
  DeleteAssessmentTestInternalServerError$Outbound,
  z.ZodTypeDef,
  DeleteAssessmentTestInternalServerError
> = z.instanceof(DeleteAssessmentTestInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    message: z.string(),
    eventId: z.string().optional(),
    details: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssessmentTestInternalServerError$ {
  /** @deprecated use `DeleteAssessmentTestInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAssessmentTestInternalServerError$inboundSchema;
  /** @deprecated use `DeleteAssessmentTestInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssessmentTestInternalServerError$outboundSchema;
  /** @deprecated use `DeleteAssessmentTestInternalServerError$Outbound` instead. */
  export type Outbound = DeleteAssessmentTestInternalServerError$Outbound;
}

/** @internal */
export const DeleteAssessmentTestNotFoundError$inboundSchema: z.ZodType<
  DeleteAssessmentTestNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  details: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeleteAssessmentTestNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeleteAssessmentTestNotFoundError$Outbound = {
  error: string;
  details?: string | undefined;
};

/** @internal */
export const DeleteAssessmentTestNotFoundError$outboundSchema: z.ZodType<
  DeleteAssessmentTestNotFoundError$Outbound,
  z.ZodTypeDef,
  DeleteAssessmentTestNotFoundError
> = z.instanceof(DeleteAssessmentTestNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
    details: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssessmentTestNotFoundError$ {
  /** @deprecated use `DeleteAssessmentTestNotFoundError$inboundSchema` instead. */
  export const inboundSchema = DeleteAssessmentTestNotFoundError$inboundSchema;
  /** @deprecated use `DeleteAssessmentTestNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssessmentTestNotFoundError$outboundSchema;
  /** @deprecated use `DeleteAssessmentTestNotFoundError$Outbound` instead. */
  export type Outbound = DeleteAssessmentTestNotFoundError$Outbound;
}
