/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
 */
export type Stylesheet = {
  /**
   * The identifier or location of the external stylesheet.
   */
  href: string;
  /**
   * The type of the external stylesheet.
   */
  type: string;
};

export type CatalogInfo = {
  /**
   * Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
   */
  id: string;
  /**
   * This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
   */
  support: string;
  /**
   * A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
   */
  content: string;
};

/**
 * Create or update a stimulus on the service provider with HTML content and optional configuration
 */
export type Stimulus = {
  /**
   * Unique identifier for the entity on the service provider.
   */
  identifier: string;
  /**
   * Human-readable title of the entity on the service provider.
   */
  title: string;
  /**
   * A human readable label that can be used to describe the Stimulus.
   */
  label?: string | undefined;
  /**
   * The default language for the Stimulus.
   */
  language?: string | undefined;
  /**
   * The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
   */
  stylesheet?: Stylesheet | undefined;
  /**
   * HTML content of the stimulus provided as a string when creating or updating a stimulus. When the rawXml is generated, this content is used to create teh qti-stimulus-body that lives on the xml.
   */
  content: string;
  /**
   * Array of catalog cards.
   */
  catalogInfo?: Array<CatalogInfo> | undefined;
  /**
   * The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
   */
  toolName?: string | undefined;
  /**
   * The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
   */
  toolVersion?: string | undefined;
  /**
   * Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const Stylesheet$inboundSchema: z.ZodType<
  Stylesheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type Stylesheet$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const Stylesheet$outboundSchema: z.ZodType<
  Stylesheet$Outbound,
  z.ZodTypeDef,
  Stylesheet
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stylesheet$ {
  /** @deprecated use `Stylesheet$inboundSchema` instead. */
  export const inboundSchema = Stylesheet$inboundSchema;
  /** @deprecated use `Stylesheet$outboundSchema` instead. */
  export const outboundSchema = Stylesheet$outboundSchema;
  /** @deprecated use `Stylesheet$Outbound` instead. */
  export type Outbound = Stylesheet$Outbound;
}

export function stylesheetToJSON(stylesheet: Stylesheet): string {
  return JSON.stringify(Stylesheet$outboundSchema.parse(stylesheet));
}

export function stylesheetFromJSON(
  jsonString: string,
): SafeParseResult<Stylesheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stylesheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stylesheet' from JSON`,
  );
}

/** @internal */
export const CatalogInfo$inboundSchema: z.ZodType<
  CatalogInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/** @internal */
export type CatalogInfo$Outbound = {
  id: string;
  support: string;
  content: string;
};

/** @internal */
export const CatalogInfo$outboundSchema: z.ZodType<
  CatalogInfo$Outbound,
  z.ZodTypeDef,
  CatalogInfo
> = z.object({
  id: z.string(),
  support: z.string(),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CatalogInfo$ {
  /** @deprecated use `CatalogInfo$inboundSchema` instead. */
  export const inboundSchema = CatalogInfo$inboundSchema;
  /** @deprecated use `CatalogInfo$outboundSchema` instead. */
  export const outboundSchema = CatalogInfo$outboundSchema;
  /** @deprecated use `CatalogInfo$Outbound` instead. */
  export type Outbound = CatalogInfo$Outbound;
}

export function catalogInfoToJSON(catalogInfo: CatalogInfo): string {
  return JSON.stringify(CatalogInfo$outboundSchema.parse(catalogInfo));
}

export function catalogInfoFromJSON(
  jsonString: string,
): SafeParseResult<CatalogInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CatalogInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CatalogInfo' from JSON`,
  );
}

/** @internal */
export const Stimulus$inboundSchema: z.ZodType<
  Stimulus,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  title: z.string(),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => Stylesheet$inboundSchema).optional(),
  content: z.string(),
  catalogInfo: z.array(z.lazy(() => CatalogInfo$inboundSchema)).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type Stimulus$Outbound = {
  identifier: string;
  title: string;
  label?: string | undefined;
  language: string;
  stylesheet?: Stylesheet$Outbound | undefined;
  content: string;
  catalogInfo?: Array<CatalogInfo$Outbound> | undefined;
  toolName?: string | undefined;
  toolVersion?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const Stimulus$outboundSchema: z.ZodType<
  Stimulus$Outbound,
  z.ZodTypeDef,
  Stimulus
> = z.object({
  identifier: z.string(),
  title: z.string(),
  label: z.string().optional(),
  language: z.string().default("en"),
  stylesheet: z.lazy(() => Stylesheet$outboundSchema).optional(),
  content: z.string(),
  catalogInfo: z.array(z.lazy(() => CatalogInfo$outboundSchema)).optional(),
  toolName: z.string().optional(),
  toolVersion: z.string().optional(),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stimulus$ {
  /** @deprecated use `Stimulus$inboundSchema` instead. */
  export const inboundSchema = Stimulus$inboundSchema;
  /** @deprecated use `Stimulus$outboundSchema` instead. */
  export const outboundSchema = Stimulus$outboundSchema;
  /** @deprecated use `Stimulus$Outbound` instead. */
  export type Outbound = Stimulus$Outbound;
}

export function stimulusToJSON(stimulus: Stimulus): string {
  return JSON.stringify(Stimulus$outboundSchema.parse(stimulus));
}

export function stimulusFromJSON(
  jsonString: string,
): SafeParseResult<Stimulus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stimulus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stimulus' from JSON`,
  );
}
