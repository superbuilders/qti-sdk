/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sectionManagementAddAssessmentItem } from "../funcs/sectionManagementAddAssessmentItem.js";
import { sectionManagementCreateSection } from "../funcs/sectionManagementCreateSection.js";
import { sectionManagementDeleteSection } from "../funcs/sectionManagementDeleteSection.js";
import { sectionManagementGetSection } from "../funcs/sectionManagementGetSection.js";
import { sectionManagementRemoveAssessmentItem } from "../funcs/sectionManagementRemoveAssessmentItem.js";
import { sectionManagementSearchSections } from "../funcs/sectionManagementSearchSections.js";
import { sectionManagementUpdateAssessmentItemOrder } from "../funcs/sectionManagementUpdateAssessmentItemOrder.js";
import { sectionManagementUpdateSection } from "../funcs/sectionManagementUpdateSection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SectionManagement extends ClientSDK {
  /**
   * Search sections within a test part
   *
   * @remarks
   * Get all sections within a specific test part with support for text search, sorting, and pagination. Sections are containers that group related assessment items and define their presentation order.
   */
  async searchSections(
    request: operations.SearchSectionsRequest,
    options?: RequestOptions,
  ): Promise<operations.SearchSectionsResponse> {
    return unwrapAsync(sectionManagementSearchSections(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new section in a test part
   *
   * @remarks
   * Create a new section within a test part. Sections organize assessment items and define their presentation behavior. The parent assessment test's XML structure is automatically updated to include the new section.
   */
  async createSection(
    request: operations.CreateSectionRequest,
    options?: RequestOptions,
  ): Promise<models.Section> {
    return unwrapAsync(sectionManagementCreateSection(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a section with all its assessment item references
   *
   * @remarks
   * Retrieve a specific section including all its assessment item references, presentation settings, and configuration. Sections define how groups of assessment items are presented to test takers.
   */
  async getSection(
    request: operations.GetSectionRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSectionResponse> {
    return unwrapAsync(sectionManagementGetSection(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a section's configuration and item references
   *
   * @remarks
   * Update a section including its title, presentation settings, and assessment item references. This operation updates the section structure and regenerates the parent assessment test's XML.
   */
  async updateSection(
    request: operations.UpdateSectionRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateSectionResponse> {
    return unwrapAsync(sectionManagementUpdateSection(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a section and its item references
   *
   * @remarks
   * Permanently delete a section from a test part. This removes the section and all its assessment item references (but not the underlying assessment items). The assessment test's XML structure is automatically updated.
   */
  async deleteSection(
    request: operations.DeleteSectionRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteSectionResponse> {
    return unwrapAsync(sectionManagementDeleteSection(
      this,
      request,
      options,
    ));
  }

  /**
   * Add an assessment item reference to a section
   *
   * @remarks
   * Add a reference to an existing assessment item in a section. This creates a link between the assessment item and the section without copying the item content. The item must exist in the assessment-items collection.
   */
  async addAssessmentItem(
    request: operations.AddAssessmentItemRequest,
    options?: RequestOptions,
  ): Promise<operations.AddAssessmentItemResponse> {
    return unwrapAsync(sectionManagementAddAssessmentItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an assessment item reference from a section
   *
   * @remarks
   * Remove an assessment item reference from a section. This only removes the reference link; the actual assessment item remains in the assessment-items collection. The assessment test's XML structure is automatically updated.
   */
  async removeAssessmentItem(
    request: operations.RemoveAssessmentItemRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(sectionManagementRemoveAssessmentItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Reorder assessment items within a section
   *
   * @remarks
   * Update the presentation order of assessment item references within a section. This affects the sequence in which items are presented to test takers. All specified items must exist in the section.
   */
  async updateAssessmentItemOrder(
    request: operations.UpdateAssessmentItemOrderRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAssessmentItemOrderResponse> {
    return unwrapAsync(sectionManagementUpdateAssessmentItemOrder(
      this,
      request,
      options,
    ));
  }
}
