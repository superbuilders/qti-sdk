/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assessmentItemManagementCreateAssessmentItem } from "../funcs/assessmentItemManagementCreateAssessmentItem.js";
import { assessmentItemManagementDeleteAssessmentItem } from "../funcs/assessmentItemManagementDeleteAssessmentItem.js";
import { assessmentItemManagementGetAssessmentItem } from "../funcs/assessmentItemManagementGetAssessmentItem.js";
import { assessmentItemManagementSearchAssessmentItems } from "../funcs/assessmentItemManagementSearchAssessmentItems.js";
import { assessmentItemManagementUpdateAssessmentItem } from "../funcs/assessmentItemManagementUpdateAssessmentItem.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AssessmentItemManagement extends ClientSDK {
  /**
   * Search and filter assessment items
   *
   * @remarks
   * Search and retrieve assessment items (questions) with advanced filtering capabilities. Supports text search across titles and identifiers, filtering by type, sorting, and pagination. Assessment items are the core content units that contain questions, answer choices, and scoring logic.
   */
  async searchAssessmentItems(
    request?: operations.SearchAssessmentItemsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.SearchAssessmentItemsResponse> {
    return unwrapAsync(assessmentItemManagementSearchAssessmentItems(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new assessment item
   *
   * @remarks
   * Create a new assessment item (question) with its content, interactions, and response processing rules. Assessment items can contain various question types like multiple choice, text entry, or complex interactions. Supports both JSON and XML input formats with automatic QTI XML generation and validation.
   */
  async createAssessmentItem(
    request?: models.AssessmentItem | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateAssessmentItemResponse> {
    return unwrapAsync(assessmentItemManagementCreateAssessmentItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an assessment item with complete question content
   *
   * @remarks
   * Retrieve a specific assessment item including its question content, answer choices, interaction types, response processing rules, and scoring logic. Assessment items are the fundamental units of assessment content that can be referenced by test sections. Supports both JSON and XML response formats based on the Content-Type header.
   */
  async getAssessmentItem(
    request: operations.GetAssessmentItemRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAssessmentItemResponse> {
    return unwrapAsync(assessmentItemManagementGetAssessmentItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an assessment item's content and configuration
   *
   * @remarks
   * Update an assessment item including its question content, interactions, response processing, and scoring logic. This operation regenerates the QTI XML structure and validates all content. Assessment tests that reference this item will automatically use the updated version.
   */
  async updateAssessmentItem(
    request: operations.UpdateAssessmentItemRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAssessmentItemResponse> {
    return unwrapAsync(assessmentItemManagementUpdateAssessmentItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an assessment item
   *
   * @remarks
   * Permanently delete an assessment item. This operation cannot be undone. Warning: Assessment tests that reference this item may be affected. The item references in test sections will need to be updated separately.
   */
  async deleteAssessmentItem(
    request: operations.DeleteAssessmentItemRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(assessmentItemManagementDeleteAssessmentItem(
      this,
      request,
      options,
    ));
  }
}
