// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type GetStimulusRequest struct {
	// Stimulus identifier
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
}

func (o *GetStimulusRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

type GetStimulusCatalogInfo struct {
	// Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
	ID string `json:"id"`
	// This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
	Support string `json:"support"`
	// A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
	Content string `json:"content"`
}

func (o *GetStimulusCatalogInfo) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetStimulusCatalogInfo) GetSupport() string {
	if o == nil {
		return ""
	}
	return o.Support
}

func (o *GetStimulusCatalogInfo) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

// GetStimulusStylesheet - The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
type GetStimulusStylesheet struct {
	// The identifier or location of the external stylesheet.
	Href string `json:"href"`
	// The type of the external stylesheet.
	Type string `json:"type"`
}

func (o *GetStimulusStylesheet) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetStimulusStylesheet) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetStimulusAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	XMLLang           string `json:"xml:lang"`
	Title             string `json:"title"`
}

func (o *GetStimulusAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *GetStimulusAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *GetStimulusAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *GetStimulusAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetStimulusAttributes) GetXMLLang() string {
	if o == nil {
		return ""
	}
	return o.XMLLang
}

func (o *GetStimulusAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetStimulusQtiStylesheetAttributes struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetStimulusQtiStylesheetAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetStimulusQtiStylesheetAttributes) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetStimulusQtiStylesheet struct {
	Attributes GetStimulusQtiStylesheetAttributes `json:"_attributes"`
}

func (o *GetStimulusQtiStylesheet) GetAttributes() GetStimulusQtiStylesheetAttributes {
	if o == nil {
		return GetStimulusQtiStylesheetAttributes{}
	}
	return o.Attributes
}

type GetStimulusQtiCatalogAttributes struct {
	ID string `json:"id"`
}

func (o *GetStimulusQtiCatalogAttributes) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetStimulusQtiCardAttributes struct {
	Support string `json:"support"`
}

func (o *GetStimulusQtiCardAttributes) GetSupport() string {
	if o == nil {
		return ""
	}
	return o.Support
}

type GetStimulusQtiCard struct {
	Attributes     GetStimulusQtiCardAttributes `json:"_attributes"`
	QtiHTMLContent map[string]any               `json:"qti-html-content"`
}

func (o *GetStimulusQtiCard) GetAttributes() GetStimulusQtiCardAttributes {
	if o == nil {
		return GetStimulusQtiCardAttributes{}
	}
	return o.Attributes
}

func (o *GetStimulusQtiCard) GetQtiHTMLContent() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.QtiHTMLContent
}

type GetStimulusQtiCatalog struct {
	Attributes GetStimulusQtiCatalogAttributes `json:"_attributes"`
	QtiCard    GetStimulusQtiCard              `json:"qti-card"`
}

func (o *GetStimulusQtiCatalog) GetAttributes() GetStimulusQtiCatalogAttributes {
	if o == nil {
		return GetStimulusQtiCatalogAttributes{}
	}
	return o.Attributes
}

func (o *GetStimulusQtiCatalog) GetQtiCard() GetStimulusQtiCard {
	if o == nil {
		return GetStimulusQtiCard{}
	}
	return o.QtiCard
}

type GetStimulusQtiCatalogInfo struct {
	QtiCatalog GetStimulusQtiCatalog `json:"qti-catalog"`
}

func (o *GetStimulusQtiCatalogInfo) GetQtiCatalog() GetStimulusQtiCatalog {
	if o == nil {
		return GetStimulusQtiCatalog{}
	}
	return o.QtiCatalog
}

type GetStimulusQtiAssessmentStimulus struct {
	Attributes      GetStimulusAttributes      `json:"_attributes"`
	QtiStimulusBody map[string]any             `json:"qti-stimulus-body"`
	QtiStylesheet   *GetStimulusQtiStylesheet  `json:"qti-stylesheet,omitempty"`
	QtiCatalogInfo  *GetStimulusQtiCatalogInfo `json:"qti-catalog-info,omitempty"`
}

func (o *GetStimulusQtiAssessmentStimulus) GetAttributes() GetStimulusAttributes {
	if o == nil {
		return GetStimulusAttributes{}
	}
	return o.Attributes
}

func (o *GetStimulusQtiAssessmentStimulus) GetQtiStimulusBody() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.QtiStimulusBody
}

func (o *GetStimulusQtiAssessmentStimulus) GetQtiStylesheet() *GetStimulusQtiStylesheet {
	if o == nil {
		return nil
	}
	return o.QtiStylesheet
}

func (o *GetStimulusQtiAssessmentStimulus) GetQtiCatalogInfo() *GetStimulusQtiCatalogInfo {
	if o == nil {
		return nil
	}
	return o.QtiCatalogInfo
}

// GetStimulusContent - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type GetStimulusContent struct {
	QtiAssessmentStimulus GetStimulusQtiAssessmentStimulus `json:"qti-assessment-stimulus"`
}

func (o *GetStimulusContent) GetQtiAssessmentStimulus() GetStimulusQtiAssessmentStimulus {
	if o == nil {
		return GetStimulusQtiAssessmentStimulus{}
	}
	return o.QtiAssessmentStimulus
}

// GetStimulusResponseBody - Complete stimulus data structure returned from the database including parsed content and metadata
type GetStimulusResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Array of catalog cards.
	CatalogInfo []GetStimulusCatalogInfo `json:"catalogInfo"`
	// A human readable label that can be used to describe the Stimulus.
	Label *string `json:"label,omitempty"`
	// The default language for the Stimulus.
	Language *string `default:"en" json:"language"`
	// The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
	Stylesheet *GetStimulusStylesheet `json:"stylesheet,omitempty"`
	// The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
	ToolName *string `json:"toolName,omitempty"`
	// The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
	ToolVersion *string `json:"toolVersion,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content GetStimulusContent `json:"content"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (g GetStimulusResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetStimulusResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetStimulusResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetStimulusResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetStimulusResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetStimulusResponseBody) GetCatalogInfo() []GetStimulusCatalogInfo {
	if o == nil {
		return []GetStimulusCatalogInfo{}
	}
	return o.CatalogInfo
}

func (o *GetStimulusResponseBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *GetStimulusResponseBody) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *GetStimulusResponseBody) GetStylesheet() *GetStimulusStylesheet {
	if o == nil {
		return nil
	}
	return o.Stylesheet
}

func (o *GetStimulusResponseBody) GetToolName() *string {
	if o == nil {
		return nil
	}
	return o.ToolName
}

func (o *GetStimulusResponseBody) GetToolVersion() *string {
	if o == nil {
		return nil
	}
	return o.ToolVersion
}

func (o *GetStimulusResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetStimulusResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *GetStimulusResponseBody) GetContent() GetStimulusContent {
	if o == nil {
		return GetStimulusContent{}
	}
	return o.Content
}

func (o *GetStimulusResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetStimulusResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *GetStimulusResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

type GetStimulusResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfully retrieved stimulus
	Object *GetStimulusResponseBody
}

func (o *GetStimulusResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetStimulusResponse) GetObject() *GetStimulusResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
