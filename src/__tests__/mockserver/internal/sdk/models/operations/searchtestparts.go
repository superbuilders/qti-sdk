// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// SearchTestPartsSort - Field to sort by
type SearchTestPartsSort string

const (
	SearchTestPartsSortTitle      SearchTestPartsSort = "title"
	SearchTestPartsSortIdentifier SearchTestPartsSort = "identifier"
	SearchTestPartsSortCreatedAt  SearchTestPartsSort = "createdAt"
	SearchTestPartsSortUpdatedAt  SearchTestPartsSort = "updatedAt"
)

func (e SearchTestPartsSort) ToPointer() *SearchTestPartsSort {
	return &e
}
func (e *SearchTestPartsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "identifier":
		fallthrough
	case "createdAt":
		fallthrough
	case "updatedAt":
		*e = SearchTestPartsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTestPartsSort: %v", v)
	}
}

// SearchTestPartsQueryParamOrder - Sort order
type SearchTestPartsQueryParamOrder string

const (
	SearchTestPartsQueryParamOrderAsc  SearchTestPartsQueryParamOrder = "asc"
	SearchTestPartsQueryParamOrderDesc SearchTestPartsQueryParamOrder = "desc"
)

func (e SearchTestPartsQueryParamOrder) ToPointer() *SearchTestPartsQueryParamOrder {
	return &e
}
func (e *SearchTestPartsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchTestPartsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTestPartsQueryParamOrder: %v", v)
	}
}

// SearchTestPartsQueryParamNavigationMode - Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
type SearchTestPartsQueryParamNavigationMode string

const (
	SearchTestPartsQueryParamNavigationModeLinear    SearchTestPartsQueryParamNavigationMode = "linear"
	SearchTestPartsQueryParamNavigationModeNonlinear SearchTestPartsQueryParamNavigationMode = "nonlinear"
)

func (e SearchTestPartsQueryParamNavigationMode) ToPointer() *SearchTestPartsQueryParamNavigationMode {
	return &e
}
func (e *SearchTestPartsQueryParamNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = SearchTestPartsQueryParamNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTestPartsQueryParamNavigationMode: %v", v)
	}
}

// SearchTestPartsQueryParamSubmissionMode - Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
type SearchTestPartsQueryParamSubmissionMode string

const (
	SearchTestPartsQueryParamSubmissionModeIndividual   SearchTestPartsQueryParamSubmissionMode = "individual"
	SearchTestPartsQueryParamSubmissionModeSimultaneous SearchTestPartsQueryParamSubmissionMode = "simultaneous"
)

func (e SearchTestPartsQueryParamSubmissionMode) ToPointer() *SearchTestPartsQueryParamSubmissionMode {
	return &e
}
func (e *SearchTestPartsQueryParamSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = SearchTestPartsQueryParamSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTestPartsQueryParamSubmissionMode: %v", v)
	}
}

type SearchTestPartsRequest struct {
	// The unique identifier of the parent assessment test containing the test parts
	AssessmentTestIdentifier string `pathParam:"style=simple,explode=false,name=assessmentTestIdentifier"`
	// Search title and identifier fields using a search term. This is a fuzzy search.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Page number for pagination
	Page *string `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Number of items per page
	Limit *string `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Field to sort by
	Sort *SearchTestPartsSort `queryParam:"style=form,explode=true,name=sort"`
	// Sort order
	Order *SearchTestPartsQueryParamOrder `default:"desc" queryParam:"style=form,explode=true,name=order"`
	// Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
	NavigationMode *SearchTestPartsQueryParamNavigationMode `queryParam:"style=form,explode=true,name=navigationMode"`
	// Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
	SubmissionMode *SearchTestPartsQueryParamSubmissionMode `queryParam:"style=form,explode=true,name=submissionMode"`
	// Advanced filter expression using =, !=, >, >=, <, <=, ~ and logical AND/OR. Example: type='practice' AND createdAt>'2024-01-01'
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
}

func (s SearchTestPartsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchTestPartsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchTestPartsRequest) GetAssessmentTestIdentifier() string {
	if o == nil {
		return ""
	}
	return o.AssessmentTestIdentifier
}

func (o *SearchTestPartsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SearchTestPartsRequest) GetPage() *string {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchTestPartsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchTestPartsRequest) GetSort() *SearchTestPartsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *SearchTestPartsRequest) GetOrder() *SearchTestPartsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *SearchTestPartsRequest) GetNavigationMode() *SearchTestPartsQueryParamNavigationMode {
	if o == nil {
		return nil
	}
	return o.NavigationMode
}

func (o *SearchTestPartsRequest) GetSubmissionMode() *SearchTestPartsQueryParamSubmissionMode {
	if o == nil {
		return nil
	}
	return o.SubmissionMode
}

func (o *SearchTestPartsRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

// SearchTestPartsItemNavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type SearchTestPartsItemNavigationMode string

const (
	SearchTestPartsItemNavigationModeLinear    SearchTestPartsItemNavigationMode = "linear"
	SearchTestPartsItemNavigationModeNonlinear SearchTestPartsItemNavigationMode = "nonlinear"
)

func (e SearchTestPartsItemNavigationMode) ToPointer() *SearchTestPartsItemNavigationMode {
	return &e
}
func (e *SearchTestPartsItemNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = SearchTestPartsItemNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTestPartsItemNavigationMode: %v", v)
	}
}

// SearchTestPartsItemSubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type SearchTestPartsItemSubmissionMode string

const (
	SearchTestPartsItemSubmissionModeIndividual   SearchTestPartsItemSubmissionMode = "individual"
	SearchTestPartsItemSubmissionModeSimultaneous SearchTestPartsItemSubmissionMode = "simultaneous"
)

func (e SearchTestPartsItemSubmissionMode) ToPointer() *SearchTestPartsItemSubmissionMode {
	return &e
}
func (e *SearchTestPartsItemSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = SearchTestPartsItemSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTestPartsItemSubmissionMode: %v", v)
	}
}

// SearchTestPartsQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type SearchTestPartsQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *SearchTestPartsQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchTestPartsQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// SearchTestPartsQtiAssessmentSection - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type SearchTestPartsQtiAssessmentSection struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []SearchTestPartsQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (s SearchTestPartsQtiAssessmentSection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchTestPartsQtiAssessmentSection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchTestPartsQtiAssessmentSection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchTestPartsQtiAssessmentSection) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchTestPartsQtiAssessmentSection) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchTestPartsQtiAssessmentSection) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *SearchTestPartsQtiAssessmentSection) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *SearchTestPartsQtiAssessmentSection) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *SearchTestPartsQtiAssessmentSection) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *SearchTestPartsQtiAssessmentSection) GetQtiAssessmentItemRef() []SearchTestPartsQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

// SearchTestPartsItem - Complete test part data returned from the service provider. Contains all sections and their configuration.
type SearchTestPartsItem struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode SearchTestPartsItemNavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       SearchTestPartsItemSubmissionMode     `json:"submissionMode"`
	QtiAssessmentSection []SearchTestPartsQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *SearchTestPartsItem) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchTestPartsItem) GetNavigationMode() SearchTestPartsItemNavigationMode {
	if o == nil {
		return SearchTestPartsItemNavigationMode("")
	}
	return o.NavigationMode
}

func (o *SearchTestPartsItem) GetSubmissionMode() SearchTestPartsItemSubmissionMode {
	if o == nil {
		return SearchTestPartsItemSubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *SearchTestPartsItem) GetQtiAssessmentSection() []SearchTestPartsQtiAssessmentSection {
	if o == nil {
		return []SearchTestPartsQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

// SearchTestPartsOrderResponse - The order to sort the entities by. Either 'asc' or 'desc'.
type SearchTestPartsOrderResponse string

const (
	SearchTestPartsOrderResponseAsc  SearchTestPartsOrderResponse = "asc"
	SearchTestPartsOrderResponseDesc SearchTestPartsOrderResponse = "desc"
)

func (e SearchTestPartsOrderResponse) ToPointer() *SearchTestPartsOrderResponse {
	return &e
}
func (e *SearchTestPartsOrderResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchTestPartsOrderResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTestPartsOrderResponse: %v", v)
	}
}

// SearchTestPartsResponseBody - Paginated collection of test parts with navigation metadata
type SearchTestPartsResponseBody struct {
	// Array of all test parts belonging to the specified assessment test
	Items []SearchTestPartsItem `json:"items"`
	// The total number of entities that match the search criteria.
	Total float64 `json:"total"`
	// The page number of the entities that match the search criteria.
	Page *float64 `default:"1" json:"page"`
	// The total number of pages of entities that match the search criteria.
	Pages float64 `json:"pages"`
	// The number of entities per page.
	Limit *float64 `default:"10" json:"limit"`
	// The field to sort the entities by.
	Sort string `json:"sort"`
	// The order to sort the entities by. Either 'asc' or 'desc'.
	Order SearchTestPartsOrderResponse `json:"order"`
}

func (s SearchTestPartsResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchTestPartsResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchTestPartsResponseBody) GetItems() []SearchTestPartsItem {
	if o == nil {
		return []SearchTestPartsItem{}
	}
	return o.Items
}

func (o *SearchTestPartsResponseBody) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *SearchTestPartsResponseBody) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchTestPartsResponseBody) GetPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.Pages
}

func (o *SearchTestPartsResponseBody) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchTestPartsResponseBody) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *SearchTestPartsResponseBody) GetOrder() SearchTestPartsOrderResponse {
	if o == nil {
		return SearchTestPartsOrderResponse("")
	}
	return o.Order
}

type SearchTestPartsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfully retrieved test parts
	Object *SearchTestPartsResponseBody
}

func (o *SearchTestPartsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SearchTestPartsResponse) GetObject() *SearchTestPartsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
