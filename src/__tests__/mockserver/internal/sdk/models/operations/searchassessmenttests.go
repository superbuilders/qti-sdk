// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// SearchAssessmentTestsSort - Field to sort by
type SearchAssessmentTestsSort string

const (
	SearchAssessmentTestsSortTitle      SearchAssessmentTestsSort = "title"
	SearchAssessmentTestsSortIdentifier SearchAssessmentTestsSort = "identifier"
	SearchAssessmentTestsSortCreatedAt  SearchAssessmentTestsSort = "createdAt"
	SearchAssessmentTestsSortUpdatedAt  SearchAssessmentTestsSort = "updatedAt"
)

func (e SearchAssessmentTestsSort) ToPointer() *SearchAssessmentTestsSort {
	return &e
}
func (e *SearchAssessmentTestsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "identifier":
		fallthrough
	case "createdAt":
		fallthrough
	case "updatedAt":
		*e = SearchAssessmentTestsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsSort: %v", v)
	}
}

// SearchAssessmentTestsQueryParamOrder - Sort order
type SearchAssessmentTestsQueryParamOrder string

const (
	SearchAssessmentTestsQueryParamOrderAsc  SearchAssessmentTestsQueryParamOrder = "asc"
	SearchAssessmentTestsQueryParamOrderDesc SearchAssessmentTestsQueryParamOrder = "desc"
)

func (e SearchAssessmentTestsQueryParamOrder) ToPointer() *SearchAssessmentTestsQueryParamOrder {
	return &e
}
func (e *SearchAssessmentTestsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchAssessmentTestsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsQueryParamOrder: %v", v)
	}
}

// SearchAssessmentTestsQueryParamNavigationMode - Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
type SearchAssessmentTestsQueryParamNavigationMode string

const (
	SearchAssessmentTestsQueryParamNavigationModeLinear    SearchAssessmentTestsQueryParamNavigationMode = "linear"
	SearchAssessmentTestsQueryParamNavigationModeNonlinear SearchAssessmentTestsQueryParamNavigationMode = "nonlinear"
)

func (e SearchAssessmentTestsQueryParamNavigationMode) ToPointer() *SearchAssessmentTestsQueryParamNavigationMode {
	return &e
}
func (e *SearchAssessmentTestsQueryParamNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = SearchAssessmentTestsQueryParamNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsQueryParamNavigationMode: %v", v)
	}
}

// SearchAssessmentTestsQueryParamSubmissionMode - Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
type SearchAssessmentTestsQueryParamSubmissionMode string

const (
	SearchAssessmentTestsQueryParamSubmissionModeIndividual   SearchAssessmentTestsQueryParamSubmissionMode = "individual"
	SearchAssessmentTestsQueryParamSubmissionModeSimultaneous SearchAssessmentTestsQueryParamSubmissionMode = "simultaneous"
)

func (e SearchAssessmentTestsQueryParamSubmissionMode) ToPointer() *SearchAssessmentTestsQueryParamSubmissionMode {
	return &e
}
func (e *SearchAssessmentTestsQueryParamSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = SearchAssessmentTestsQueryParamSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsQueryParamSubmissionMode: %v", v)
	}
}

type SearchAssessmentTestsRequest struct {
	// Search title and identifier fields using a search term. This is a fuzzy search.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Page number for pagination
	Page *string `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Number of items per page
	Limit *string `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Field to sort by
	Sort *SearchAssessmentTestsSort `queryParam:"style=form,explode=true,name=sort"`
	// Sort order
	Order *SearchAssessmentTestsQueryParamOrder `default:"desc" queryParam:"style=form,explode=true,name=order"`
	// Filter by navigation mode (linear: sequential navigation, nonlinear: free navigation)
	NavigationMode *SearchAssessmentTestsQueryParamNavigationMode `queryParam:"style=form,explode=true,name=navigationMode"`
	// Filter by submission mode (individual: submit per item, simultaneous: submit all at once)
	SubmissionMode *SearchAssessmentTestsQueryParamSubmissionMode `queryParam:"style=form,explode=true,name=submissionMode"`
	// Advanced filter expression using =, !=, >, >=, <, <=, ~ and logical AND/OR. Example: type='practice' AND createdAt>'2024-01-01'
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
}

func (s SearchAssessmentTestsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentTestsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentTestsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SearchAssessmentTestsRequest) GetPage() *string {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchAssessmentTestsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchAssessmentTestsRequest) GetSort() *SearchAssessmentTestsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *SearchAssessmentTestsRequest) GetOrder() *SearchAssessmentTestsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *SearchAssessmentTestsRequest) GetNavigationMode() *SearchAssessmentTestsQueryParamNavigationMode {
	if o == nil {
		return nil
	}
	return o.NavigationMode
}

func (o *SearchAssessmentTestsRequest) GetSubmissionMode() *SearchAssessmentTestsQueryParamSubmissionMode {
	if o == nil {
		return nil
	}
	return o.SubmissionMode
}

func (o *SearchAssessmentTestsRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

// SearchAssessmentTestsItemNavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type SearchAssessmentTestsItemNavigationMode string

const (
	SearchAssessmentTestsItemNavigationModeLinear    SearchAssessmentTestsItemNavigationMode = "linear"
	SearchAssessmentTestsItemNavigationModeNonlinear SearchAssessmentTestsItemNavigationMode = "nonlinear"
)

func (e SearchAssessmentTestsItemNavigationMode) ToPointer() *SearchAssessmentTestsItemNavigationMode {
	return &e
}
func (e *SearchAssessmentTestsItemNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = SearchAssessmentTestsItemNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsItemNavigationMode: %v", v)
	}
}

// SearchAssessmentTestsItemSubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type SearchAssessmentTestsItemSubmissionMode string

const (
	SearchAssessmentTestsItemSubmissionModeIndividual   SearchAssessmentTestsItemSubmissionMode = "individual"
	SearchAssessmentTestsItemSubmissionModeSimultaneous SearchAssessmentTestsItemSubmissionMode = "simultaneous"
)

func (e SearchAssessmentTestsItemSubmissionMode) ToPointer() *SearchAssessmentTestsItemSubmissionMode {
	return &e
}
func (e *SearchAssessmentTestsItemSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = SearchAssessmentTestsItemSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsItemSubmissionMode: %v", v)
	}
}

// SearchAssessmentTestsQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type SearchAssessmentTestsQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *SearchAssessmentTestsQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// SearchAssessmentTestsQtiAssessmentSection - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type SearchAssessmentTestsQtiAssessmentSection struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []SearchAssessmentTestsQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (s SearchAssessmentTestsQtiAssessmentSection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentTestsQtiAssessmentSection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *SearchAssessmentTestsQtiAssessmentSection) GetQtiAssessmentItemRef() []SearchAssessmentTestsQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

// SearchAssessmentTestsQtiTestPart - Complete test part data returned from the service provider. Contains all sections and their configuration.
type SearchAssessmentTestsQtiTestPart struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode SearchAssessmentTestsItemNavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       SearchAssessmentTestsItemSubmissionMode     `json:"submissionMode"`
	QtiAssessmentSection []SearchAssessmentTestsQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *SearchAssessmentTestsQtiTestPart) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiTestPart) GetNavigationMode() SearchAssessmentTestsItemNavigationMode {
	if o == nil {
		return SearchAssessmentTestsItemNavigationMode("")
	}
	return o.NavigationMode
}

func (o *SearchAssessmentTestsQtiTestPart) GetSubmissionMode() SearchAssessmentTestsItemSubmissionMode {
	if o == nil {
		return SearchAssessmentTestsItemSubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *SearchAssessmentTestsQtiTestPart) GetQtiAssessmentSection() []SearchAssessmentTestsQtiAssessmentSection {
	if o == nil {
		return []SearchAssessmentTestsQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

// SearchAssessmentTestsCardinality - Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
type SearchAssessmentTestsCardinality string

const (
	SearchAssessmentTestsCardinalitySingle   SearchAssessmentTestsCardinality = "single"
	SearchAssessmentTestsCardinalityMultiple SearchAssessmentTestsCardinality = "multiple"
	SearchAssessmentTestsCardinalityOrdered  SearchAssessmentTestsCardinality = "ordered"
	SearchAssessmentTestsCardinalityRecord   SearchAssessmentTestsCardinality = "record"
)

func (e SearchAssessmentTestsCardinality) ToPointer() *SearchAssessmentTestsCardinality {
	return &e
}
func (e *SearchAssessmentTestsCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = SearchAssessmentTestsCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsCardinality: %v", v)
	}
}

// SearchAssessmentTestsBaseType - Data type of the outcome variable, determining how values are stored and processed
type SearchAssessmentTestsBaseType string

const (
	SearchAssessmentTestsBaseTypeIdentifier   SearchAssessmentTestsBaseType = "identifier"
	SearchAssessmentTestsBaseTypeBoolean      SearchAssessmentTestsBaseType = "boolean"
	SearchAssessmentTestsBaseTypeInteger      SearchAssessmentTestsBaseType = "integer"
	SearchAssessmentTestsBaseTypeFloat        SearchAssessmentTestsBaseType = "float"
	SearchAssessmentTestsBaseTypeString       SearchAssessmentTestsBaseType = "string"
	SearchAssessmentTestsBaseTypePoint        SearchAssessmentTestsBaseType = "point"
	SearchAssessmentTestsBaseTypePair         SearchAssessmentTestsBaseType = "pair"
	SearchAssessmentTestsBaseTypeDirectedPair SearchAssessmentTestsBaseType = "directedPair"
	SearchAssessmentTestsBaseTypeDuration     SearchAssessmentTestsBaseType = "duration"
	SearchAssessmentTestsBaseTypeFile         SearchAssessmentTestsBaseType = "file"
	SearchAssessmentTestsBaseTypeURI          SearchAssessmentTestsBaseType = "uri"
)

func (e SearchAssessmentTestsBaseType) ToPointer() *SearchAssessmentTestsBaseType {
	return &e
}
func (e *SearchAssessmentTestsBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = SearchAssessmentTestsBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsBaseType: %v", v)
	}
}

// SearchAssessmentTestsDefaultValue - Optional default value configuration for outcome variables
type SearchAssessmentTestsDefaultValue struct {
	// The default value to assign to the outcome variable
	Value any `json:"value,omitempty"`
}

func (o *SearchAssessmentTestsDefaultValue) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type SearchAssessmentTestsQtiOutcomeDeclaration struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
	Cardinality *SearchAssessmentTestsCardinality `default:"single" json:"cardinality"`
	// Data type of the outcome variable, determining how values are stored and processed
	BaseType SearchAssessmentTestsBaseType `json:"baseType"`
	// Expected maximum value for this outcome variable in normal circumstances
	NormalMaximum *float64 `json:"normalMaximum,omitempty"`
	// Expected minimum value for this outcome variable in normal circumstances
	NormalMinimum *float64 `json:"normalMinimum,omitempty"`
	// Optional default value configuration for outcome variables
	DefaultValue *SearchAssessmentTestsDefaultValue `json:"defaultValue,omitempty"`
}

func (s SearchAssessmentTestsQtiOutcomeDeclaration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentTestsQtiOutcomeDeclaration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentTestsQtiOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiOutcomeDeclaration) GetCardinality() *SearchAssessmentTestsCardinality {
	if o == nil {
		return nil
	}
	return o.Cardinality
}

func (o *SearchAssessmentTestsQtiOutcomeDeclaration) GetBaseType() SearchAssessmentTestsBaseType {
	if o == nil {
		return SearchAssessmentTestsBaseType("")
	}
	return o.BaseType
}

func (o *SearchAssessmentTestsQtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *SearchAssessmentTestsQtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

func (o *SearchAssessmentTestsQtiOutcomeDeclaration) GetDefaultValue() *SearchAssessmentTestsDefaultValue {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type SearchAssessmentTestsAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	ToolName          string `json:"tool-name"`
	ToolVersion       string `json:"tool-version"`
}

func (o *SearchAssessmentTestsAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *SearchAssessmentTestsAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *SearchAssessmentTestsAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *SearchAssessmentTestsAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchAssessmentTestsAttributes) GetToolName() string {
	if o == nil {
		return ""
	}
	return o.ToolName
}

func (o *SearchAssessmentTestsAttributes) GetToolVersion() string {
	if o == nil {
		return ""
	}
	return o.ToolVersion
}

type SearchAssessmentTestsQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"base-type"`
}

func (o *SearchAssessmentTestsQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *SearchAssessmentTestsQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type SearchAssessmentTestsQtiDefaultValue struct {
	QtiValue any `json:"qti-value,omitempty"`
}

func (o *SearchAssessmentTestsQtiDefaultValue) GetQtiValue() any {
	if o == nil {
		return nil
	}
	return o.QtiValue
}

type SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration struct {
	Attributes      SearchAssessmentTestsQtiOutcomeDeclarationAttributes `json:"_attributes"`
	QtiDefaultValue *SearchAssessmentTestsQtiDefaultValue                `json:"qti-default-value,omitempty"`
	NormalMaximum   *float64                                             `json:"normal-maximum,omitempty"`
	NormalMinimum   *float64                                             `json:"normal-minimum,omitempty"`
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration) GetAttributes() SearchAssessmentTestsQtiOutcomeDeclarationAttributes {
	if o == nil {
		return SearchAssessmentTestsQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration) GetQtiDefaultValue() *SearchAssessmentTestsQtiDefaultValue {
	if o == nil {
		return nil
	}
	return o.QtiDefaultValue
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

type SearchAssessmentTestsQtiTestPartAttributes struct {
	Identifier     string `json:"identifier"`
	NavigationMode string `json:"navigation-mode"`
	SubmissionMode string `json:"submission-mode"`
}

func (o *SearchAssessmentTestsQtiTestPartAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiTestPartAttributes) GetNavigationMode() string {
	if o == nil {
		return ""
	}
	return o.NavigationMode
}

func (o *SearchAssessmentTestsQtiTestPartAttributes) GetSubmissionMode() string {
	if o == nil {
		return ""
	}
	return o.SubmissionMode
}

type SearchAssessmentTestsQtiAssessmentSectionAttributes struct {
	Identifier string `json:"identifier"`
	Title      string `json:"title"`
	Visible    string `json:"visible"`
}

func (o *SearchAssessmentTestsQtiAssessmentSectionAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiAssessmentSectionAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchAssessmentTestsQtiAssessmentSectionAttributes) GetVisible() string {
	if o == nil {
		return ""
	}
	return o.Visible
}

type SearchAssessmentTestsQtiAssessmentItemRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
}

func (o *SearchAssessmentTestsQtiAssessmentItemRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsQtiAssessmentItemRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

type SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef struct {
	Attributes SearchAssessmentTestsQtiAssessmentItemRefAttributes `json:"_attributes"`
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef) GetAttributes() SearchAssessmentTestsQtiAssessmentItemRefAttributes {
	if o == nil {
		return SearchAssessmentTestsQtiAssessmentItemRefAttributes{}
	}
	return o.Attributes
}

type SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection struct {
	Attributes           SearchAssessmentTestsQtiAssessmentSectionAttributes          `json:"_attributes"`
	QtiAssessmentItemRef []SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection) GetAttributes() SearchAssessmentTestsQtiAssessmentSectionAttributes {
	if o == nil {
		return SearchAssessmentTestsQtiAssessmentSectionAttributes{}
	}
	return o.Attributes
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection) GetQtiAssessmentItemRef() []SearchAssessmentTestsQtiAssessmentTestQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

type SearchAssessmentTestsQtiAssessmentTestQtiTestPart struct {
	Attributes           SearchAssessmentTestsQtiTestPartAttributes                   `json:"_attributes"`
	QtiAssessmentSection []SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiTestPart) GetAttributes() SearchAssessmentTestsQtiTestPartAttributes {
	if o == nil {
		return SearchAssessmentTestsQtiTestPartAttributes{}
	}
	return o.Attributes
}

func (o *SearchAssessmentTestsQtiAssessmentTestQtiTestPart) GetQtiAssessmentSection() []SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection {
	if o == nil {
		return []SearchAssessmentTestsQtiAssessmentTestQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

type SearchAssessmentTestsQtiAssessmentTest struct {
	Attributes            SearchAssessmentTestsAttributes                               `json:"_attributes"`
	QtiOutcomeDeclaration []SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration `json:"qti-outcome-declaration"`
	QtiTestPart           []SearchAssessmentTestsQtiAssessmentTestQtiTestPart           `json:"qti-test-part"`
}

func (o *SearchAssessmentTestsQtiAssessmentTest) GetAttributes() SearchAssessmentTestsAttributes {
	if o == nil {
		return SearchAssessmentTestsAttributes{}
	}
	return o.Attributes
}

func (o *SearchAssessmentTestsQtiAssessmentTest) GetQtiOutcomeDeclaration() []SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration {
	if o == nil {
		return []SearchAssessmentTestsQtiAssessmentTestQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *SearchAssessmentTestsQtiAssessmentTest) GetQtiTestPart() []SearchAssessmentTestsQtiAssessmentTestQtiTestPart {
	if o == nil {
		return []SearchAssessmentTestsQtiAssessmentTestQtiTestPart{}
	}
	return o.QtiTestPart
}

// SearchAssessmentTestsContent - Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
type SearchAssessmentTestsContent struct {
	QtiAssessmentTest SearchAssessmentTestsQtiAssessmentTest `json:"qti-assessment-test"`
}

func (o *SearchAssessmentTestsContent) GetQtiAssessmentTest() SearchAssessmentTestsQtiAssessmentTest {
	if o == nil {
		return SearchAssessmentTestsQtiAssessmentTest{}
	}
	return o.QtiAssessmentTest
}

// SearchAssessmentTestsItem - Complete assessment test data including all test parts, sections, items, and configuration settings
type SearchAssessmentTestsItem struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Version of the specification used for this assessment test
	QtiVersion  *string                            `default:"3.0" json:"qtiVersion"`
	QtiTestPart []SearchAssessmentTestsQtiTestPart `json:"qti-test-part"`
	// Array of outcome variable declarations for storing assessment results and computed values
	QtiOutcomeDeclaration []SearchAssessmentTestsQtiOutcomeDeclaration `json:"qti-outcome-declaration"`
	// Time limit for the entire assessment test in seconds. When not specified, there is no time limit
	TimeLimit *float64 `json:"timeLimit,omitempty"`
	// Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
	MaxAttempts *float64 `json:"maxAttempts,omitempty"`
	// Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
	ToolsEnabled map[string]bool `json:"toolsEnabled,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
	Content SearchAssessmentTestsContent `json:"content"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (s SearchAssessmentTestsItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentTestsItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentTestsItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchAssessmentTestsItem) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentTestsItem) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchAssessmentTestsItem) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *SearchAssessmentTestsItem) GetQtiTestPart() []SearchAssessmentTestsQtiTestPart {
	if o == nil {
		return []SearchAssessmentTestsQtiTestPart{}
	}
	return o.QtiTestPart
}

func (o *SearchAssessmentTestsItem) GetQtiOutcomeDeclaration() []SearchAssessmentTestsQtiOutcomeDeclaration {
	if o == nil {
		return []SearchAssessmentTestsQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *SearchAssessmentTestsItem) GetTimeLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeLimit
}

func (o *SearchAssessmentTestsItem) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *SearchAssessmentTestsItem) GetToolsEnabled() map[string]bool {
	if o == nil {
		return nil
	}
	return o.ToolsEnabled
}

func (o *SearchAssessmentTestsItem) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SearchAssessmentTestsItem) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *SearchAssessmentTestsItem) GetContent() SearchAssessmentTestsContent {
	if o == nil {
		return SearchAssessmentTestsContent{}
	}
	return o.Content
}

func (o *SearchAssessmentTestsItem) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *SearchAssessmentTestsItem) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *SearchAssessmentTestsItem) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

// SearchAssessmentTestsOrderResponse - The order to sort the entities by. Either 'asc' or 'desc'.
type SearchAssessmentTestsOrderResponse string

const (
	SearchAssessmentTestsOrderResponseAsc  SearchAssessmentTestsOrderResponse = "asc"
	SearchAssessmentTestsOrderResponseDesc SearchAssessmentTestsOrderResponse = "desc"
)

func (e SearchAssessmentTestsOrderResponse) ToPointer() *SearchAssessmentTestsOrderResponse {
	return &e
}
func (e *SearchAssessmentTestsOrderResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchAssessmentTestsOrderResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentTestsOrderResponse: %v", v)
	}
}

// SearchAssessmentTestsResponseBody - Paginated response containing all assessment tests available on the service provider with navigation metadata
type SearchAssessmentTestsResponseBody struct {
	// Array of assessment tests that match the search criteria on the service provider
	Items []SearchAssessmentTestsItem `json:"items"`
	// The total number of entities that match the search criteria.
	Total float64 `json:"total"`
	// The page number of the entities that match the search criteria.
	Page *float64 `default:"1" json:"page"`
	// The total number of pages of entities that match the search criteria.
	Pages float64 `json:"pages"`
	// The number of entities per page.
	Limit *float64 `default:"10" json:"limit"`
	// The field to sort the entities by.
	Sort string `json:"sort"`
	// The order to sort the entities by. Either 'asc' or 'desc'.
	Order SearchAssessmentTestsOrderResponse `json:"order"`
}

func (s SearchAssessmentTestsResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentTestsResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentTestsResponseBody) GetItems() []SearchAssessmentTestsItem {
	if o == nil {
		return []SearchAssessmentTestsItem{}
	}
	return o.Items
}

func (o *SearchAssessmentTestsResponseBody) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *SearchAssessmentTestsResponseBody) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchAssessmentTestsResponseBody) GetPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.Pages
}

func (o *SearchAssessmentTestsResponseBody) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchAssessmentTestsResponseBody) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *SearchAssessmentTestsResponseBody) GetOrder() SearchAssessmentTestsOrderResponse {
	if o == nil {
		return SearchAssessmentTestsOrderResponse("")
	}
	return o.Order
}

type SearchAssessmentTestsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Assessment tests retrieved successfully
	Object *SearchAssessmentTestsResponseBody
}

func (o *SearchAssessmentTestsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SearchAssessmentTestsResponse) GetObject() *SearchAssessmentTestsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
