// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type Params struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
}

func (o *Params) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

// UpdateStimulusRequestBody - The stimulus content to update.
type UpdateStimulusRequestBody struct {
	Params Params `json:"params"`
	// Create or update a stimulus on the service provider with HTML content and optional configuration
	Body components.Stimulus `json:"body"`
}

func (o *UpdateStimulusRequestBody) GetParams() Params {
	if o == nil {
		return Params{}
	}
	return o.Params
}

func (o *UpdateStimulusRequestBody) GetBody() components.Stimulus {
	if o == nil {
		return components.Stimulus{}
	}
	return o.Body
}

type UpdateStimulusRequest struct {
	// Stimulus identifier
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
	// The stimulus content to update.
	RequestBody UpdateStimulusRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateStimulusRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateStimulusRequest) GetRequestBody() UpdateStimulusRequestBody {
	if o == nil {
		return UpdateStimulusRequestBody{}
	}
	return o.RequestBody
}

type UpdateStimulusCatalogInfo struct {
	// Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
	ID string `json:"id"`
	// This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
	Support string `json:"support"`
	// A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
	Content string `json:"content"`
}

func (o *UpdateStimulusCatalogInfo) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateStimulusCatalogInfo) GetSupport() string {
	if o == nil {
		return ""
	}
	return o.Support
}

func (o *UpdateStimulusCatalogInfo) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

// UpdateStimulusStylesheet - The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
type UpdateStimulusStylesheet struct {
	// The identifier or location of the external stylesheet.
	Href string `json:"href"`
	// The type of the external stylesheet.
	Type string `json:"type"`
}

func (o *UpdateStimulusStylesheet) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateStimulusStylesheet) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateStimulusAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	XMLLang           string `json:"xml:lang"`
	Title             string `json:"title"`
}

func (o *UpdateStimulusAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *UpdateStimulusAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *UpdateStimulusAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *UpdateStimulusAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateStimulusAttributes) GetXMLLang() string {
	if o == nil {
		return ""
	}
	return o.XMLLang
}

func (o *UpdateStimulusAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type UpdateStimulusQtiStylesheetAttributes struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdateStimulusQtiStylesheetAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateStimulusQtiStylesheetAttributes) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateStimulusQtiStylesheet struct {
	Attributes UpdateStimulusQtiStylesheetAttributes `json:"_attributes"`
}

func (o *UpdateStimulusQtiStylesheet) GetAttributes() UpdateStimulusQtiStylesheetAttributes {
	if o == nil {
		return UpdateStimulusQtiStylesheetAttributes{}
	}
	return o.Attributes
}

type UpdateStimulusQtiCatalogAttributes struct {
	ID string `json:"id"`
}

func (o *UpdateStimulusQtiCatalogAttributes) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateStimulusQtiCardAttributes struct {
	Support string `json:"support"`
}

func (o *UpdateStimulusQtiCardAttributes) GetSupport() string {
	if o == nil {
		return ""
	}
	return o.Support
}

type UpdateStimulusQtiCard struct {
	Attributes     UpdateStimulusQtiCardAttributes `json:"_attributes"`
	QtiHTMLContent map[string]any                  `json:"qti-html-content"`
}

func (o *UpdateStimulusQtiCard) GetAttributes() UpdateStimulusQtiCardAttributes {
	if o == nil {
		return UpdateStimulusQtiCardAttributes{}
	}
	return o.Attributes
}

func (o *UpdateStimulusQtiCard) GetQtiHTMLContent() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.QtiHTMLContent
}

type UpdateStimulusQtiCatalog struct {
	Attributes UpdateStimulusQtiCatalogAttributes `json:"_attributes"`
	QtiCard    UpdateStimulusQtiCard              `json:"qti-card"`
}

func (o *UpdateStimulusQtiCatalog) GetAttributes() UpdateStimulusQtiCatalogAttributes {
	if o == nil {
		return UpdateStimulusQtiCatalogAttributes{}
	}
	return o.Attributes
}

func (o *UpdateStimulusQtiCatalog) GetQtiCard() UpdateStimulusQtiCard {
	if o == nil {
		return UpdateStimulusQtiCard{}
	}
	return o.QtiCard
}

type UpdateStimulusQtiCatalogInfo struct {
	QtiCatalog UpdateStimulusQtiCatalog `json:"qti-catalog"`
}

func (o *UpdateStimulusQtiCatalogInfo) GetQtiCatalog() UpdateStimulusQtiCatalog {
	if o == nil {
		return UpdateStimulusQtiCatalog{}
	}
	return o.QtiCatalog
}

type UpdateStimulusQtiAssessmentStimulus struct {
	Attributes      UpdateStimulusAttributes      `json:"_attributes"`
	QtiStimulusBody map[string]any                `json:"qti-stimulus-body"`
	QtiStylesheet   *UpdateStimulusQtiStylesheet  `json:"qti-stylesheet,omitempty"`
	QtiCatalogInfo  *UpdateStimulusQtiCatalogInfo `json:"qti-catalog-info,omitempty"`
}

func (o *UpdateStimulusQtiAssessmentStimulus) GetAttributes() UpdateStimulusAttributes {
	if o == nil {
		return UpdateStimulusAttributes{}
	}
	return o.Attributes
}

func (o *UpdateStimulusQtiAssessmentStimulus) GetQtiStimulusBody() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.QtiStimulusBody
}

func (o *UpdateStimulusQtiAssessmentStimulus) GetQtiStylesheet() *UpdateStimulusQtiStylesheet {
	if o == nil {
		return nil
	}
	return o.QtiStylesheet
}

func (o *UpdateStimulusQtiAssessmentStimulus) GetQtiCatalogInfo() *UpdateStimulusQtiCatalogInfo {
	if o == nil {
		return nil
	}
	return o.QtiCatalogInfo
}

// UpdateStimulusContent - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type UpdateStimulusContent struct {
	QtiAssessmentStimulus UpdateStimulusQtiAssessmentStimulus `json:"qti-assessment-stimulus"`
}

func (o *UpdateStimulusContent) GetQtiAssessmentStimulus() UpdateStimulusQtiAssessmentStimulus {
	if o == nil {
		return UpdateStimulusQtiAssessmentStimulus{}
	}
	return o.QtiAssessmentStimulus
}

// UpdateStimulusResponseBody - Complete stimulus data structure returned from the database including parsed content and metadata
type UpdateStimulusResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Array of catalog cards.
	CatalogInfo []UpdateStimulusCatalogInfo `json:"catalogInfo"`
	// A human readable label that can be used to describe the Stimulus.
	Label *string `json:"label,omitempty"`
	// The default language for the Stimulus.
	Language *string `default:"en" json:"language"`
	// The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
	Stylesheet *UpdateStimulusStylesheet `json:"stylesheet,omitempty"`
	// The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
	ToolName *string `json:"toolName,omitempty"`
	// The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
	ToolVersion *string `json:"toolVersion,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content UpdateStimulusContent `json:"content"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (u UpdateStimulusResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateStimulusResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateStimulusResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateStimulusResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateStimulusResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateStimulusResponseBody) GetCatalogInfo() []UpdateStimulusCatalogInfo {
	if o == nil {
		return []UpdateStimulusCatalogInfo{}
	}
	return o.CatalogInfo
}

func (o *UpdateStimulusResponseBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *UpdateStimulusResponseBody) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *UpdateStimulusResponseBody) GetStylesheet() *UpdateStimulusStylesheet {
	if o == nil {
		return nil
	}
	return o.Stylesheet
}

func (o *UpdateStimulusResponseBody) GetToolName() *string {
	if o == nil {
		return nil
	}
	return o.ToolName
}

func (o *UpdateStimulusResponseBody) GetToolVersion() *string {
	if o == nil {
		return nil
	}
	return o.ToolVersion
}

func (o *UpdateStimulusResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateStimulusResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *UpdateStimulusResponseBody) GetContent() UpdateStimulusContent {
	if o == nil {
		return UpdateStimulusContent{}
	}
	return o.Content
}

func (o *UpdateStimulusResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdateStimulusResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *UpdateStimulusResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

type UpdateStimulusResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Stimulus updated successfully
	Object *UpdateStimulusResponseBody
}

func (o *UpdateStimulusResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateStimulusResponse) GetObject() *UpdateStimulusResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
