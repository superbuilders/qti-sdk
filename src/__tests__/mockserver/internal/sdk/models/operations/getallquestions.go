// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type GetAllQuestionsRequest struct {
	// The unique identifier of the assessment test
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
}

func (o *GetAllQuestionsRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

// Reference information about where this assessment item is located in the test structure
type Reference struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URL reference to the assessment item
	Href string `json:"href"`
	// Test part identifier where this item is located
	TestPart string `json:"testPart"`
	// Section identifier where this item is located
	Section string `json:"section"`
}

func (o *Reference) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *Reference) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *Reference) GetTestPart() string {
	if o == nil {
		return ""
	}
	return o.TestPart
}

func (o *Reference) GetSection() string {
	if o == nil {
		return ""
	}
	return o.Section
}

// GetAllQuestionsType - Assessment item interaction types that are supported by the service provider.
type GetAllQuestionsType string

const (
	GetAllQuestionsTypeChoice           GetAllQuestionsType = "choice"
	GetAllQuestionsTypeTextEntry        GetAllQuestionsType = "text-entry"
	GetAllQuestionsTypeExtendedText     GetAllQuestionsType = "extended-text"
	GetAllQuestionsTypeInlineChoice     GetAllQuestionsType = "inline-choice"
	GetAllQuestionsTypeMatch            GetAllQuestionsType = "match"
	GetAllQuestionsTypeOrder            GetAllQuestionsType = "order"
	GetAllQuestionsTypeAssociate        GetAllQuestionsType = "associate"
	GetAllQuestionsTypeSelectPoint      GetAllQuestionsType = "select-point"
	GetAllQuestionsTypeGraphicOrder     GetAllQuestionsType = "graphic-order"
	GetAllQuestionsTypeGraphicAssociate GetAllQuestionsType = "graphic-associate"
	GetAllQuestionsTypeGraphicGapMatch  GetAllQuestionsType = "graphic-gap-match"
	GetAllQuestionsTypeHotspot          GetAllQuestionsType = "hotspot"
	GetAllQuestionsTypeHottext          GetAllQuestionsType = "hottext"
	GetAllQuestionsTypeSlider           GetAllQuestionsType = "slider"
	GetAllQuestionsTypeDrawing          GetAllQuestionsType = "drawing"
	GetAllQuestionsTypeMedia            GetAllQuestionsType = "media"
	GetAllQuestionsTypeUpload           GetAllQuestionsType = "upload"
)

func (e GetAllQuestionsType) ToPointer() *GetAllQuestionsType {
	return &e
}
func (e *GetAllQuestionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "choice":
		fallthrough
	case "text-entry":
		fallthrough
	case "extended-text":
		fallthrough
	case "inline-choice":
		fallthrough
	case "match":
		fallthrough
	case "order":
		fallthrough
	case "associate":
		fallthrough
	case "select-point":
		fallthrough
	case "graphic-order":
		fallthrough
	case "graphic-associate":
		fallthrough
	case "graphic-gap-match":
		fallthrough
	case "hotspot":
		fallthrough
	case "hottext":
		fallthrough
	case "slider":
		fallthrough
	case "drawing":
		fallthrough
	case "media":
		fallthrough
	case "upload":
		*e = GetAllQuestionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsType: %v", v)
	}
}

// GetAllQuestionsResponseDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type GetAllQuestionsResponseDeclarationCardinality string

const (
	GetAllQuestionsResponseDeclarationCardinalitySingle   GetAllQuestionsResponseDeclarationCardinality = "single"
	GetAllQuestionsResponseDeclarationCardinalityMultiple GetAllQuestionsResponseDeclarationCardinality = "multiple"
	GetAllQuestionsResponseDeclarationCardinalityOrdered  GetAllQuestionsResponseDeclarationCardinality = "ordered"
	GetAllQuestionsResponseDeclarationCardinalityRecord   GetAllQuestionsResponseDeclarationCardinality = "record"
)

func (e GetAllQuestionsResponseDeclarationCardinality) ToPointer() *GetAllQuestionsResponseDeclarationCardinality {
	return &e
}
func (e *GetAllQuestionsResponseDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = GetAllQuestionsResponseDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsResponseDeclarationCardinality: %v", v)
	}
}

// GetAllQuestionsResponseDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type GetAllQuestionsResponseDeclarationBaseType string

const (
	GetAllQuestionsResponseDeclarationBaseTypeIdentifier   GetAllQuestionsResponseDeclarationBaseType = "identifier"
	GetAllQuestionsResponseDeclarationBaseTypeBoolean      GetAllQuestionsResponseDeclarationBaseType = "boolean"
	GetAllQuestionsResponseDeclarationBaseTypeInteger      GetAllQuestionsResponseDeclarationBaseType = "integer"
	GetAllQuestionsResponseDeclarationBaseTypeFloat        GetAllQuestionsResponseDeclarationBaseType = "float"
	GetAllQuestionsResponseDeclarationBaseTypeString       GetAllQuestionsResponseDeclarationBaseType = "string"
	GetAllQuestionsResponseDeclarationBaseTypePoint        GetAllQuestionsResponseDeclarationBaseType = "point"
	GetAllQuestionsResponseDeclarationBaseTypePair         GetAllQuestionsResponseDeclarationBaseType = "pair"
	GetAllQuestionsResponseDeclarationBaseTypeDirectedPair GetAllQuestionsResponseDeclarationBaseType = "directedPair"
	GetAllQuestionsResponseDeclarationBaseTypeDuration     GetAllQuestionsResponseDeclarationBaseType = "duration"
	GetAllQuestionsResponseDeclarationBaseTypeFile         GetAllQuestionsResponseDeclarationBaseType = "file"
	GetAllQuestionsResponseDeclarationBaseTypeURI          GetAllQuestionsResponseDeclarationBaseType = "uri"
)

func (e GetAllQuestionsResponseDeclarationBaseType) ToPointer() *GetAllQuestionsResponseDeclarationBaseType {
	return &e
}
func (e *GetAllQuestionsResponseDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = GetAllQuestionsResponseDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsResponseDeclarationBaseType: %v", v)
	}
}

// GetAllQuestionsCorrectResponse - Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
type GetAllQuestionsCorrectResponse struct {
	Value []string `json:"value"`
}

func (o *GetAllQuestionsCorrectResponse) GetValue() []string {
	if o == nil {
		return []string{}
	}
	return o.Value
}

type GetAllQuestionsResponseDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality GetAllQuestionsResponseDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *GetAllQuestionsResponseDeclarationBaseType `json:"baseType,omitempty"`
	// Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
	CorrectResponse GetAllQuestionsCorrectResponse `json:"correctResponse"`
}

func (o *GetAllQuestionsResponseDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsResponseDeclaration) GetCardinality() GetAllQuestionsResponseDeclarationCardinality {
	if o == nil {
		return GetAllQuestionsResponseDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *GetAllQuestionsResponseDeclaration) GetBaseType() *GetAllQuestionsResponseDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

func (o *GetAllQuestionsResponseDeclaration) GetCorrectResponse() GetAllQuestionsCorrectResponse {
	if o == nil {
		return GetAllQuestionsCorrectResponse{}
	}
	return o.CorrectResponse
}

// GetAllQuestionsOutcomeDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type GetAllQuestionsOutcomeDeclarationCardinality string

const (
	GetAllQuestionsOutcomeDeclarationCardinalitySingle   GetAllQuestionsOutcomeDeclarationCardinality = "single"
	GetAllQuestionsOutcomeDeclarationCardinalityMultiple GetAllQuestionsOutcomeDeclarationCardinality = "multiple"
	GetAllQuestionsOutcomeDeclarationCardinalityOrdered  GetAllQuestionsOutcomeDeclarationCardinality = "ordered"
	GetAllQuestionsOutcomeDeclarationCardinalityRecord   GetAllQuestionsOutcomeDeclarationCardinality = "record"
)

func (e GetAllQuestionsOutcomeDeclarationCardinality) ToPointer() *GetAllQuestionsOutcomeDeclarationCardinality {
	return &e
}
func (e *GetAllQuestionsOutcomeDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = GetAllQuestionsOutcomeDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsOutcomeDeclarationCardinality: %v", v)
	}
}

// GetAllQuestionsOutcomeDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type GetAllQuestionsOutcomeDeclarationBaseType string

const (
	GetAllQuestionsOutcomeDeclarationBaseTypeIdentifier   GetAllQuestionsOutcomeDeclarationBaseType = "identifier"
	GetAllQuestionsOutcomeDeclarationBaseTypeBoolean      GetAllQuestionsOutcomeDeclarationBaseType = "boolean"
	GetAllQuestionsOutcomeDeclarationBaseTypeInteger      GetAllQuestionsOutcomeDeclarationBaseType = "integer"
	GetAllQuestionsOutcomeDeclarationBaseTypeFloat        GetAllQuestionsOutcomeDeclarationBaseType = "float"
	GetAllQuestionsOutcomeDeclarationBaseTypeString       GetAllQuestionsOutcomeDeclarationBaseType = "string"
	GetAllQuestionsOutcomeDeclarationBaseTypePoint        GetAllQuestionsOutcomeDeclarationBaseType = "point"
	GetAllQuestionsOutcomeDeclarationBaseTypePair         GetAllQuestionsOutcomeDeclarationBaseType = "pair"
	GetAllQuestionsOutcomeDeclarationBaseTypeDirectedPair GetAllQuestionsOutcomeDeclarationBaseType = "directedPair"
	GetAllQuestionsOutcomeDeclarationBaseTypeDuration     GetAllQuestionsOutcomeDeclarationBaseType = "duration"
	GetAllQuestionsOutcomeDeclarationBaseTypeFile         GetAllQuestionsOutcomeDeclarationBaseType = "file"
	GetAllQuestionsOutcomeDeclarationBaseTypeURI          GetAllQuestionsOutcomeDeclarationBaseType = "uri"
)

func (e GetAllQuestionsOutcomeDeclarationBaseType) ToPointer() *GetAllQuestionsOutcomeDeclarationBaseType {
	return &e
}
func (e *GetAllQuestionsOutcomeDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = GetAllQuestionsOutcomeDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsOutcomeDeclarationBaseType: %v", v)
	}
}

type GetAllQuestionsOutcomeDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality GetAllQuestionsOutcomeDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *GetAllQuestionsOutcomeDeclarationBaseType `json:"baseType,omitempty"`
}

func (o *GetAllQuestionsOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsOutcomeDeclaration) GetCardinality() GetAllQuestionsOutcomeDeclarationCardinality {
	if o == nil {
		return GetAllQuestionsOutcomeDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *GetAllQuestionsOutcomeDeclaration) GetBaseType() *GetAllQuestionsOutcomeDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

// GetAllQuestionsTemplateType - Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
type GetAllQuestionsTemplateType string

const (
	GetAllQuestionsTemplateTypeMatchCorrect GetAllQuestionsTemplateType = "match_correct"
	GetAllQuestionsTemplateTypeMapResponse  GetAllQuestionsTemplateType = "map_response"
)

func (e GetAllQuestionsTemplateType) ToPointer() *GetAllQuestionsTemplateType {
	return &e
}
func (e *GetAllQuestionsTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "match_correct":
		fallthrough
	case "map_response":
		*e = GetAllQuestionsTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsTemplateType: %v", v)
	}
}

// GetAllQuestionsInlineFeedback - Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
type GetAllQuestionsInlineFeedback struct {
	// Identifier of the outcome variable to be set with the inline feedback value.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier of the variable whose value will be assigned to the outcome variable during response processing.
	VariableIdentifier string `json:"variableIdentifier"`
}

func (o *GetAllQuestionsInlineFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAllQuestionsInlineFeedback) GetVariableIdentifier() string {
	if o == nil {
		return ""
	}
	return o.VariableIdentifier
}

// GetAllQuestionsResponseProcessing - Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
type GetAllQuestionsResponseProcessing struct {
	// Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
	TemplateType GetAllQuestionsTemplateType `json:"templateType"`
	// Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
	ResponseDeclarationIdentifier string `json:"responseDeclarationIdentifier"`
	// Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
	CorrectResponseIdentifier string `json:"correctResponseIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
	IncorrectResponseIdentifier string `json:"incorrectResponseIdentifier"`
	// Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
	InlineFeedback *GetAllQuestionsInlineFeedback `json:"inlineFeedback,omitempty"`
}

func (o *GetAllQuestionsResponseProcessing) GetTemplateType() GetAllQuestionsTemplateType {
	if o == nil {
		return GetAllQuestionsTemplateType("")
	}
	return o.TemplateType
}

func (o *GetAllQuestionsResponseProcessing) GetResponseDeclarationIdentifier() string {
	if o == nil {
		return ""
	}
	return o.ResponseDeclarationIdentifier
}

func (o *GetAllQuestionsResponseProcessing) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAllQuestionsResponseProcessing) GetCorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.CorrectResponseIdentifier
}

func (o *GetAllQuestionsResponseProcessing) GetIncorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.IncorrectResponseIdentifier
}

func (o *GetAllQuestionsResponseProcessing) GetInlineFeedback() *GetAllQuestionsInlineFeedback {
	if o == nil {
		return nil
	}
	return o.InlineFeedback
}

type GetAllQuestionsAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	Adaptive          string `json:"adaptive"`
	TimeDependent     string `json:"time-dependent"`
}

func (o *GetAllQuestionsAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *GetAllQuestionsAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *GetAllQuestionsAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *GetAllQuestionsAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAllQuestionsAttributes) GetAdaptive() string {
	if o == nil {
		return ""
	}
	return o.Adaptive
}

func (o *GetAllQuestionsAttributes) GetTimeDependent() string {
	if o == nil {
		return ""
	}
	return o.TimeDependent
}

type GetAllQuestionsQtiResponseDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *GetAllQuestionsQtiResponseDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsQtiResponseDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *GetAllQuestionsQtiResponseDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type GetAllQuestionsQtiCorrectResponse struct {
	QtiValue []string `json:"qti-value"`
}

func (o *GetAllQuestionsQtiCorrectResponse) GetQtiValue() []string {
	if o == nil {
		return []string{}
	}
	return o.QtiValue
}

type GetAllQuestionsQtiResponseDeclaration struct {
	Attributes         GetAllQuestionsQtiResponseDeclarationAttributes `json:"_attributes"`
	QtiCorrectResponse GetAllQuestionsQtiCorrectResponse               `json:"qti-correct-response"`
}

func (o *GetAllQuestionsQtiResponseDeclaration) GetAttributes() GetAllQuestionsQtiResponseDeclarationAttributes {
	if o == nil {
		return GetAllQuestionsQtiResponseDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *GetAllQuestionsQtiResponseDeclaration) GetQtiCorrectResponse() GetAllQuestionsQtiCorrectResponse {
	if o == nil {
		return GetAllQuestionsQtiCorrectResponse{}
	}
	return o.QtiCorrectResponse
}

type GetAllQuestionsQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *GetAllQuestionsQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *GetAllQuestionsQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type GetAllQuestionsQtiOutcomeDeclaration struct {
	Attributes GetAllQuestionsQtiOutcomeDeclarationAttributes `json:"_attributes"`
}

func (o *GetAllQuestionsQtiOutcomeDeclaration) GetAttributes() GetAllQuestionsQtiOutcomeDeclarationAttributes {
	if o == nil {
		return GetAllQuestionsQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

type GetAllQuestionsQtiAssessmentStimulusRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
	Title      string `json:"title"`
}

func (o *GetAllQuestionsQtiAssessmentStimulusRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsQtiAssessmentStimulusRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetAllQuestionsQtiAssessmentStimulusRefAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetAllQuestionsQtiAssessmentStimulusRef struct {
	Attributes GetAllQuestionsQtiAssessmentStimulusRefAttributes `json:"_attributes"`
}

func (o *GetAllQuestionsQtiAssessmentStimulusRef) GetAttributes() GetAllQuestionsQtiAssessmentStimulusRefAttributes {
	if o == nil {
		return GetAllQuestionsQtiAssessmentStimulusRefAttributes{}
	}
	return o.Attributes
}

type GetAllQuestionsQtiAssessmentItem struct {
	Attributes               GetAllQuestionsAttributes               `json:"_attributes"`
	QtiResponseDeclaration   []GetAllQuestionsQtiResponseDeclaration `json:"qti-response-declaration"`
	QtiOutcomeDeclaration    []GetAllQuestionsQtiOutcomeDeclaration  `json:"qti-outcome-declaration"`
	QtiAssessmentStimulusRef GetAllQuestionsQtiAssessmentStimulusRef `json:"qti-assessment-stimulus-ref"`
	QtiItemBody              any                                     `json:"qti-item-body,omitempty"`
	QtiResponseProcessing    any                                     `json:"qti-response-processing,omitempty"`
}

func (o *GetAllQuestionsQtiAssessmentItem) GetAttributes() GetAllQuestionsAttributes {
	if o == nil {
		return GetAllQuestionsAttributes{}
	}
	return o.Attributes
}

func (o *GetAllQuestionsQtiAssessmentItem) GetQtiResponseDeclaration() []GetAllQuestionsQtiResponseDeclaration {
	if o == nil {
		return []GetAllQuestionsQtiResponseDeclaration{}
	}
	return o.QtiResponseDeclaration
}

func (o *GetAllQuestionsQtiAssessmentItem) GetQtiOutcomeDeclaration() []GetAllQuestionsQtiOutcomeDeclaration {
	if o == nil {
		return []GetAllQuestionsQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *GetAllQuestionsQtiAssessmentItem) GetQtiAssessmentStimulusRef() GetAllQuestionsQtiAssessmentStimulusRef {
	if o == nil {
		return GetAllQuestionsQtiAssessmentStimulusRef{}
	}
	return o.QtiAssessmentStimulusRef
}

func (o *GetAllQuestionsQtiAssessmentItem) GetQtiItemBody() any {
	if o == nil {
		return nil
	}
	return o.QtiItemBody
}

func (o *GetAllQuestionsQtiAssessmentItem) GetQtiResponseProcessing() any {
	if o == nil {
		return nil
	}
	return o.QtiResponseProcessing
}

// GetAllQuestionsContent - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type GetAllQuestionsContent struct {
	QtiAssessmentItem GetAllQuestionsQtiAssessmentItem `json:"qti-assessment-item"`
}

func (o *GetAllQuestionsContent) GetQtiAssessmentItem() GetAllQuestionsQtiAssessmentItem {
	if o == nil {
		return GetAllQuestionsQtiAssessmentItem{}
	}
	return o.QtiAssessmentItem
}

// GetAllQuestionsModalFeedbackShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type GetAllQuestionsModalFeedbackShowHide string

const (
	GetAllQuestionsModalFeedbackShowHideShow GetAllQuestionsModalFeedbackShowHide = "show"
	GetAllQuestionsModalFeedbackShowHideHide GetAllQuestionsModalFeedbackShowHide = "hide"
)

func (e GetAllQuestionsModalFeedbackShowHide) ToPointer() *GetAllQuestionsModalFeedbackShowHide {
	return &e
}
func (e *GetAllQuestionsModalFeedbackShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = GetAllQuestionsModalFeedbackShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsModalFeedbackShowHide: %v", v)
	}
}

type GetAllQuestionsModalFeedback struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide GetAllQuestionsModalFeedbackShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
	Title string `json:"title"`
}

func (o *GetAllQuestionsModalFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAllQuestionsModalFeedback) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsModalFeedback) GetShowHide() GetAllQuestionsModalFeedbackShowHide {
	if o == nil {
		return GetAllQuestionsModalFeedbackShowHide("")
	}
	return o.ShowHide
}

func (o *GetAllQuestionsModalFeedback) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *GetAllQuestionsModalFeedback) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

// GetAllQuestionsFeedbackInlineShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type GetAllQuestionsFeedbackInlineShowHide string

const (
	GetAllQuestionsFeedbackInlineShowHideShow GetAllQuestionsFeedbackInlineShowHide = "show"
	GetAllQuestionsFeedbackInlineShowHideHide GetAllQuestionsFeedbackInlineShowHide = "hide"
)

func (e GetAllQuestionsFeedbackInlineShowHide) ToPointer() *GetAllQuestionsFeedbackInlineShowHide {
	return &e
}
func (e *GetAllQuestionsFeedbackInlineShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = GetAllQuestionsFeedbackInlineShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsFeedbackInlineShowHide: %v", v)
	}
}

type GetAllQuestionsFeedbackInline struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide GetAllQuestionsFeedbackInlineShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *GetAllQuestionsFeedbackInline) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAllQuestionsFeedbackInline) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsFeedbackInline) GetShowHide() GetAllQuestionsFeedbackInlineShowHide {
	if o == nil {
		return GetAllQuestionsFeedbackInlineShowHide("")
	}
	return o.ShowHide
}

func (o *GetAllQuestionsFeedbackInline) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *GetAllQuestionsFeedbackInline) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// GetAllQuestionsFeedbackBlockShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type GetAllQuestionsFeedbackBlockShowHide string

const (
	GetAllQuestionsFeedbackBlockShowHideShow GetAllQuestionsFeedbackBlockShowHide = "show"
	GetAllQuestionsFeedbackBlockShowHideHide GetAllQuestionsFeedbackBlockShowHide = "hide"
)

func (e GetAllQuestionsFeedbackBlockShowHide) ToPointer() *GetAllQuestionsFeedbackBlockShowHide {
	return &e
}
func (e *GetAllQuestionsFeedbackBlockShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = GetAllQuestionsFeedbackBlockShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllQuestionsFeedbackBlockShowHide: %v", v)
	}
}

type GetAllQuestionsFeedbackBlock struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide GetAllQuestionsFeedbackBlockShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *GetAllQuestionsFeedbackBlock) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAllQuestionsFeedbackBlock) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllQuestionsFeedbackBlock) GetShowHide() GetAllQuestionsFeedbackBlockShowHide {
	if o == nil {
		return GetAllQuestionsFeedbackBlockShowHide("")
	}
	return o.ShowHide
}

func (o *GetAllQuestionsFeedbackBlock) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *GetAllQuestionsFeedbackBlock) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

type QuestionQuestion struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Assessment item interaction types that are supported by the service provider.
	Type GetAllQuestionsType `json:"type"`
	// QTI version of the assessment item
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
	TimeDependent *bool `default:"false" json:"timeDependent"`
	// Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
	Adaptive             *bool                                `default:"false" json:"adaptive"`
	ResponseDeclarations []GetAllQuestionsResponseDeclaration `json:"responseDeclarations,omitempty"`
	OutcomeDeclarations  []GetAllQuestionsOutcomeDeclaration  `json:"outcomeDeclarations,omitempty"`
	// Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
	ResponseProcessing GetAllQuestionsResponseProcessing `json:"responseProcessing"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content GetAllQuestionsContent `json:"content"`
	// Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
	ModalFeedback []GetAllQuestionsModalFeedback `json:"modalFeedback,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackInline []GetAllQuestionsFeedbackInline `json:"feedbackInline,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackBlock []GetAllQuestionsFeedbackBlock `json:"feedbackBlock,omitempty"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (q QuestionQuestion) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QuestionQuestion) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *QuestionQuestion) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *QuestionQuestion) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *QuestionQuestion) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *QuestionQuestion) GetType() GetAllQuestionsType {
	if o == nil {
		return GetAllQuestionsType("")
	}
	return o.Type
}

func (o *QuestionQuestion) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *QuestionQuestion) GetTimeDependent() *bool {
	if o == nil {
		return nil
	}
	return o.TimeDependent
}

func (o *QuestionQuestion) GetAdaptive() *bool {
	if o == nil {
		return nil
	}
	return o.Adaptive
}

func (o *QuestionQuestion) GetResponseDeclarations() []GetAllQuestionsResponseDeclaration {
	if o == nil {
		return nil
	}
	return o.ResponseDeclarations
}

func (o *QuestionQuestion) GetOutcomeDeclarations() []GetAllQuestionsOutcomeDeclaration {
	if o == nil {
		return nil
	}
	return o.OutcomeDeclarations
}

func (o *QuestionQuestion) GetResponseProcessing() GetAllQuestionsResponseProcessing {
	if o == nil {
		return GetAllQuestionsResponseProcessing{}
	}
	return o.ResponseProcessing
}

func (o *QuestionQuestion) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *QuestionQuestion) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *QuestionQuestion) GetContent() GetAllQuestionsContent {
	if o == nil {
		return GetAllQuestionsContent{}
	}
	return o.Content
}

func (o *QuestionQuestion) GetModalFeedback() []GetAllQuestionsModalFeedback {
	if o == nil {
		return nil
	}
	return o.ModalFeedback
}

func (o *QuestionQuestion) GetFeedbackInline() []GetAllQuestionsFeedbackInline {
	if o == nil {
		return nil
	}
	return o.FeedbackInline
}

func (o *QuestionQuestion) GetFeedbackBlock() []GetAllQuestionsFeedbackBlock {
	if o == nil {
		return nil
	}
	return o.FeedbackBlock
}

func (o *QuestionQuestion) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *QuestionQuestion) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *QuestionQuestion) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

type Question struct {
	// Reference information about where this assessment item is located in the test structure
	Reference Reference        `json:"reference"`
	Question  QuestionQuestion `json:"question"`
}

func (o *Question) GetReference() Reference {
	if o == nil {
		return Reference{}
	}
	return o.Reference
}

func (o *Question) GetQuestion() QuestionQuestion {
	if o == nil {
		return QuestionQuestion{}
	}
	return o.Question
}

// GetAllQuestionsResponseBody - All questions from the assessment test with their complete data and reference context
type GetAllQuestionsResponseBody struct {
	// Identifier of the assessment test
	AssessmentTest string `json:"assessmentTest"`
	// Title of the assessment test
	Title string `json:"title"`
	// Total number of questions in the assessment test
	TotalQuestions float64 `json:"totalQuestions"`
	// Array of questions with their reference information and complete item data
	Questions []Question `json:"questions"`
}

func (o *GetAllQuestionsResponseBody) GetAssessmentTest() string {
	if o == nil {
		return ""
	}
	return o.AssessmentTest
}

func (o *GetAllQuestionsResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAllQuestionsResponseBody) GetTotalQuestions() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalQuestions
}

func (o *GetAllQuestionsResponseBody) GetQuestions() []Question {
	if o == nil {
		return []Question{}
	}
	return o.Questions
}

type GetAllQuestionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfully retrieved all questions
	Object *GetAllQuestionsResponseBody
}

func (o *GetAllQuestionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetAllQuestionsResponse) GetObject() *GetAllQuestionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
