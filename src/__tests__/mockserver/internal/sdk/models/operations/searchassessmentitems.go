// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// SearchAssessmentItemsSort - Field to sort by
type SearchAssessmentItemsSort string

const (
	SearchAssessmentItemsSortTitle      SearchAssessmentItemsSort = "title"
	SearchAssessmentItemsSortIdentifier SearchAssessmentItemsSort = "identifier"
	SearchAssessmentItemsSortType       SearchAssessmentItemsSort = "type"
	SearchAssessmentItemsSortCreatedAt  SearchAssessmentItemsSort = "createdAt"
	SearchAssessmentItemsSortUpdatedAt  SearchAssessmentItemsSort = "updatedAt"
)

func (e SearchAssessmentItemsSort) ToPointer() *SearchAssessmentItemsSort {
	return &e
}
func (e *SearchAssessmentItemsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "identifier":
		fallthrough
	case "type":
		fallthrough
	case "createdAt":
		fallthrough
	case "updatedAt":
		*e = SearchAssessmentItemsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsSort: %v", v)
	}
}

// SearchAssessmentItemsQueryParamOrder - Sort order
type SearchAssessmentItemsQueryParamOrder string

const (
	SearchAssessmentItemsQueryParamOrderAsc  SearchAssessmentItemsQueryParamOrder = "asc"
	SearchAssessmentItemsQueryParamOrderDesc SearchAssessmentItemsQueryParamOrder = "desc"
)

func (e SearchAssessmentItemsQueryParamOrder) ToPointer() *SearchAssessmentItemsQueryParamOrder {
	return &e
}
func (e *SearchAssessmentItemsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchAssessmentItemsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsQueryParamOrder: %v", v)
	}
}

type SearchAssessmentItemsRequest struct {
	// Search title and identifier fields using a search term. This is a fuzzy search.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Page number for pagination
	Page *string `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Number of items per page
	Limit *string `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Field to sort by
	Sort *SearchAssessmentItemsSort `default:"createdAt" queryParam:"style=form,explode=true,name=sort"`
	// Sort order
	Order *SearchAssessmentItemsQueryParamOrder `default:"desc" queryParam:"style=form,explode=true,name=order"`
	// Advanced filter expression using =, !=, >, >=, <, <=, ~ and logical AND/OR. Example: type='choice'
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
}

func (s SearchAssessmentItemsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentItemsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentItemsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SearchAssessmentItemsRequest) GetPage() *string {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchAssessmentItemsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchAssessmentItemsRequest) GetSort() *SearchAssessmentItemsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *SearchAssessmentItemsRequest) GetOrder() *SearchAssessmentItemsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *SearchAssessmentItemsRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

type Issue struct {
	// Parameter name
	Field string `json:"field"`
	// Validation message
	Message string `json:"message"`
	// Zod issue code
	Code string `json:"code"`
}

func (o *Issue) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *Issue) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *Issue) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

// Meta - Structured metadata from validation layer
type Meta struct {
	// Array of individual validation errors
	Issues []Issue `json:"issues"`
	// Sentry event id
	EventID *string `json:"eventId,omitempty"`
}

func (o *Meta) GetIssues() []Issue {
	if o == nil {
		return []Issue{}
	}
	return o.Issues
}

func (o *Meta) GetEventID() *string {
	if o == nil {
		return nil
	}
	return o.EventID
}

// SearchAssessmentItemsType - Assessment item interaction types that are supported by the service provider.
type SearchAssessmentItemsType string

const (
	SearchAssessmentItemsTypeChoice           SearchAssessmentItemsType = "choice"
	SearchAssessmentItemsTypeTextEntry        SearchAssessmentItemsType = "text-entry"
	SearchAssessmentItemsTypeExtendedText     SearchAssessmentItemsType = "extended-text"
	SearchAssessmentItemsTypeInlineChoice     SearchAssessmentItemsType = "inline-choice"
	SearchAssessmentItemsTypeMatch            SearchAssessmentItemsType = "match"
	SearchAssessmentItemsTypeOrder            SearchAssessmentItemsType = "order"
	SearchAssessmentItemsTypeAssociate        SearchAssessmentItemsType = "associate"
	SearchAssessmentItemsTypeSelectPoint      SearchAssessmentItemsType = "select-point"
	SearchAssessmentItemsTypeGraphicOrder     SearchAssessmentItemsType = "graphic-order"
	SearchAssessmentItemsTypeGraphicAssociate SearchAssessmentItemsType = "graphic-associate"
	SearchAssessmentItemsTypeGraphicGapMatch  SearchAssessmentItemsType = "graphic-gap-match"
	SearchAssessmentItemsTypeHotspot          SearchAssessmentItemsType = "hotspot"
	SearchAssessmentItemsTypeHottext          SearchAssessmentItemsType = "hottext"
	SearchAssessmentItemsTypeSlider           SearchAssessmentItemsType = "slider"
	SearchAssessmentItemsTypeDrawing          SearchAssessmentItemsType = "drawing"
	SearchAssessmentItemsTypeMedia            SearchAssessmentItemsType = "media"
	SearchAssessmentItemsTypeUpload           SearchAssessmentItemsType = "upload"
)

func (e SearchAssessmentItemsType) ToPointer() *SearchAssessmentItemsType {
	return &e
}
func (e *SearchAssessmentItemsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "choice":
		fallthrough
	case "text-entry":
		fallthrough
	case "extended-text":
		fallthrough
	case "inline-choice":
		fallthrough
	case "match":
		fallthrough
	case "order":
		fallthrough
	case "associate":
		fallthrough
	case "select-point":
		fallthrough
	case "graphic-order":
		fallthrough
	case "graphic-associate":
		fallthrough
	case "graphic-gap-match":
		fallthrough
	case "hotspot":
		fallthrough
	case "hottext":
		fallthrough
	case "slider":
		fallthrough
	case "drawing":
		fallthrough
	case "media":
		fallthrough
	case "upload":
		*e = SearchAssessmentItemsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsType: %v", v)
	}
}

// SearchAssessmentItemsResponseDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type SearchAssessmentItemsResponseDeclarationCardinality string

const (
	SearchAssessmentItemsResponseDeclarationCardinalitySingle   SearchAssessmentItemsResponseDeclarationCardinality = "single"
	SearchAssessmentItemsResponseDeclarationCardinalityMultiple SearchAssessmentItemsResponseDeclarationCardinality = "multiple"
	SearchAssessmentItemsResponseDeclarationCardinalityOrdered  SearchAssessmentItemsResponseDeclarationCardinality = "ordered"
	SearchAssessmentItemsResponseDeclarationCardinalityRecord   SearchAssessmentItemsResponseDeclarationCardinality = "record"
)

func (e SearchAssessmentItemsResponseDeclarationCardinality) ToPointer() *SearchAssessmentItemsResponseDeclarationCardinality {
	return &e
}
func (e *SearchAssessmentItemsResponseDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = SearchAssessmentItemsResponseDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsResponseDeclarationCardinality: %v", v)
	}
}

// SearchAssessmentItemsResponseDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type SearchAssessmentItemsResponseDeclarationBaseType string

const (
	SearchAssessmentItemsResponseDeclarationBaseTypeIdentifier   SearchAssessmentItemsResponseDeclarationBaseType = "identifier"
	SearchAssessmentItemsResponseDeclarationBaseTypeBoolean      SearchAssessmentItemsResponseDeclarationBaseType = "boolean"
	SearchAssessmentItemsResponseDeclarationBaseTypeInteger      SearchAssessmentItemsResponseDeclarationBaseType = "integer"
	SearchAssessmentItemsResponseDeclarationBaseTypeFloat        SearchAssessmentItemsResponseDeclarationBaseType = "float"
	SearchAssessmentItemsResponseDeclarationBaseTypeString       SearchAssessmentItemsResponseDeclarationBaseType = "string"
	SearchAssessmentItemsResponseDeclarationBaseTypePoint        SearchAssessmentItemsResponseDeclarationBaseType = "point"
	SearchAssessmentItemsResponseDeclarationBaseTypePair         SearchAssessmentItemsResponseDeclarationBaseType = "pair"
	SearchAssessmentItemsResponseDeclarationBaseTypeDirectedPair SearchAssessmentItemsResponseDeclarationBaseType = "directedPair"
	SearchAssessmentItemsResponseDeclarationBaseTypeDuration     SearchAssessmentItemsResponseDeclarationBaseType = "duration"
	SearchAssessmentItemsResponseDeclarationBaseTypeFile         SearchAssessmentItemsResponseDeclarationBaseType = "file"
	SearchAssessmentItemsResponseDeclarationBaseTypeURI          SearchAssessmentItemsResponseDeclarationBaseType = "uri"
)

func (e SearchAssessmentItemsResponseDeclarationBaseType) ToPointer() *SearchAssessmentItemsResponseDeclarationBaseType {
	return &e
}
func (e *SearchAssessmentItemsResponseDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = SearchAssessmentItemsResponseDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsResponseDeclarationBaseType: %v", v)
	}
}

// SearchAssessmentItemsCorrectResponse - Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
type SearchAssessmentItemsCorrectResponse struct {
	Value []string `json:"value"`
}

func (o *SearchAssessmentItemsCorrectResponse) GetValue() []string {
	if o == nil {
		return []string{}
	}
	return o.Value
}

type SearchAssessmentItemsResponseDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality SearchAssessmentItemsResponseDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *SearchAssessmentItemsResponseDeclarationBaseType `json:"baseType,omitempty"`
	// Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
	CorrectResponse SearchAssessmentItemsCorrectResponse `json:"correctResponse"`
}

func (o *SearchAssessmentItemsResponseDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsResponseDeclaration) GetCardinality() SearchAssessmentItemsResponseDeclarationCardinality {
	if o == nil {
		return SearchAssessmentItemsResponseDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *SearchAssessmentItemsResponseDeclaration) GetBaseType() *SearchAssessmentItemsResponseDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

func (o *SearchAssessmentItemsResponseDeclaration) GetCorrectResponse() SearchAssessmentItemsCorrectResponse {
	if o == nil {
		return SearchAssessmentItemsCorrectResponse{}
	}
	return o.CorrectResponse
}

// SearchAssessmentItemsOutcomeDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type SearchAssessmentItemsOutcomeDeclarationCardinality string

const (
	SearchAssessmentItemsOutcomeDeclarationCardinalitySingle   SearchAssessmentItemsOutcomeDeclarationCardinality = "single"
	SearchAssessmentItemsOutcomeDeclarationCardinalityMultiple SearchAssessmentItemsOutcomeDeclarationCardinality = "multiple"
	SearchAssessmentItemsOutcomeDeclarationCardinalityOrdered  SearchAssessmentItemsOutcomeDeclarationCardinality = "ordered"
	SearchAssessmentItemsOutcomeDeclarationCardinalityRecord   SearchAssessmentItemsOutcomeDeclarationCardinality = "record"
)

func (e SearchAssessmentItemsOutcomeDeclarationCardinality) ToPointer() *SearchAssessmentItemsOutcomeDeclarationCardinality {
	return &e
}
func (e *SearchAssessmentItemsOutcomeDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = SearchAssessmentItemsOutcomeDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsOutcomeDeclarationCardinality: %v", v)
	}
}

// SearchAssessmentItemsOutcomeDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type SearchAssessmentItemsOutcomeDeclarationBaseType string

const (
	SearchAssessmentItemsOutcomeDeclarationBaseTypeIdentifier   SearchAssessmentItemsOutcomeDeclarationBaseType = "identifier"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeBoolean      SearchAssessmentItemsOutcomeDeclarationBaseType = "boolean"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeInteger      SearchAssessmentItemsOutcomeDeclarationBaseType = "integer"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeFloat        SearchAssessmentItemsOutcomeDeclarationBaseType = "float"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeString       SearchAssessmentItemsOutcomeDeclarationBaseType = "string"
	SearchAssessmentItemsOutcomeDeclarationBaseTypePoint        SearchAssessmentItemsOutcomeDeclarationBaseType = "point"
	SearchAssessmentItemsOutcomeDeclarationBaseTypePair         SearchAssessmentItemsOutcomeDeclarationBaseType = "pair"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeDirectedPair SearchAssessmentItemsOutcomeDeclarationBaseType = "directedPair"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeDuration     SearchAssessmentItemsOutcomeDeclarationBaseType = "duration"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeFile         SearchAssessmentItemsOutcomeDeclarationBaseType = "file"
	SearchAssessmentItemsOutcomeDeclarationBaseTypeURI          SearchAssessmentItemsOutcomeDeclarationBaseType = "uri"
)

func (e SearchAssessmentItemsOutcomeDeclarationBaseType) ToPointer() *SearchAssessmentItemsOutcomeDeclarationBaseType {
	return &e
}
func (e *SearchAssessmentItemsOutcomeDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = SearchAssessmentItemsOutcomeDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsOutcomeDeclarationBaseType: %v", v)
	}
}

type SearchAssessmentItemsOutcomeDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality SearchAssessmentItemsOutcomeDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *SearchAssessmentItemsOutcomeDeclarationBaseType `json:"baseType,omitempty"`
}

func (o *SearchAssessmentItemsOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsOutcomeDeclaration) GetCardinality() SearchAssessmentItemsOutcomeDeclarationCardinality {
	if o == nil {
		return SearchAssessmentItemsOutcomeDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *SearchAssessmentItemsOutcomeDeclaration) GetBaseType() *SearchAssessmentItemsOutcomeDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

// SearchAssessmentItemsTemplateType - Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
type SearchAssessmentItemsTemplateType string

const (
	SearchAssessmentItemsTemplateTypeMatchCorrect SearchAssessmentItemsTemplateType = "match_correct"
	SearchAssessmentItemsTemplateTypeMapResponse  SearchAssessmentItemsTemplateType = "map_response"
)

func (e SearchAssessmentItemsTemplateType) ToPointer() *SearchAssessmentItemsTemplateType {
	return &e
}
func (e *SearchAssessmentItemsTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "match_correct":
		fallthrough
	case "map_response":
		*e = SearchAssessmentItemsTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsTemplateType: %v", v)
	}
}

// SearchAssessmentItemsInlineFeedback - Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
type SearchAssessmentItemsInlineFeedback struct {
	// Identifier of the outcome variable to be set with the inline feedback value.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier of the variable whose value will be assigned to the outcome variable during response processing.
	VariableIdentifier string `json:"variableIdentifier"`
}

func (o *SearchAssessmentItemsInlineFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *SearchAssessmentItemsInlineFeedback) GetVariableIdentifier() string {
	if o == nil {
		return ""
	}
	return o.VariableIdentifier
}

// SearchAssessmentItemsResponseProcessing - Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
type SearchAssessmentItemsResponseProcessing struct {
	// Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
	TemplateType SearchAssessmentItemsTemplateType `json:"templateType"`
	// Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
	ResponseDeclarationIdentifier string `json:"responseDeclarationIdentifier"`
	// Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
	CorrectResponseIdentifier string `json:"correctResponseIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
	IncorrectResponseIdentifier string `json:"incorrectResponseIdentifier"`
	// Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
	InlineFeedback *SearchAssessmentItemsInlineFeedback `json:"inlineFeedback,omitempty"`
}

func (o *SearchAssessmentItemsResponseProcessing) GetTemplateType() SearchAssessmentItemsTemplateType {
	if o == nil {
		return SearchAssessmentItemsTemplateType("")
	}
	return o.TemplateType
}

func (o *SearchAssessmentItemsResponseProcessing) GetResponseDeclarationIdentifier() string {
	if o == nil {
		return ""
	}
	return o.ResponseDeclarationIdentifier
}

func (o *SearchAssessmentItemsResponseProcessing) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *SearchAssessmentItemsResponseProcessing) GetCorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.CorrectResponseIdentifier
}

func (o *SearchAssessmentItemsResponseProcessing) GetIncorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.IncorrectResponseIdentifier
}

func (o *SearchAssessmentItemsResponseProcessing) GetInlineFeedback() *SearchAssessmentItemsInlineFeedback {
	if o == nil {
		return nil
	}
	return o.InlineFeedback
}

type SearchAssessmentItemsAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	Adaptive          string `json:"adaptive"`
	TimeDependent     string `json:"time-dependent"`
}

func (o *SearchAssessmentItemsAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *SearchAssessmentItemsAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *SearchAssessmentItemsAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *SearchAssessmentItemsAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchAssessmentItemsAttributes) GetAdaptive() string {
	if o == nil {
		return ""
	}
	return o.Adaptive
}

func (o *SearchAssessmentItemsAttributes) GetTimeDependent() string {
	if o == nil {
		return ""
	}
	return o.TimeDependent
}

type SearchAssessmentItemsQtiResponseDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *SearchAssessmentItemsQtiResponseDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsQtiResponseDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *SearchAssessmentItemsQtiResponseDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type SearchAssessmentItemsQtiCorrectResponse struct {
	QtiValue []string `json:"qti-value"`
}

func (o *SearchAssessmentItemsQtiCorrectResponse) GetQtiValue() []string {
	if o == nil {
		return []string{}
	}
	return o.QtiValue
}

type SearchAssessmentItemsQtiResponseDeclaration struct {
	Attributes         SearchAssessmentItemsQtiResponseDeclarationAttributes `json:"_attributes"`
	QtiCorrectResponse SearchAssessmentItemsQtiCorrectResponse               `json:"qti-correct-response"`
}

func (o *SearchAssessmentItemsQtiResponseDeclaration) GetAttributes() SearchAssessmentItemsQtiResponseDeclarationAttributes {
	if o == nil {
		return SearchAssessmentItemsQtiResponseDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *SearchAssessmentItemsQtiResponseDeclaration) GetQtiCorrectResponse() SearchAssessmentItemsQtiCorrectResponse {
	if o == nil {
		return SearchAssessmentItemsQtiCorrectResponse{}
	}
	return o.QtiCorrectResponse
}

type SearchAssessmentItemsQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *SearchAssessmentItemsQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *SearchAssessmentItemsQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type SearchAssessmentItemsQtiOutcomeDeclaration struct {
	Attributes SearchAssessmentItemsQtiOutcomeDeclarationAttributes `json:"_attributes"`
}

func (o *SearchAssessmentItemsQtiOutcomeDeclaration) GetAttributes() SearchAssessmentItemsQtiOutcomeDeclarationAttributes {
	if o == nil {
		return SearchAssessmentItemsQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

type SearchAssessmentItemsQtiAssessmentStimulusRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
	Title      string `json:"title"`
}

func (o *SearchAssessmentItemsQtiAssessmentStimulusRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsQtiAssessmentStimulusRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *SearchAssessmentItemsQtiAssessmentStimulusRefAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type SearchAssessmentItemsQtiAssessmentStimulusRef struct {
	Attributes SearchAssessmentItemsQtiAssessmentStimulusRefAttributes `json:"_attributes"`
}

func (o *SearchAssessmentItemsQtiAssessmentStimulusRef) GetAttributes() SearchAssessmentItemsQtiAssessmentStimulusRefAttributes {
	if o == nil {
		return SearchAssessmentItemsQtiAssessmentStimulusRefAttributes{}
	}
	return o.Attributes
}

type SearchAssessmentItemsQtiAssessmentItem struct {
	Attributes               SearchAssessmentItemsAttributes               `json:"_attributes"`
	QtiResponseDeclaration   []SearchAssessmentItemsQtiResponseDeclaration `json:"qti-response-declaration"`
	QtiOutcomeDeclaration    []SearchAssessmentItemsQtiOutcomeDeclaration  `json:"qti-outcome-declaration"`
	QtiAssessmentStimulusRef SearchAssessmentItemsQtiAssessmentStimulusRef `json:"qti-assessment-stimulus-ref"`
	QtiItemBody              any                                           `json:"qti-item-body,omitempty"`
	QtiResponseProcessing    any                                           `json:"qti-response-processing,omitempty"`
}

func (o *SearchAssessmentItemsQtiAssessmentItem) GetAttributes() SearchAssessmentItemsAttributes {
	if o == nil {
		return SearchAssessmentItemsAttributes{}
	}
	return o.Attributes
}

func (o *SearchAssessmentItemsQtiAssessmentItem) GetQtiResponseDeclaration() []SearchAssessmentItemsQtiResponseDeclaration {
	if o == nil {
		return []SearchAssessmentItemsQtiResponseDeclaration{}
	}
	return o.QtiResponseDeclaration
}

func (o *SearchAssessmentItemsQtiAssessmentItem) GetQtiOutcomeDeclaration() []SearchAssessmentItemsQtiOutcomeDeclaration {
	if o == nil {
		return []SearchAssessmentItemsQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *SearchAssessmentItemsQtiAssessmentItem) GetQtiAssessmentStimulusRef() SearchAssessmentItemsQtiAssessmentStimulusRef {
	if o == nil {
		return SearchAssessmentItemsQtiAssessmentStimulusRef{}
	}
	return o.QtiAssessmentStimulusRef
}

func (o *SearchAssessmentItemsQtiAssessmentItem) GetQtiItemBody() any {
	if o == nil {
		return nil
	}
	return o.QtiItemBody
}

func (o *SearchAssessmentItemsQtiAssessmentItem) GetQtiResponseProcessing() any {
	if o == nil {
		return nil
	}
	return o.QtiResponseProcessing
}

// SearchAssessmentItemsContent - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type SearchAssessmentItemsContent struct {
	QtiAssessmentItem SearchAssessmentItemsQtiAssessmentItem `json:"qti-assessment-item"`
}

func (o *SearchAssessmentItemsContent) GetQtiAssessmentItem() SearchAssessmentItemsQtiAssessmentItem {
	if o == nil {
		return SearchAssessmentItemsQtiAssessmentItem{}
	}
	return o.QtiAssessmentItem
}

// SearchAssessmentItemsModalFeedbackShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type SearchAssessmentItemsModalFeedbackShowHide string

const (
	SearchAssessmentItemsModalFeedbackShowHideShow SearchAssessmentItemsModalFeedbackShowHide = "show"
	SearchAssessmentItemsModalFeedbackShowHideHide SearchAssessmentItemsModalFeedbackShowHide = "hide"
)

func (e SearchAssessmentItemsModalFeedbackShowHide) ToPointer() *SearchAssessmentItemsModalFeedbackShowHide {
	return &e
}
func (e *SearchAssessmentItemsModalFeedbackShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = SearchAssessmentItemsModalFeedbackShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsModalFeedbackShowHide: %v", v)
	}
}

type SearchAssessmentItemsModalFeedback struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide SearchAssessmentItemsModalFeedbackShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
	Title string `json:"title"`
}

func (o *SearchAssessmentItemsModalFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *SearchAssessmentItemsModalFeedback) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsModalFeedback) GetShowHide() SearchAssessmentItemsModalFeedbackShowHide {
	if o == nil {
		return SearchAssessmentItemsModalFeedbackShowHide("")
	}
	return o.ShowHide
}

func (o *SearchAssessmentItemsModalFeedback) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *SearchAssessmentItemsModalFeedback) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

// SearchAssessmentItemsFeedbackInlineShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type SearchAssessmentItemsFeedbackInlineShowHide string

const (
	SearchAssessmentItemsFeedbackInlineShowHideShow SearchAssessmentItemsFeedbackInlineShowHide = "show"
	SearchAssessmentItemsFeedbackInlineShowHideHide SearchAssessmentItemsFeedbackInlineShowHide = "hide"
)

func (e SearchAssessmentItemsFeedbackInlineShowHide) ToPointer() *SearchAssessmentItemsFeedbackInlineShowHide {
	return &e
}
func (e *SearchAssessmentItemsFeedbackInlineShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = SearchAssessmentItemsFeedbackInlineShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsFeedbackInlineShowHide: %v", v)
	}
}

type SearchAssessmentItemsFeedbackInline struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide SearchAssessmentItemsFeedbackInlineShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *SearchAssessmentItemsFeedbackInline) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *SearchAssessmentItemsFeedbackInline) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsFeedbackInline) GetShowHide() SearchAssessmentItemsFeedbackInlineShowHide {
	if o == nil {
		return SearchAssessmentItemsFeedbackInlineShowHide("")
	}
	return o.ShowHide
}

func (o *SearchAssessmentItemsFeedbackInline) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *SearchAssessmentItemsFeedbackInline) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// SearchAssessmentItemsFeedbackBlockShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type SearchAssessmentItemsFeedbackBlockShowHide string

const (
	SearchAssessmentItemsFeedbackBlockShowHideShow SearchAssessmentItemsFeedbackBlockShowHide = "show"
	SearchAssessmentItemsFeedbackBlockShowHideHide SearchAssessmentItemsFeedbackBlockShowHide = "hide"
)

func (e SearchAssessmentItemsFeedbackBlockShowHide) ToPointer() *SearchAssessmentItemsFeedbackBlockShowHide {
	return &e
}
func (e *SearchAssessmentItemsFeedbackBlockShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = SearchAssessmentItemsFeedbackBlockShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsFeedbackBlockShowHide: %v", v)
	}
}

type SearchAssessmentItemsFeedbackBlock struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide SearchAssessmentItemsFeedbackBlockShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *SearchAssessmentItemsFeedbackBlock) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *SearchAssessmentItemsFeedbackBlock) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsFeedbackBlock) GetShowHide() SearchAssessmentItemsFeedbackBlockShowHide {
	if o == nil {
		return SearchAssessmentItemsFeedbackBlockShowHide("")
	}
	return o.ShowHide
}

func (o *SearchAssessmentItemsFeedbackBlock) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *SearchAssessmentItemsFeedbackBlock) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

type SearchAssessmentItemsItem struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Assessment item interaction types that are supported by the service provider.
	Type SearchAssessmentItemsType `json:"type"`
	// QTI version of the assessment item
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
	TimeDependent *bool `default:"false" json:"timeDependent"`
	// Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
	Adaptive             *bool                                      `default:"false" json:"adaptive"`
	ResponseDeclarations []SearchAssessmentItemsResponseDeclaration `json:"responseDeclarations,omitempty"`
	OutcomeDeclarations  []SearchAssessmentItemsOutcomeDeclaration  `json:"outcomeDeclarations,omitempty"`
	// Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
	ResponseProcessing SearchAssessmentItemsResponseProcessing `json:"responseProcessing"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content SearchAssessmentItemsContent `json:"content"`
	// Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
	ModalFeedback []SearchAssessmentItemsModalFeedback `json:"modalFeedback,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackInline []SearchAssessmentItemsFeedbackInline `json:"feedbackInline,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackBlock []SearchAssessmentItemsFeedbackBlock `json:"feedbackBlock,omitempty"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (s SearchAssessmentItemsItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentItemsItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentItemsItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchAssessmentItemsItem) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchAssessmentItemsItem) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchAssessmentItemsItem) GetType() SearchAssessmentItemsType {
	if o == nil {
		return SearchAssessmentItemsType("")
	}
	return o.Type
}

func (o *SearchAssessmentItemsItem) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *SearchAssessmentItemsItem) GetTimeDependent() *bool {
	if o == nil {
		return nil
	}
	return o.TimeDependent
}

func (o *SearchAssessmentItemsItem) GetAdaptive() *bool {
	if o == nil {
		return nil
	}
	return o.Adaptive
}

func (o *SearchAssessmentItemsItem) GetResponseDeclarations() []SearchAssessmentItemsResponseDeclaration {
	if o == nil {
		return nil
	}
	return o.ResponseDeclarations
}

func (o *SearchAssessmentItemsItem) GetOutcomeDeclarations() []SearchAssessmentItemsOutcomeDeclaration {
	if o == nil {
		return nil
	}
	return o.OutcomeDeclarations
}

func (o *SearchAssessmentItemsItem) GetResponseProcessing() SearchAssessmentItemsResponseProcessing {
	if o == nil {
		return SearchAssessmentItemsResponseProcessing{}
	}
	return o.ResponseProcessing
}

func (o *SearchAssessmentItemsItem) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SearchAssessmentItemsItem) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *SearchAssessmentItemsItem) GetContent() SearchAssessmentItemsContent {
	if o == nil {
		return SearchAssessmentItemsContent{}
	}
	return o.Content
}

func (o *SearchAssessmentItemsItem) GetModalFeedback() []SearchAssessmentItemsModalFeedback {
	if o == nil {
		return nil
	}
	return o.ModalFeedback
}

func (o *SearchAssessmentItemsItem) GetFeedbackInline() []SearchAssessmentItemsFeedbackInline {
	if o == nil {
		return nil
	}
	return o.FeedbackInline
}

func (o *SearchAssessmentItemsItem) GetFeedbackBlock() []SearchAssessmentItemsFeedbackBlock {
	if o == nil {
		return nil
	}
	return o.FeedbackBlock
}

func (o *SearchAssessmentItemsItem) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *SearchAssessmentItemsItem) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *SearchAssessmentItemsItem) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

// SearchAssessmentItemsOrderResponse - The order to sort the entities by. Either 'asc' or 'desc'.
type SearchAssessmentItemsOrderResponse string

const (
	SearchAssessmentItemsOrderResponseAsc  SearchAssessmentItemsOrderResponse = "asc"
	SearchAssessmentItemsOrderResponseDesc SearchAssessmentItemsOrderResponse = "desc"
)

func (e SearchAssessmentItemsOrderResponse) ToPointer() *SearchAssessmentItemsOrderResponse {
	return &e
}
func (e *SearchAssessmentItemsOrderResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchAssessmentItemsOrderResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchAssessmentItemsOrderResponse: %v", v)
	}
}

// SearchAssessmentItemsResponseBody - Paginated response containing all assessment items available on the service provider with navigation metadata
type SearchAssessmentItemsResponseBody struct {
	// Array of assessment items that match the search criteria
	Items []SearchAssessmentItemsItem `json:"items"`
	// The total number of entities that match the search criteria.
	Total float64 `json:"total"`
	// The page number of the entities that match the search criteria.
	Page *float64 `default:"1" json:"page"`
	// The total number of pages of entities that match the search criteria.
	Pages float64 `json:"pages"`
	// The number of entities per page.
	Limit *float64 `default:"10" json:"limit"`
	// The field to sort the entities by.
	Sort string `json:"sort"`
	// The order to sort the entities by. Either 'asc' or 'desc'.
	Order SearchAssessmentItemsOrderResponse `json:"order"`
}

func (s SearchAssessmentItemsResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchAssessmentItemsResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchAssessmentItemsResponseBody) GetItems() []SearchAssessmentItemsItem {
	if o == nil {
		return []SearchAssessmentItemsItem{}
	}
	return o.Items
}

func (o *SearchAssessmentItemsResponseBody) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *SearchAssessmentItemsResponseBody) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchAssessmentItemsResponseBody) GetPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.Pages
}

func (o *SearchAssessmentItemsResponseBody) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchAssessmentItemsResponseBody) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *SearchAssessmentItemsResponseBody) GetOrder() SearchAssessmentItemsOrderResponse {
	if o == nil {
		return SearchAssessmentItemsOrderResponse("")
	}
	return o.Order
}

type SearchAssessmentItemsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// List of assessment items with pagination metadata
	Object *SearchAssessmentItemsResponseBody
}

func (o *SearchAssessmentItemsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SearchAssessmentItemsResponse) GetObject() *SearchAssessmentItemsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
