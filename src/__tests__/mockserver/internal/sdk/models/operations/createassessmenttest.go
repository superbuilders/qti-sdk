// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// CreateAssessmentTestNavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type CreateAssessmentTestNavigationMode string

const (
	CreateAssessmentTestNavigationModeLinear    CreateAssessmentTestNavigationMode = "linear"
	CreateAssessmentTestNavigationModeNonlinear CreateAssessmentTestNavigationMode = "nonlinear"
)

func (e CreateAssessmentTestNavigationMode) ToPointer() *CreateAssessmentTestNavigationMode {
	return &e
}
func (e *CreateAssessmentTestNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = CreateAssessmentTestNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentTestNavigationMode: %v", v)
	}
}

// CreateAssessmentTestSubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type CreateAssessmentTestSubmissionMode string

const (
	CreateAssessmentTestSubmissionModeIndividual   CreateAssessmentTestSubmissionMode = "individual"
	CreateAssessmentTestSubmissionModeSimultaneous CreateAssessmentTestSubmissionMode = "simultaneous"
)

func (e CreateAssessmentTestSubmissionMode) ToPointer() *CreateAssessmentTestSubmissionMode {
	return &e
}
func (e *CreateAssessmentTestSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = CreateAssessmentTestSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentTestSubmissionMode: %v", v)
	}
}

// CreateAssessmentTestQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type CreateAssessmentTestQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *CreateAssessmentTestQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// CreateAssessmentTestQtiAssessmentSection - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type CreateAssessmentTestQtiAssessmentSection struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []CreateAssessmentTestQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (c CreateAssessmentTestQtiAssessmentSection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAssessmentTestQtiAssessmentSection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *CreateAssessmentTestQtiAssessmentSection) GetQtiAssessmentItemRef() []CreateAssessmentTestQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

// CreateAssessmentTestQtiTestPart - Complete test part data returned from the service provider. Contains all sections and their configuration.
type CreateAssessmentTestQtiTestPart struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode CreateAssessmentTestNavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       CreateAssessmentTestSubmissionMode         `json:"submissionMode"`
	QtiAssessmentSection []CreateAssessmentTestQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *CreateAssessmentTestQtiTestPart) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiTestPart) GetNavigationMode() CreateAssessmentTestNavigationMode {
	if o == nil {
		return CreateAssessmentTestNavigationMode("")
	}
	return o.NavigationMode
}

func (o *CreateAssessmentTestQtiTestPart) GetSubmissionMode() CreateAssessmentTestSubmissionMode {
	if o == nil {
		return CreateAssessmentTestSubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *CreateAssessmentTestQtiTestPart) GetQtiAssessmentSection() []CreateAssessmentTestQtiAssessmentSection {
	if o == nil {
		return []CreateAssessmentTestQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

// CreateAssessmentTestCardinality - Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
type CreateAssessmentTestCardinality string

const (
	CreateAssessmentTestCardinalitySingle   CreateAssessmentTestCardinality = "single"
	CreateAssessmentTestCardinalityMultiple CreateAssessmentTestCardinality = "multiple"
	CreateAssessmentTestCardinalityOrdered  CreateAssessmentTestCardinality = "ordered"
	CreateAssessmentTestCardinalityRecord   CreateAssessmentTestCardinality = "record"
)

func (e CreateAssessmentTestCardinality) ToPointer() *CreateAssessmentTestCardinality {
	return &e
}
func (e *CreateAssessmentTestCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = CreateAssessmentTestCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentTestCardinality: %v", v)
	}
}

// CreateAssessmentTestBaseType - Data type of the outcome variable, determining how values are stored and processed
type CreateAssessmentTestBaseType string

const (
	CreateAssessmentTestBaseTypeIdentifier   CreateAssessmentTestBaseType = "identifier"
	CreateAssessmentTestBaseTypeBoolean      CreateAssessmentTestBaseType = "boolean"
	CreateAssessmentTestBaseTypeInteger      CreateAssessmentTestBaseType = "integer"
	CreateAssessmentTestBaseTypeFloat        CreateAssessmentTestBaseType = "float"
	CreateAssessmentTestBaseTypeString       CreateAssessmentTestBaseType = "string"
	CreateAssessmentTestBaseTypePoint        CreateAssessmentTestBaseType = "point"
	CreateAssessmentTestBaseTypePair         CreateAssessmentTestBaseType = "pair"
	CreateAssessmentTestBaseTypeDirectedPair CreateAssessmentTestBaseType = "directedPair"
	CreateAssessmentTestBaseTypeDuration     CreateAssessmentTestBaseType = "duration"
	CreateAssessmentTestBaseTypeFile         CreateAssessmentTestBaseType = "file"
	CreateAssessmentTestBaseTypeURI          CreateAssessmentTestBaseType = "uri"
)

func (e CreateAssessmentTestBaseType) ToPointer() *CreateAssessmentTestBaseType {
	return &e
}
func (e *CreateAssessmentTestBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = CreateAssessmentTestBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentTestBaseType: %v", v)
	}
}

// CreateAssessmentTestDefaultValue - Optional default value configuration for outcome variables
type CreateAssessmentTestDefaultValue struct {
	// The default value to assign to the outcome variable
	Value any `json:"value,omitempty"`
}

func (o *CreateAssessmentTestDefaultValue) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateAssessmentTestQtiOutcomeDeclaration struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
	Cardinality *CreateAssessmentTestCardinality `default:"single" json:"cardinality"`
	// Data type of the outcome variable, determining how values are stored and processed
	BaseType CreateAssessmentTestBaseType `json:"baseType"`
	// Expected maximum value for this outcome variable in normal circumstances
	NormalMaximum *float64 `json:"normalMaximum,omitempty"`
	// Expected minimum value for this outcome variable in normal circumstances
	NormalMinimum *float64 `json:"normalMinimum,omitempty"`
	// Optional default value configuration for outcome variables
	DefaultValue *CreateAssessmentTestDefaultValue `json:"defaultValue,omitempty"`
}

func (c CreateAssessmentTestQtiOutcomeDeclaration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAssessmentTestQtiOutcomeDeclaration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAssessmentTestQtiOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiOutcomeDeclaration) GetCardinality() *CreateAssessmentTestCardinality {
	if o == nil {
		return nil
	}
	return o.Cardinality
}

func (o *CreateAssessmentTestQtiOutcomeDeclaration) GetBaseType() CreateAssessmentTestBaseType {
	if o == nil {
		return CreateAssessmentTestBaseType("")
	}
	return o.BaseType
}

func (o *CreateAssessmentTestQtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *CreateAssessmentTestQtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

func (o *CreateAssessmentTestQtiOutcomeDeclaration) GetDefaultValue() *CreateAssessmentTestDefaultValue {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type CreateAssessmentTestAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	ToolName          string `json:"tool-name"`
	ToolVersion       string `json:"tool-version"`
}

func (o *CreateAssessmentTestAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *CreateAssessmentTestAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *CreateAssessmentTestAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *CreateAssessmentTestAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *CreateAssessmentTestAttributes) GetToolName() string {
	if o == nil {
		return ""
	}
	return o.ToolName
}

func (o *CreateAssessmentTestAttributes) GetToolVersion() string {
	if o == nil {
		return ""
	}
	return o.ToolVersion
}

type CreateAssessmentTestQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"base-type"`
}

func (o *CreateAssessmentTestQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *CreateAssessmentTestQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type CreateAssessmentTestQtiDefaultValue struct {
	QtiValue any `json:"qti-value,omitempty"`
}

func (o *CreateAssessmentTestQtiDefaultValue) GetQtiValue() any {
	if o == nil {
		return nil
	}
	return o.QtiValue
}

type CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration struct {
	Attributes      CreateAssessmentTestQtiOutcomeDeclarationAttributes `json:"_attributes"`
	QtiDefaultValue *CreateAssessmentTestQtiDefaultValue                `json:"qti-default-value,omitempty"`
	NormalMaximum   *float64                                            `json:"normal-maximum,omitempty"`
	NormalMinimum   *float64                                            `json:"normal-minimum,omitempty"`
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetAttributes() CreateAssessmentTestQtiOutcomeDeclarationAttributes {
	if o == nil {
		return CreateAssessmentTestQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetQtiDefaultValue() *CreateAssessmentTestQtiDefaultValue {
	if o == nil {
		return nil
	}
	return o.QtiDefaultValue
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

type CreateAssessmentTestQtiTestPartAttributes struct {
	Identifier     string `json:"identifier"`
	NavigationMode string `json:"navigation-mode"`
	SubmissionMode string `json:"submission-mode"`
}

func (o *CreateAssessmentTestQtiTestPartAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiTestPartAttributes) GetNavigationMode() string {
	if o == nil {
		return ""
	}
	return o.NavigationMode
}

func (o *CreateAssessmentTestQtiTestPartAttributes) GetSubmissionMode() string {
	if o == nil {
		return ""
	}
	return o.SubmissionMode
}

type CreateAssessmentTestQtiAssessmentSectionAttributes struct {
	Identifier string `json:"identifier"`
	Title      string `json:"title"`
	Visible    string `json:"visible"`
}

func (o *CreateAssessmentTestQtiAssessmentSectionAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiAssessmentSectionAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *CreateAssessmentTestQtiAssessmentSectionAttributes) GetVisible() string {
	if o == nil {
		return ""
	}
	return o.Visible
}

type CreateAssessmentTestQtiAssessmentItemRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
}

func (o *CreateAssessmentTestQtiAssessmentItemRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestQtiAssessmentItemRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

type CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef struct {
	Attributes CreateAssessmentTestQtiAssessmentItemRefAttributes `json:"_attributes"`
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef) GetAttributes() CreateAssessmentTestQtiAssessmentItemRefAttributes {
	if o == nil {
		return CreateAssessmentTestQtiAssessmentItemRefAttributes{}
	}
	return o.Attributes
}

type CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection struct {
	Attributes           CreateAssessmentTestQtiAssessmentSectionAttributes          `json:"_attributes"`
	QtiAssessmentItemRef []CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection) GetAttributes() CreateAssessmentTestQtiAssessmentSectionAttributes {
	if o == nil {
		return CreateAssessmentTestQtiAssessmentSectionAttributes{}
	}
	return o.Attributes
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection) GetQtiAssessmentItemRef() []CreateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

type CreateAssessmentTestQtiAssessmentTestQtiTestPart struct {
	Attributes           CreateAssessmentTestQtiTestPartAttributes                   `json:"_attributes"`
	QtiAssessmentSection []CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiTestPart) GetAttributes() CreateAssessmentTestQtiTestPartAttributes {
	if o == nil {
		return CreateAssessmentTestQtiTestPartAttributes{}
	}
	return o.Attributes
}

func (o *CreateAssessmentTestQtiAssessmentTestQtiTestPart) GetQtiAssessmentSection() []CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection {
	if o == nil {
		return []CreateAssessmentTestQtiAssessmentTestQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

type CreateAssessmentTestQtiAssessmentTest struct {
	Attributes            CreateAssessmentTestAttributes                               `json:"_attributes"`
	QtiOutcomeDeclaration []CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration `json:"qti-outcome-declaration"`
	QtiTestPart           []CreateAssessmentTestQtiAssessmentTestQtiTestPart           `json:"qti-test-part"`
}

func (o *CreateAssessmentTestQtiAssessmentTest) GetAttributes() CreateAssessmentTestAttributes {
	if o == nil {
		return CreateAssessmentTestAttributes{}
	}
	return o.Attributes
}

func (o *CreateAssessmentTestQtiAssessmentTest) GetQtiOutcomeDeclaration() []CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration {
	if o == nil {
		return []CreateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *CreateAssessmentTestQtiAssessmentTest) GetQtiTestPart() []CreateAssessmentTestQtiAssessmentTestQtiTestPart {
	if o == nil {
		return []CreateAssessmentTestQtiAssessmentTestQtiTestPart{}
	}
	return o.QtiTestPart
}

// CreateAssessmentTestContent - Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
type CreateAssessmentTestContent struct {
	QtiAssessmentTest CreateAssessmentTestQtiAssessmentTest `json:"qti-assessment-test"`
}

func (o *CreateAssessmentTestContent) GetQtiAssessmentTest() CreateAssessmentTestQtiAssessmentTest {
	if o == nil {
		return CreateAssessmentTestQtiAssessmentTest{}
	}
	return o.QtiAssessmentTest
}

// CreateAssessmentTestResponseBody - Complete assessment test data including all test parts, sections, items, and configuration settings
type CreateAssessmentTestResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Version of the specification used for this assessment test
	QtiVersion  *string                           `default:"3.0" json:"qtiVersion"`
	QtiTestPart []CreateAssessmentTestQtiTestPart `json:"qti-test-part"`
	// Array of outcome variable declarations for storing assessment results and computed values
	QtiOutcomeDeclaration []CreateAssessmentTestQtiOutcomeDeclaration `json:"qti-outcome-declaration"`
	// Time limit for the entire assessment test in seconds. When not specified, there is no time limit
	TimeLimit *float64 `json:"timeLimit,omitempty"`
	// Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
	MaxAttempts *float64 `json:"maxAttempts,omitempty"`
	// Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
	ToolsEnabled map[string]bool `json:"toolsEnabled,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
	Content CreateAssessmentTestContent `json:"content"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
	// Indicates whether the generated XML is valid according to schema validation
	IsValidXML bool `json:"isValidXml"`
}

func (c CreateAssessmentTestResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAssessmentTestResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAssessmentTestResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateAssessmentTestResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentTestResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *CreateAssessmentTestResponseBody) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *CreateAssessmentTestResponseBody) GetQtiTestPart() []CreateAssessmentTestQtiTestPart {
	if o == nil {
		return []CreateAssessmentTestQtiTestPart{}
	}
	return o.QtiTestPart
}

func (o *CreateAssessmentTestResponseBody) GetQtiOutcomeDeclaration() []CreateAssessmentTestQtiOutcomeDeclaration {
	if o == nil {
		return []CreateAssessmentTestQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *CreateAssessmentTestResponseBody) GetTimeLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeLimit
}

func (o *CreateAssessmentTestResponseBody) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *CreateAssessmentTestResponseBody) GetToolsEnabled() map[string]bool {
	if o == nil {
		return nil
	}
	return o.ToolsEnabled
}

func (o *CreateAssessmentTestResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateAssessmentTestResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *CreateAssessmentTestResponseBody) GetContent() CreateAssessmentTestContent {
	if o == nil {
		return CreateAssessmentTestContent{}
	}
	return o.Content
}

func (o *CreateAssessmentTestResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateAssessmentTestResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *CreateAssessmentTestResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

func (o *CreateAssessmentTestResponseBody) GetIsValidXML() bool {
	if o == nil {
		return false
	}
	return o.IsValidXML
}

type CreateAssessmentTestResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Assessment test created successfully
	Object *CreateAssessmentTestResponseBody
}

func (o *CreateAssessmentTestResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateAssessmentTestResponse) GetObject() *CreateAssessmentTestResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
