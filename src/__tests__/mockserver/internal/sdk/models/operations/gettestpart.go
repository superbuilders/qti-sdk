// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetTestPartRequest struct {
	// The unique identifier of the parent assessment test
	AssessmentTestIdentifier string `pathParam:"style=simple,explode=false,name=assessmentTestIdentifier"`
	// The unique identifier of the test part to retrieve
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
}

func (o *GetTestPartRequest) GetAssessmentTestIdentifier() string {
	if o == nil {
		return ""
	}
	return o.AssessmentTestIdentifier
}

func (o *GetTestPartRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

// GetTestPartNavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type GetTestPartNavigationMode string

const (
	GetTestPartNavigationModeLinear    GetTestPartNavigationMode = "linear"
	GetTestPartNavigationModeNonlinear GetTestPartNavigationMode = "nonlinear"
)

func (e GetTestPartNavigationMode) ToPointer() *GetTestPartNavigationMode {
	return &e
}
func (e *GetTestPartNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = GetTestPartNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTestPartNavigationMode: %v", v)
	}
}

// GetTestPartSubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type GetTestPartSubmissionMode string

const (
	GetTestPartSubmissionModeIndividual   GetTestPartSubmissionMode = "individual"
	GetTestPartSubmissionModeSimultaneous GetTestPartSubmissionMode = "simultaneous"
)

func (e GetTestPartSubmissionMode) ToPointer() *GetTestPartSubmissionMode {
	return &e
}
func (e *GetTestPartSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = GetTestPartSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTestPartSubmissionMode: %v", v)
	}
}

// GetTestPartQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type GetTestPartQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *GetTestPartQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetTestPartQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// GetTestPartQtiAssessmentSection - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type GetTestPartQtiAssessmentSection struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []GetTestPartQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (g GetTestPartQtiAssessmentSection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetTestPartQtiAssessmentSection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetTestPartQtiAssessmentSection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetTestPartQtiAssessmentSection) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetTestPartQtiAssessmentSection) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetTestPartQtiAssessmentSection) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *GetTestPartQtiAssessmentSection) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetTestPartQtiAssessmentSection) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *GetTestPartQtiAssessmentSection) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *GetTestPartQtiAssessmentSection) GetQtiAssessmentItemRef() []GetTestPartQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

// GetTestPartResponseBody - Complete test part data returned from the service provider. Contains all sections and their configuration.
type GetTestPartResponseBody struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode GetTestPartNavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       GetTestPartSubmissionMode         `json:"submissionMode"`
	QtiAssessmentSection []GetTestPartQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *GetTestPartResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetTestPartResponseBody) GetNavigationMode() GetTestPartNavigationMode {
	if o == nil {
		return GetTestPartNavigationMode("")
	}
	return o.NavigationMode
}

func (o *GetTestPartResponseBody) GetSubmissionMode() GetTestPartSubmissionMode {
	if o == nil {
		return GetTestPartSubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *GetTestPartResponseBody) GetQtiAssessmentSection() []GetTestPartQtiAssessmentSection {
	if o == nil {
		return []GetTestPartQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

type GetTestPartResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfully retrieved test part
	Object *GetTestPartResponseBody
}

func (o *GetTestPartResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTestPartResponse) GetObject() *GetTestPartResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
