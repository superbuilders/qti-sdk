// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type GetAssessmentItemRequest struct {
	// The unique identifier of the assessment item to retrieve
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
}

func (o *GetAssessmentItemRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

// GetAssessmentItemType - Assessment item interaction types that are supported by the service provider.
type GetAssessmentItemType string

const (
	GetAssessmentItemTypeChoice           GetAssessmentItemType = "choice"
	GetAssessmentItemTypeTextEntry        GetAssessmentItemType = "text-entry"
	GetAssessmentItemTypeExtendedText     GetAssessmentItemType = "extended-text"
	GetAssessmentItemTypeInlineChoice     GetAssessmentItemType = "inline-choice"
	GetAssessmentItemTypeMatch            GetAssessmentItemType = "match"
	GetAssessmentItemTypeOrder            GetAssessmentItemType = "order"
	GetAssessmentItemTypeAssociate        GetAssessmentItemType = "associate"
	GetAssessmentItemTypeSelectPoint      GetAssessmentItemType = "select-point"
	GetAssessmentItemTypeGraphicOrder     GetAssessmentItemType = "graphic-order"
	GetAssessmentItemTypeGraphicAssociate GetAssessmentItemType = "graphic-associate"
	GetAssessmentItemTypeGraphicGapMatch  GetAssessmentItemType = "graphic-gap-match"
	GetAssessmentItemTypeHotspot          GetAssessmentItemType = "hotspot"
	GetAssessmentItemTypeHottext          GetAssessmentItemType = "hottext"
	GetAssessmentItemTypeSlider           GetAssessmentItemType = "slider"
	GetAssessmentItemTypeDrawing          GetAssessmentItemType = "drawing"
	GetAssessmentItemTypeMedia            GetAssessmentItemType = "media"
	GetAssessmentItemTypeUpload           GetAssessmentItemType = "upload"
)

func (e GetAssessmentItemType) ToPointer() *GetAssessmentItemType {
	return &e
}
func (e *GetAssessmentItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "choice":
		fallthrough
	case "text-entry":
		fallthrough
	case "extended-text":
		fallthrough
	case "inline-choice":
		fallthrough
	case "match":
		fallthrough
	case "order":
		fallthrough
	case "associate":
		fallthrough
	case "select-point":
		fallthrough
	case "graphic-order":
		fallthrough
	case "graphic-associate":
		fallthrough
	case "graphic-gap-match":
		fallthrough
	case "hotspot":
		fallthrough
	case "hottext":
		fallthrough
	case "slider":
		fallthrough
	case "drawing":
		fallthrough
	case "media":
		fallthrough
	case "upload":
		*e = GetAssessmentItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemType: %v", v)
	}
}

// GetAssessmentItemResponseDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type GetAssessmentItemResponseDeclarationCardinality string

const (
	GetAssessmentItemResponseDeclarationCardinalitySingle   GetAssessmentItemResponseDeclarationCardinality = "single"
	GetAssessmentItemResponseDeclarationCardinalityMultiple GetAssessmentItemResponseDeclarationCardinality = "multiple"
	GetAssessmentItemResponseDeclarationCardinalityOrdered  GetAssessmentItemResponseDeclarationCardinality = "ordered"
	GetAssessmentItemResponseDeclarationCardinalityRecord   GetAssessmentItemResponseDeclarationCardinality = "record"
)

func (e GetAssessmentItemResponseDeclarationCardinality) ToPointer() *GetAssessmentItemResponseDeclarationCardinality {
	return &e
}
func (e *GetAssessmentItemResponseDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = GetAssessmentItemResponseDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemResponseDeclarationCardinality: %v", v)
	}
}

// GetAssessmentItemResponseDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type GetAssessmentItemResponseDeclarationBaseType string

const (
	GetAssessmentItemResponseDeclarationBaseTypeIdentifier   GetAssessmentItemResponseDeclarationBaseType = "identifier"
	GetAssessmentItemResponseDeclarationBaseTypeBoolean      GetAssessmentItemResponseDeclarationBaseType = "boolean"
	GetAssessmentItemResponseDeclarationBaseTypeInteger      GetAssessmentItemResponseDeclarationBaseType = "integer"
	GetAssessmentItemResponseDeclarationBaseTypeFloat        GetAssessmentItemResponseDeclarationBaseType = "float"
	GetAssessmentItemResponseDeclarationBaseTypeString       GetAssessmentItemResponseDeclarationBaseType = "string"
	GetAssessmentItemResponseDeclarationBaseTypePoint        GetAssessmentItemResponseDeclarationBaseType = "point"
	GetAssessmentItemResponseDeclarationBaseTypePair         GetAssessmentItemResponseDeclarationBaseType = "pair"
	GetAssessmentItemResponseDeclarationBaseTypeDirectedPair GetAssessmentItemResponseDeclarationBaseType = "directedPair"
	GetAssessmentItemResponseDeclarationBaseTypeDuration     GetAssessmentItemResponseDeclarationBaseType = "duration"
	GetAssessmentItemResponseDeclarationBaseTypeFile         GetAssessmentItemResponseDeclarationBaseType = "file"
	GetAssessmentItemResponseDeclarationBaseTypeURI          GetAssessmentItemResponseDeclarationBaseType = "uri"
)

func (e GetAssessmentItemResponseDeclarationBaseType) ToPointer() *GetAssessmentItemResponseDeclarationBaseType {
	return &e
}
func (e *GetAssessmentItemResponseDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = GetAssessmentItemResponseDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemResponseDeclarationBaseType: %v", v)
	}
}

// GetAssessmentItemCorrectResponse - Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
type GetAssessmentItemCorrectResponse struct {
	Value []string `json:"value"`
}

func (o *GetAssessmentItemCorrectResponse) GetValue() []string {
	if o == nil {
		return []string{}
	}
	return o.Value
}

type GetAssessmentItemResponseDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality GetAssessmentItemResponseDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *GetAssessmentItemResponseDeclarationBaseType `json:"baseType,omitempty"`
	// Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
	CorrectResponse GetAssessmentItemCorrectResponse `json:"correctResponse"`
}

func (o *GetAssessmentItemResponseDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemResponseDeclaration) GetCardinality() GetAssessmentItemResponseDeclarationCardinality {
	if o == nil {
		return GetAssessmentItemResponseDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *GetAssessmentItemResponseDeclaration) GetBaseType() *GetAssessmentItemResponseDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

func (o *GetAssessmentItemResponseDeclaration) GetCorrectResponse() GetAssessmentItemCorrectResponse {
	if o == nil {
		return GetAssessmentItemCorrectResponse{}
	}
	return o.CorrectResponse
}

// GetAssessmentItemOutcomeDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type GetAssessmentItemOutcomeDeclarationCardinality string

const (
	GetAssessmentItemOutcomeDeclarationCardinalitySingle   GetAssessmentItemOutcomeDeclarationCardinality = "single"
	GetAssessmentItemOutcomeDeclarationCardinalityMultiple GetAssessmentItemOutcomeDeclarationCardinality = "multiple"
	GetAssessmentItemOutcomeDeclarationCardinalityOrdered  GetAssessmentItemOutcomeDeclarationCardinality = "ordered"
	GetAssessmentItemOutcomeDeclarationCardinalityRecord   GetAssessmentItemOutcomeDeclarationCardinality = "record"
)

func (e GetAssessmentItemOutcomeDeclarationCardinality) ToPointer() *GetAssessmentItemOutcomeDeclarationCardinality {
	return &e
}
func (e *GetAssessmentItemOutcomeDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = GetAssessmentItemOutcomeDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemOutcomeDeclarationCardinality: %v", v)
	}
}

// GetAssessmentItemOutcomeDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type GetAssessmentItemOutcomeDeclarationBaseType string

const (
	GetAssessmentItemOutcomeDeclarationBaseTypeIdentifier   GetAssessmentItemOutcomeDeclarationBaseType = "identifier"
	GetAssessmentItemOutcomeDeclarationBaseTypeBoolean      GetAssessmentItemOutcomeDeclarationBaseType = "boolean"
	GetAssessmentItemOutcomeDeclarationBaseTypeInteger      GetAssessmentItemOutcomeDeclarationBaseType = "integer"
	GetAssessmentItemOutcomeDeclarationBaseTypeFloat        GetAssessmentItemOutcomeDeclarationBaseType = "float"
	GetAssessmentItemOutcomeDeclarationBaseTypeString       GetAssessmentItemOutcomeDeclarationBaseType = "string"
	GetAssessmentItemOutcomeDeclarationBaseTypePoint        GetAssessmentItemOutcomeDeclarationBaseType = "point"
	GetAssessmentItemOutcomeDeclarationBaseTypePair         GetAssessmentItemOutcomeDeclarationBaseType = "pair"
	GetAssessmentItemOutcomeDeclarationBaseTypeDirectedPair GetAssessmentItemOutcomeDeclarationBaseType = "directedPair"
	GetAssessmentItemOutcomeDeclarationBaseTypeDuration     GetAssessmentItemOutcomeDeclarationBaseType = "duration"
	GetAssessmentItemOutcomeDeclarationBaseTypeFile         GetAssessmentItemOutcomeDeclarationBaseType = "file"
	GetAssessmentItemOutcomeDeclarationBaseTypeURI          GetAssessmentItemOutcomeDeclarationBaseType = "uri"
)

func (e GetAssessmentItemOutcomeDeclarationBaseType) ToPointer() *GetAssessmentItemOutcomeDeclarationBaseType {
	return &e
}
func (e *GetAssessmentItemOutcomeDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = GetAssessmentItemOutcomeDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemOutcomeDeclarationBaseType: %v", v)
	}
}

type GetAssessmentItemOutcomeDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality GetAssessmentItemOutcomeDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *GetAssessmentItemOutcomeDeclarationBaseType `json:"baseType,omitempty"`
}

func (o *GetAssessmentItemOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemOutcomeDeclaration) GetCardinality() GetAssessmentItemOutcomeDeclarationCardinality {
	if o == nil {
		return GetAssessmentItemOutcomeDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *GetAssessmentItemOutcomeDeclaration) GetBaseType() *GetAssessmentItemOutcomeDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

// GetAssessmentItemTemplateType - Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
type GetAssessmentItemTemplateType string

const (
	GetAssessmentItemTemplateTypeMatchCorrect GetAssessmentItemTemplateType = "match_correct"
	GetAssessmentItemTemplateTypeMapResponse  GetAssessmentItemTemplateType = "map_response"
)

func (e GetAssessmentItemTemplateType) ToPointer() *GetAssessmentItemTemplateType {
	return &e
}
func (e *GetAssessmentItemTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "match_correct":
		fallthrough
	case "map_response":
		*e = GetAssessmentItemTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemTemplateType: %v", v)
	}
}

// GetAssessmentItemInlineFeedback - Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
type GetAssessmentItemInlineFeedback struct {
	// Identifier of the outcome variable to be set with the inline feedback value.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier of the variable whose value will be assigned to the outcome variable during response processing.
	VariableIdentifier string `json:"variableIdentifier"`
}

func (o *GetAssessmentItemInlineFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAssessmentItemInlineFeedback) GetVariableIdentifier() string {
	if o == nil {
		return ""
	}
	return o.VariableIdentifier
}

// GetAssessmentItemResponseProcessing - Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
type GetAssessmentItemResponseProcessing struct {
	// Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
	TemplateType GetAssessmentItemTemplateType `json:"templateType"`
	// Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
	ResponseDeclarationIdentifier string `json:"responseDeclarationIdentifier"`
	// Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
	CorrectResponseIdentifier string `json:"correctResponseIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
	IncorrectResponseIdentifier string `json:"incorrectResponseIdentifier"`
	// Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
	InlineFeedback *GetAssessmentItemInlineFeedback `json:"inlineFeedback,omitempty"`
}

func (o *GetAssessmentItemResponseProcessing) GetTemplateType() GetAssessmentItemTemplateType {
	if o == nil {
		return GetAssessmentItemTemplateType("")
	}
	return o.TemplateType
}

func (o *GetAssessmentItemResponseProcessing) GetResponseDeclarationIdentifier() string {
	if o == nil {
		return ""
	}
	return o.ResponseDeclarationIdentifier
}

func (o *GetAssessmentItemResponseProcessing) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAssessmentItemResponseProcessing) GetCorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.CorrectResponseIdentifier
}

func (o *GetAssessmentItemResponseProcessing) GetIncorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.IncorrectResponseIdentifier
}

func (o *GetAssessmentItemResponseProcessing) GetInlineFeedback() *GetAssessmentItemInlineFeedback {
	if o == nil {
		return nil
	}
	return o.InlineFeedback
}

type GetAssessmentItemAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	Adaptive          string `json:"adaptive"`
	TimeDependent     string `json:"time-dependent"`
}

func (o *GetAssessmentItemAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *GetAssessmentItemAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *GetAssessmentItemAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *GetAssessmentItemAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAssessmentItemAttributes) GetAdaptive() string {
	if o == nil {
		return ""
	}
	return o.Adaptive
}

func (o *GetAssessmentItemAttributes) GetTimeDependent() string {
	if o == nil {
		return ""
	}
	return o.TimeDependent
}

type GetAssessmentItemQtiResponseDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *GetAssessmentItemQtiResponseDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemQtiResponseDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *GetAssessmentItemQtiResponseDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type GetAssessmentItemQtiCorrectResponse struct {
	QtiValue []string `json:"qti-value"`
}

func (o *GetAssessmentItemQtiCorrectResponse) GetQtiValue() []string {
	if o == nil {
		return []string{}
	}
	return o.QtiValue
}

type GetAssessmentItemQtiResponseDeclaration struct {
	Attributes         GetAssessmentItemQtiResponseDeclarationAttributes `json:"_attributes"`
	QtiCorrectResponse GetAssessmentItemQtiCorrectResponse               `json:"qti-correct-response"`
}

func (o *GetAssessmentItemQtiResponseDeclaration) GetAttributes() GetAssessmentItemQtiResponseDeclarationAttributes {
	if o == nil {
		return GetAssessmentItemQtiResponseDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *GetAssessmentItemQtiResponseDeclaration) GetQtiCorrectResponse() GetAssessmentItemQtiCorrectResponse {
	if o == nil {
		return GetAssessmentItemQtiCorrectResponse{}
	}
	return o.QtiCorrectResponse
}

type GetAssessmentItemQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *GetAssessmentItemQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *GetAssessmentItemQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type GetAssessmentItemQtiOutcomeDeclaration struct {
	Attributes GetAssessmentItemQtiOutcomeDeclarationAttributes `json:"_attributes"`
}

func (o *GetAssessmentItemQtiOutcomeDeclaration) GetAttributes() GetAssessmentItemQtiOutcomeDeclarationAttributes {
	if o == nil {
		return GetAssessmentItemQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

type GetAssessmentItemQtiAssessmentStimulusRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
	Title      string `json:"title"`
}

func (o *GetAssessmentItemQtiAssessmentStimulusRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemQtiAssessmentStimulusRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetAssessmentItemQtiAssessmentStimulusRefAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetAssessmentItemQtiAssessmentStimulusRef struct {
	Attributes GetAssessmentItemQtiAssessmentStimulusRefAttributes `json:"_attributes"`
}

func (o *GetAssessmentItemQtiAssessmentStimulusRef) GetAttributes() GetAssessmentItemQtiAssessmentStimulusRefAttributes {
	if o == nil {
		return GetAssessmentItemQtiAssessmentStimulusRefAttributes{}
	}
	return o.Attributes
}

type GetAssessmentItemQtiAssessmentItem struct {
	Attributes               GetAssessmentItemAttributes               `json:"_attributes"`
	QtiResponseDeclaration   []GetAssessmentItemQtiResponseDeclaration `json:"qti-response-declaration"`
	QtiOutcomeDeclaration    []GetAssessmentItemQtiOutcomeDeclaration  `json:"qti-outcome-declaration"`
	QtiAssessmentStimulusRef GetAssessmentItemQtiAssessmentStimulusRef `json:"qti-assessment-stimulus-ref"`
	QtiItemBody              any                                       `json:"qti-item-body,omitempty"`
	QtiResponseProcessing    any                                       `json:"qti-response-processing,omitempty"`
}

func (o *GetAssessmentItemQtiAssessmentItem) GetAttributes() GetAssessmentItemAttributes {
	if o == nil {
		return GetAssessmentItemAttributes{}
	}
	return o.Attributes
}

func (o *GetAssessmentItemQtiAssessmentItem) GetQtiResponseDeclaration() []GetAssessmentItemQtiResponseDeclaration {
	if o == nil {
		return []GetAssessmentItemQtiResponseDeclaration{}
	}
	return o.QtiResponseDeclaration
}

func (o *GetAssessmentItemQtiAssessmentItem) GetQtiOutcomeDeclaration() []GetAssessmentItemQtiOutcomeDeclaration {
	if o == nil {
		return []GetAssessmentItemQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *GetAssessmentItemQtiAssessmentItem) GetQtiAssessmentStimulusRef() GetAssessmentItemQtiAssessmentStimulusRef {
	if o == nil {
		return GetAssessmentItemQtiAssessmentStimulusRef{}
	}
	return o.QtiAssessmentStimulusRef
}

func (o *GetAssessmentItemQtiAssessmentItem) GetQtiItemBody() any {
	if o == nil {
		return nil
	}
	return o.QtiItemBody
}

func (o *GetAssessmentItemQtiAssessmentItem) GetQtiResponseProcessing() any {
	if o == nil {
		return nil
	}
	return o.QtiResponseProcessing
}

// GetAssessmentItemContent - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type GetAssessmentItemContent struct {
	QtiAssessmentItem GetAssessmentItemQtiAssessmentItem `json:"qti-assessment-item"`
}

func (o *GetAssessmentItemContent) GetQtiAssessmentItem() GetAssessmentItemQtiAssessmentItem {
	if o == nil {
		return GetAssessmentItemQtiAssessmentItem{}
	}
	return o.QtiAssessmentItem
}

// GetAssessmentItemModalFeedbackShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type GetAssessmentItemModalFeedbackShowHide string

const (
	GetAssessmentItemModalFeedbackShowHideShow GetAssessmentItemModalFeedbackShowHide = "show"
	GetAssessmentItemModalFeedbackShowHideHide GetAssessmentItemModalFeedbackShowHide = "hide"
)

func (e GetAssessmentItemModalFeedbackShowHide) ToPointer() *GetAssessmentItemModalFeedbackShowHide {
	return &e
}
func (e *GetAssessmentItemModalFeedbackShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = GetAssessmentItemModalFeedbackShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemModalFeedbackShowHide: %v", v)
	}
}

type GetAssessmentItemModalFeedback struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide GetAssessmentItemModalFeedbackShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
	Title string `json:"title"`
}

func (o *GetAssessmentItemModalFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAssessmentItemModalFeedback) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemModalFeedback) GetShowHide() GetAssessmentItemModalFeedbackShowHide {
	if o == nil {
		return GetAssessmentItemModalFeedbackShowHide("")
	}
	return o.ShowHide
}

func (o *GetAssessmentItemModalFeedback) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *GetAssessmentItemModalFeedback) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

// GetAssessmentItemFeedbackInlineShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type GetAssessmentItemFeedbackInlineShowHide string

const (
	GetAssessmentItemFeedbackInlineShowHideShow GetAssessmentItemFeedbackInlineShowHide = "show"
	GetAssessmentItemFeedbackInlineShowHideHide GetAssessmentItemFeedbackInlineShowHide = "hide"
)

func (e GetAssessmentItemFeedbackInlineShowHide) ToPointer() *GetAssessmentItemFeedbackInlineShowHide {
	return &e
}
func (e *GetAssessmentItemFeedbackInlineShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = GetAssessmentItemFeedbackInlineShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemFeedbackInlineShowHide: %v", v)
	}
}

type GetAssessmentItemFeedbackInline struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide GetAssessmentItemFeedbackInlineShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *GetAssessmentItemFeedbackInline) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAssessmentItemFeedbackInline) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemFeedbackInline) GetShowHide() GetAssessmentItemFeedbackInlineShowHide {
	if o == nil {
		return GetAssessmentItemFeedbackInlineShowHide("")
	}
	return o.ShowHide
}

func (o *GetAssessmentItemFeedbackInline) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *GetAssessmentItemFeedbackInline) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// GetAssessmentItemFeedbackBlockShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type GetAssessmentItemFeedbackBlockShowHide string

const (
	GetAssessmentItemFeedbackBlockShowHideShow GetAssessmentItemFeedbackBlockShowHide = "show"
	GetAssessmentItemFeedbackBlockShowHideHide GetAssessmentItemFeedbackBlockShowHide = "hide"
)

func (e GetAssessmentItemFeedbackBlockShowHide) ToPointer() *GetAssessmentItemFeedbackBlockShowHide {
	return &e
}
func (e *GetAssessmentItemFeedbackBlockShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = GetAssessmentItemFeedbackBlockShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssessmentItemFeedbackBlockShowHide: %v", v)
	}
}

type GetAssessmentItemFeedbackBlock struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide GetAssessmentItemFeedbackBlockShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *GetAssessmentItemFeedbackBlock) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *GetAssessmentItemFeedbackBlock) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemFeedbackBlock) GetShowHide() GetAssessmentItemFeedbackBlockShowHide {
	if o == nil {
		return GetAssessmentItemFeedbackBlockShowHide("")
	}
	return o.ShowHide
}

func (o *GetAssessmentItemFeedbackBlock) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *GetAssessmentItemFeedbackBlock) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// GetAssessmentItemResponseBody - Assessment item retrieved successfully
type GetAssessmentItemResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Assessment item interaction types that are supported by the service provider.
	Type GetAssessmentItemType `json:"type"`
	// QTI version of the assessment item
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
	TimeDependent *bool `default:"false" json:"timeDependent"`
	// Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
	Adaptive             *bool                                  `default:"false" json:"adaptive"`
	ResponseDeclarations []GetAssessmentItemResponseDeclaration `json:"responseDeclarations,omitempty"`
	OutcomeDeclarations  []GetAssessmentItemOutcomeDeclaration  `json:"outcomeDeclarations,omitempty"`
	// Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
	ResponseProcessing GetAssessmentItemResponseProcessing `json:"responseProcessing"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content GetAssessmentItemContent `json:"content"`
	// Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
	ModalFeedback []GetAssessmentItemModalFeedback `json:"modalFeedback,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackInline []GetAssessmentItemFeedbackInline `json:"feedbackInline,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackBlock []GetAssessmentItemFeedbackBlock `json:"feedbackBlock,omitempty"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (g GetAssessmentItemResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAssessmentItemResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAssessmentItemResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetAssessmentItemResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAssessmentItemResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAssessmentItemResponseBody) GetType() GetAssessmentItemType {
	if o == nil {
		return GetAssessmentItemType("")
	}
	return o.Type
}

func (o *GetAssessmentItemResponseBody) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *GetAssessmentItemResponseBody) GetTimeDependent() *bool {
	if o == nil {
		return nil
	}
	return o.TimeDependent
}

func (o *GetAssessmentItemResponseBody) GetAdaptive() *bool {
	if o == nil {
		return nil
	}
	return o.Adaptive
}

func (o *GetAssessmentItemResponseBody) GetResponseDeclarations() []GetAssessmentItemResponseDeclaration {
	if o == nil {
		return nil
	}
	return o.ResponseDeclarations
}

func (o *GetAssessmentItemResponseBody) GetOutcomeDeclarations() []GetAssessmentItemOutcomeDeclaration {
	if o == nil {
		return nil
	}
	return o.OutcomeDeclarations
}

func (o *GetAssessmentItemResponseBody) GetResponseProcessing() GetAssessmentItemResponseProcessing {
	if o == nil {
		return GetAssessmentItemResponseProcessing{}
	}
	return o.ResponseProcessing
}

func (o *GetAssessmentItemResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetAssessmentItemResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *GetAssessmentItemResponseBody) GetContent() GetAssessmentItemContent {
	if o == nil {
		return GetAssessmentItemContent{}
	}
	return o.Content
}

func (o *GetAssessmentItemResponseBody) GetModalFeedback() []GetAssessmentItemModalFeedback {
	if o == nil {
		return nil
	}
	return o.ModalFeedback
}

func (o *GetAssessmentItemResponseBody) GetFeedbackInline() []GetAssessmentItemFeedbackInline {
	if o == nil {
		return nil
	}
	return o.FeedbackInline
}

func (o *GetAssessmentItemResponseBody) GetFeedbackBlock() []GetAssessmentItemFeedbackBlock {
	if o == nil {
		return nil
	}
	return o.FeedbackBlock
}

func (o *GetAssessmentItemResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetAssessmentItemResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *GetAssessmentItemResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

type GetAssessmentItemResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Assessment item retrieved successfully
	Object *GetAssessmentItemResponseBody
}

func (o *GetAssessmentItemResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetAssessmentItemResponse) GetObject() *GetAssessmentItemResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
