// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetSectionRequest struct {
	// Root assessment test identifier
	AssessmentTestIdentifier string `pathParam:"style=simple,explode=false,name=assessmentTestIdentifier"`
	// Parent test part identifier
	TestPartIdentifier string `pathParam:"style=simple,explode=false,name=testPartIdentifier"`
	// Section identifier
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
}

func (o *GetSectionRequest) GetAssessmentTestIdentifier() string {
	if o == nil {
		return ""
	}
	return o.AssessmentTestIdentifier
}

func (o *GetSectionRequest) GetTestPartIdentifier() string {
	if o == nil {
		return ""
	}
	return o.TestPartIdentifier
}

func (o *GetSectionRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

// GetSectionQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type GetSectionQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *GetSectionQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetSectionQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// GetSectionResponseBody - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type GetSectionResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []GetSectionQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (g GetSectionResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSectionResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSectionResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSectionResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetSectionResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetSectionResponseBody) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *GetSectionResponseBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetSectionResponseBody) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *GetSectionResponseBody) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *GetSectionResponseBody) GetQtiAssessmentItemRef() []GetSectionQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

type GetSectionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfully retrieved section
	Object *GetSectionResponseBody
}

func (o *GetSectionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSectionResponse) GetObject() *GetSectionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
