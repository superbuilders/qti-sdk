// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// SearchStimuliSort - Field to sort by
type SearchStimuliSort string

const (
	SearchStimuliSortTitle      SearchStimuliSort = "title"
	SearchStimuliSortIdentifier SearchStimuliSort = "identifier"
	SearchStimuliSortCreatedAt  SearchStimuliSort = "createdAt"
	SearchStimuliSortUpdatedAt  SearchStimuliSort = "updatedAt"
)

func (e SearchStimuliSort) ToPointer() *SearchStimuliSort {
	return &e
}
func (e *SearchStimuliSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "identifier":
		fallthrough
	case "createdAt":
		fallthrough
	case "updatedAt":
		*e = SearchStimuliSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchStimuliSort: %v", v)
	}
}

// SearchStimuliQueryParamOrder - Sort order
type SearchStimuliQueryParamOrder string

const (
	SearchStimuliQueryParamOrderAsc  SearchStimuliQueryParamOrder = "asc"
	SearchStimuliQueryParamOrderDesc SearchStimuliQueryParamOrder = "desc"
)

func (e SearchStimuliQueryParamOrder) ToPointer() *SearchStimuliQueryParamOrder {
	return &e
}
func (e *SearchStimuliQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchStimuliQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchStimuliQueryParamOrder: %v", v)
	}
}

type SearchStimuliRequest struct {
	// Search title and identifier fields using a search term. This is a fuzzy search.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Page number for pagination
	Page *string `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Number of items per page
	Limit *string `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Field to sort by
	Sort *SearchStimuliSort `queryParam:"style=form,explode=true,name=sort"`
	// Sort order
	Order *SearchStimuliQueryParamOrder `default:"desc" queryParam:"style=form,explode=true,name=order"`
}

func (s SearchStimuliRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchStimuliRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchStimuliRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SearchStimuliRequest) GetPage() *string {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchStimuliRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchStimuliRequest) GetSort() *SearchStimuliSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *SearchStimuliRequest) GetOrder() *SearchStimuliQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

type SearchStimuliCatalogInfo struct {
	// Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
	ID string `json:"id"`
	// This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
	Support string `json:"support"`
	// A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
	Content string `json:"content"`
}

func (o *SearchStimuliCatalogInfo) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchStimuliCatalogInfo) GetSupport() string {
	if o == nil {
		return ""
	}
	return o.Support
}

func (o *SearchStimuliCatalogInfo) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

// SearchStimuliStylesheet - The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
type SearchStimuliStylesheet struct {
	// The identifier or location of the external stylesheet.
	Href string `json:"href"`
	// The type of the external stylesheet.
	Type string `json:"type"`
}

func (o *SearchStimuliStylesheet) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *SearchStimuliStylesheet) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type SearchStimuliAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	XMLLang           string `json:"xml:lang"`
	Title             string `json:"title"`
}

func (o *SearchStimuliAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *SearchStimuliAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *SearchStimuliAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *SearchStimuliAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchStimuliAttributes) GetXMLLang() string {
	if o == nil {
		return ""
	}
	return o.XMLLang
}

func (o *SearchStimuliAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type SearchStimuliQtiStylesheetAttributes struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *SearchStimuliQtiStylesheetAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *SearchStimuliQtiStylesheetAttributes) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type SearchStimuliQtiStylesheet struct {
	Attributes SearchStimuliQtiStylesheetAttributes `json:"_attributes"`
}

func (o *SearchStimuliQtiStylesheet) GetAttributes() SearchStimuliQtiStylesheetAttributes {
	if o == nil {
		return SearchStimuliQtiStylesheetAttributes{}
	}
	return o.Attributes
}

type SearchStimuliQtiCatalogAttributes struct {
	ID string `json:"id"`
}

func (o *SearchStimuliQtiCatalogAttributes) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type SearchStimuliQtiCardAttributes struct {
	Support string `json:"support"`
}

func (o *SearchStimuliQtiCardAttributes) GetSupport() string {
	if o == nil {
		return ""
	}
	return o.Support
}

type SearchStimuliQtiCard struct {
	Attributes     SearchStimuliQtiCardAttributes `json:"_attributes"`
	QtiHTMLContent map[string]any                 `json:"qti-html-content"`
}

func (o *SearchStimuliQtiCard) GetAttributes() SearchStimuliQtiCardAttributes {
	if o == nil {
		return SearchStimuliQtiCardAttributes{}
	}
	return o.Attributes
}

func (o *SearchStimuliQtiCard) GetQtiHTMLContent() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.QtiHTMLContent
}

type SearchStimuliQtiCatalog struct {
	Attributes SearchStimuliQtiCatalogAttributes `json:"_attributes"`
	QtiCard    SearchStimuliQtiCard              `json:"qti-card"`
}

func (o *SearchStimuliQtiCatalog) GetAttributes() SearchStimuliQtiCatalogAttributes {
	if o == nil {
		return SearchStimuliQtiCatalogAttributes{}
	}
	return o.Attributes
}

func (o *SearchStimuliQtiCatalog) GetQtiCard() SearchStimuliQtiCard {
	if o == nil {
		return SearchStimuliQtiCard{}
	}
	return o.QtiCard
}

type SearchStimuliQtiCatalogInfo struct {
	QtiCatalog SearchStimuliQtiCatalog `json:"qti-catalog"`
}

func (o *SearchStimuliQtiCatalogInfo) GetQtiCatalog() SearchStimuliQtiCatalog {
	if o == nil {
		return SearchStimuliQtiCatalog{}
	}
	return o.QtiCatalog
}

type SearchStimuliQtiAssessmentStimulus struct {
	Attributes      SearchStimuliAttributes      `json:"_attributes"`
	QtiStimulusBody map[string]any               `json:"qti-stimulus-body"`
	QtiStylesheet   *SearchStimuliQtiStylesheet  `json:"qti-stylesheet,omitempty"`
	QtiCatalogInfo  *SearchStimuliQtiCatalogInfo `json:"qti-catalog-info,omitempty"`
}

func (o *SearchStimuliQtiAssessmentStimulus) GetAttributes() SearchStimuliAttributes {
	if o == nil {
		return SearchStimuliAttributes{}
	}
	return o.Attributes
}

func (o *SearchStimuliQtiAssessmentStimulus) GetQtiStimulusBody() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.QtiStimulusBody
}

func (o *SearchStimuliQtiAssessmentStimulus) GetQtiStylesheet() *SearchStimuliQtiStylesheet {
	if o == nil {
		return nil
	}
	return o.QtiStylesheet
}

func (o *SearchStimuliQtiAssessmentStimulus) GetQtiCatalogInfo() *SearchStimuliQtiCatalogInfo {
	if o == nil {
		return nil
	}
	return o.QtiCatalogInfo
}

// SearchStimuliContent - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type SearchStimuliContent struct {
	QtiAssessmentStimulus SearchStimuliQtiAssessmentStimulus `json:"qti-assessment-stimulus"`
}

func (o *SearchStimuliContent) GetQtiAssessmentStimulus() SearchStimuliQtiAssessmentStimulus {
	if o == nil {
		return SearchStimuliQtiAssessmentStimulus{}
	}
	return o.QtiAssessmentStimulus
}

// SearchStimuliItem - Complete stimulus data structure returned from the database including parsed content and metadata
type SearchStimuliItem struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Array of catalog cards.
	CatalogInfo []SearchStimuliCatalogInfo `json:"catalogInfo"`
	// A human readable label that can be used to describe the Stimulus.
	Label *string `json:"label,omitempty"`
	// The default language for the Stimulus.
	Language *string `default:"en" json:"language"`
	// The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
	Stylesheet *SearchStimuliStylesheet `json:"stylesheet,omitempty"`
	// The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
	ToolName *string `json:"toolName,omitempty"`
	// The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
	ToolVersion *string `json:"toolVersion,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content SearchStimuliContent `json:"content"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (s SearchStimuliItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchStimuliItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchStimuliItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchStimuliItem) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchStimuliItem) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchStimuliItem) GetCatalogInfo() []SearchStimuliCatalogInfo {
	if o == nil {
		return []SearchStimuliCatalogInfo{}
	}
	return o.CatalogInfo
}

func (o *SearchStimuliItem) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *SearchStimuliItem) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *SearchStimuliItem) GetStylesheet() *SearchStimuliStylesheet {
	if o == nil {
		return nil
	}
	return o.Stylesheet
}

func (o *SearchStimuliItem) GetToolName() *string {
	if o == nil {
		return nil
	}
	return o.ToolName
}

func (o *SearchStimuliItem) GetToolVersion() *string {
	if o == nil {
		return nil
	}
	return o.ToolVersion
}

func (o *SearchStimuliItem) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SearchStimuliItem) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *SearchStimuliItem) GetContent() SearchStimuliContent {
	if o == nil {
		return SearchStimuliContent{}
	}
	return o.Content
}

func (o *SearchStimuliItem) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *SearchStimuliItem) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *SearchStimuliItem) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

// SearchStimuliOrderResponse - The order to sort the entities by. Either 'asc' or 'desc'.
type SearchStimuliOrderResponse string

const (
	SearchStimuliOrderResponseAsc  SearchStimuliOrderResponse = "asc"
	SearchStimuliOrderResponseDesc SearchStimuliOrderResponse = "desc"
)

func (e SearchStimuliOrderResponse) ToPointer() *SearchStimuliOrderResponse {
	return &e
}
func (e *SearchStimuliOrderResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchStimuliOrderResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchStimuliOrderResponse: %v", v)
	}
}

// SearchStimuliResponseBody - Paginated response containing all stimuli that match the search criteria with navigation metadata
type SearchStimuliResponseBody struct {
	// The items array will contain all stimuli that match the search criteria on the service provider.
	Items []SearchStimuliItem `json:"items"`
	// The total number of entities that match the search criteria.
	Total float64 `json:"total"`
	// The page number of the entities that match the search criteria.
	Page *float64 `default:"1" json:"page"`
	// The total number of pages of entities that match the search criteria.
	Pages float64 `json:"pages"`
	// The number of entities per page.
	Limit *float64 `default:"10" json:"limit"`
	// The field to sort the entities by.
	Sort string `json:"sort"`
	// The order to sort the entities by. Either 'asc' or 'desc'.
	Order SearchStimuliOrderResponse `json:"order"`
}

func (s SearchStimuliResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchStimuliResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchStimuliResponseBody) GetItems() []SearchStimuliItem {
	if o == nil {
		return []SearchStimuliItem{}
	}
	return o.Items
}

func (o *SearchStimuliResponseBody) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *SearchStimuliResponseBody) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchStimuliResponseBody) GetPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.Pages
}

func (o *SearchStimuliResponseBody) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchStimuliResponseBody) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *SearchStimuliResponseBody) GetOrder() SearchStimuliOrderResponse {
	if o == nil {
		return SearchStimuliOrderResponse("")
	}
	return o.Order
}

type SearchStimuliResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfully retrieved stimuli
	Object *SearchStimuliResponseBody
}

func (o *SearchStimuliResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SearchStimuliResponse) GetObject() *SearchStimuliResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
