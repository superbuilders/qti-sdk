// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// TypeRequest - Assessment item interaction types that are supported by the service provider.
type TypeRequest string

const (
	TypeRequestChoice           TypeRequest = "choice"
	TypeRequestTextEntry        TypeRequest = "text-entry"
	TypeRequestExtendedText     TypeRequest = "extended-text"
	TypeRequestInlineChoice     TypeRequest = "inline-choice"
	TypeRequestMatch            TypeRequest = "match"
	TypeRequestOrder            TypeRequest = "order"
	TypeRequestAssociate        TypeRequest = "associate"
	TypeRequestSelectPoint      TypeRequest = "select-point"
	TypeRequestGraphicOrder     TypeRequest = "graphic-order"
	TypeRequestGraphicAssociate TypeRequest = "graphic-associate"
	TypeRequestGraphicGapMatch  TypeRequest = "graphic-gap-match"
	TypeRequestHotspot          TypeRequest = "hotspot"
	TypeRequestHottext          TypeRequest = "hottext"
	TypeRequestSlider           TypeRequest = "slider"
	TypeRequestDrawing          TypeRequest = "drawing"
	TypeRequestMedia            TypeRequest = "media"
	TypeRequestUpload           TypeRequest = "upload"
)

func (e TypeRequest) ToPointer() *TypeRequest {
	return &e
}
func (e *TypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "choice":
		fallthrough
	case "text-entry":
		fallthrough
	case "extended-text":
		fallthrough
	case "inline-choice":
		fallthrough
	case "match":
		fallthrough
	case "order":
		fallthrough
	case "associate":
		fallthrough
	case "select-point":
		fallthrough
	case "graphic-order":
		fallthrough
	case "graphic-associate":
		fallthrough
	case "graphic-gap-match":
		fallthrough
	case "hotspot":
		fallthrough
	case "hottext":
		fallthrough
	case "slider":
		fallthrough
	case "drawing":
		fallthrough
	case "media":
		fallthrough
	case "upload":
		*e = TypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeRequest: %v", v)
	}
}

// ResponseDeclarationCardinalityRequest - Specifies how many values the response variable can hold and whether order matters.
type ResponseDeclarationCardinalityRequest string

const (
	ResponseDeclarationCardinalityRequestSingle   ResponseDeclarationCardinalityRequest = "single"
	ResponseDeclarationCardinalityRequestMultiple ResponseDeclarationCardinalityRequest = "multiple"
	ResponseDeclarationCardinalityRequestOrdered  ResponseDeclarationCardinalityRequest = "ordered"
	ResponseDeclarationCardinalityRequestRecord   ResponseDeclarationCardinalityRequest = "record"
)

func (e ResponseDeclarationCardinalityRequest) ToPointer() *ResponseDeclarationCardinalityRequest {
	return &e
}
func (e *ResponseDeclarationCardinalityRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = ResponseDeclarationCardinalityRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseDeclarationCardinalityRequest: %v", v)
	}
}

// ResponseDeclarationBaseTypeRequest - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type ResponseDeclarationBaseTypeRequest string

const (
	ResponseDeclarationBaseTypeRequestIdentifier   ResponseDeclarationBaseTypeRequest = "identifier"
	ResponseDeclarationBaseTypeRequestBoolean      ResponseDeclarationBaseTypeRequest = "boolean"
	ResponseDeclarationBaseTypeRequestInteger      ResponseDeclarationBaseTypeRequest = "integer"
	ResponseDeclarationBaseTypeRequestFloat        ResponseDeclarationBaseTypeRequest = "float"
	ResponseDeclarationBaseTypeRequestString       ResponseDeclarationBaseTypeRequest = "string"
	ResponseDeclarationBaseTypeRequestPoint        ResponseDeclarationBaseTypeRequest = "point"
	ResponseDeclarationBaseTypeRequestPair         ResponseDeclarationBaseTypeRequest = "pair"
	ResponseDeclarationBaseTypeRequestDirectedPair ResponseDeclarationBaseTypeRequest = "directedPair"
	ResponseDeclarationBaseTypeRequestDuration     ResponseDeclarationBaseTypeRequest = "duration"
	ResponseDeclarationBaseTypeRequestFile         ResponseDeclarationBaseTypeRequest = "file"
	ResponseDeclarationBaseTypeRequestURI          ResponseDeclarationBaseTypeRequest = "uri"
)

func (e ResponseDeclarationBaseTypeRequest) ToPointer() *ResponseDeclarationBaseTypeRequest {
	return &e
}
func (e *ResponseDeclarationBaseTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = ResponseDeclarationBaseTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseDeclarationBaseTypeRequest: %v", v)
	}
}

// CorrectResponseRequest - Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
type CorrectResponseRequest struct {
	Value []string `json:"value"`
}

func (o *CorrectResponseRequest) GetValue() []string {
	if o == nil {
		return []string{}
	}
	return o.Value
}

type ResponseDeclarationRequest struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality ResponseDeclarationCardinalityRequest `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *ResponseDeclarationBaseTypeRequest `json:"baseType,omitempty"`
	// Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
	CorrectResponse CorrectResponseRequest `json:"correctResponse"`
}

func (o *ResponseDeclarationRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *ResponseDeclarationRequest) GetCardinality() ResponseDeclarationCardinalityRequest {
	if o == nil {
		return ResponseDeclarationCardinalityRequest("")
	}
	return o.Cardinality
}

func (o *ResponseDeclarationRequest) GetBaseType() *ResponseDeclarationBaseTypeRequest {
	if o == nil {
		return nil
	}
	return o.BaseType
}

func (o *ResponseDeclarationRequest) GetCorrectResponse() CorrectResponseRequest {
	if o == nil {
		return CorrectResponseRequest{}
	}
	return o.CorrectResponse
}

// OutcomeDeclarationCardinalityRequest - Specifies how many values the response variable can hold and whether order matters.
type OutcomeDeclarationCardinalityRequest string

const (
	OutcomeDeclarationCardinalityRequestSingle   OutcomeDeclarationCardinalityRequest = "single"
	OutcomeDeclarationCardinalityRequestMultiple OutcomeDeclarationCardinalityRequest = "multiple"
	OutcomeDeclarationCardinalityRequestOrdered  OutcomeDeclarationCardinalityRequest = "ordered"
	OutcomeDeclarationCardinalityRequestRecord   OutcomeDeclarationCardinalityRequest = "record"
)

func (e OutcomeDeclarationCardinalityRequest) ToPointer() *OutcomeDeclarationCardinalityRequest {
	return &e
}
func (e *OutcomeDeclarationCardinalityRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = OutcomeDeclarationCardinalityRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutcomeDeclarationCardinalityRequest: %v", v)
	}
}

// OutcomeDeclarationBaseTypeRequest - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type OutcomeDeclarationBaseTypeRequest string

const (
	OutcomeDeclarationBaseTypeRequestIdentifier   OutcomeDeclarationBaseTypeRequest = "identifier"
	OutcomeDeclarationBaseTypeRequestBoolean      OutcomeDeclarationBaseTypeRequest = "boolean"
	OutcomeDeclarationBaseTypeRequestInteger      OutcomeDeclarationBaseTypeRequest = "integer"
	OutcomeDeclarationBaseTypeRequestFloat        OutcomeDeclarationBaseTypeRequest = "float"
	OutcomeDeclarationBaseTypeRequestString       OutcomeDeclarationBaseTypeRequest = "string"
	OutcomeDeclarationBaseTypeRequestPoint        OutcomeDeclarationBaseTypeRequest = "point"
	OutcomeDeclarationBaseTypeRequestPair         OutcomeDeclarationBaseTypeRequest = "pair"
	OutcomeDeclarationBaseTypeRequestDirectedPair OutcomeDeclarationBaseTypeRequest = "directedPair"
	OutcomeDeclarationBaseTypeRequestDuration     OutcomeDeclarationBaseTypeRequest = "duration"
	OutcomeDeclarationBaseTypeRequestFile         OutcomeDeclarationBaseTypeRequest = "file"
	OutcomeDeclarationBaseTypeRequestURI          OutcomeDeclarationBaseTypeRequest = "uri"
)

func (e OutcomeDeclarationBaseTypeRequest) ToPointer() *OutcomeDeclarationBaseTypeRequest {
	return &e
}
func (e *OutcomeDeclarationBaseTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = OutcomeDeclarationBaseTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutcomeDeclarationBaseTypeRequest: %v", v)
	}
}

type OutcomeDeclarationRequest struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality OutcomeDeclarationCardinalityRequest `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *OutcomeDeclarationBaseTypeRequest `json:"baseType,omitempty"`
}

func (o *OutcomeDeclarationRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *OutcomeDeclarationRequest) GetCardinality() OutcomeDeclarationCardinalityRequest {
	if o == nil {
		return OutcomeDeclarationCardinalityRequest("")
	}
	return o.Cardinality
}

func (o *OutcomeDeclarationRequest) GetBaseType() *OutcomeDeclarationBaseTypeRequest {
	if o == nil {
		return nil
	}
	return o.BaseType
}

// TemplateTypeRequest - Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
type TemplateTypeRequest string

const (
	TemplateTypeRequestMatchCorrect TemplateTypeRequest = "match_correct"
	TemplateTypeRequestMapResponse  TemplateTypeRequest = "map_response"
)

func (e TemplateTypeRequest) ToPointer() *TemplateTypeRequest {
	return &e
}
func (e *TemplateTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "match_correct":
		fallthrough
	case "map_response":
		*e = TemplateTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateTypeRequest: %v", v)
	}
}

// InlineFeedbackRequest - Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
type InlineFeedbackRequest struct {
	// Identifier of the outcome variable to be set with the inline feedback value.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier of the variable whose value will be assigned to the outcome variable during response processing.
	VariableIdentifier string `json:"variableIdentifier"`
}

func (o *InlineFeedbackRequest) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *InlineFeedbackRequest) GetVariableIdentifier() string {
	if o == nil {
		return ""
	}
	return o.VariableIdentifier
}

// ResponseProcessingRequest - Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
type ResponseProcessingRequest struct {
	// Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
	TemplateType TemplateTypeRequest `json:"templateType"`
	// Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
	ResponseDeclarationIdentifier string `json:"responseDeclarationIdentifier"`
	// Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
	CorrectResponseIdentifier string `json:"correctResponseIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
	IncorrectResponseIdentifier string `json:"incorrectResponseIdentifier"`
	// Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
	InlineFeedback *InlineFeedbackRequest `json:"inlineFeedback,omitempty"`
}

func (o *ResponseProcessingRequest) GetTemplateType() TemplateTypeRequest {
	if o == nil {
		return TemplateTypeRequest("")
	}
	return o.TemplateType
}

func (o *ResponseProcessingRequest) GetResponseDeclarationIdentifier() string {
	if o == nil {
		return ""
	}
	return o.ResponseDeclarationIdentifier
}

func (o *ResponseProcessingRequest) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *ResponseProcessingRequest) GetCorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.CorrectResponseIdentifier
}

func (o *ResponseProcessingRequest) GetIncorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.IncorrectResponseIdentifier
}

func (o *ResponseProcessingRequest) GetInlineFeedback() *InlineFeedbackRequest {
	if o == nil {
		return nil
	}
	return o.InlineFeedback
}

type AttributesRequest struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	Adaptive          string `json:"adaptive"`
	TimeDependent     string `json:"time-dependent"`
}

func (o *AttributesRequest) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *AttributesRequest) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *AttributesRequest) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *AttributesRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *AttributesRequest) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *AttributesRequest) GetAdaptive() string {
	if o == nil {
		return ""
	}
	return o.Adaptive
}

func (o *AttributesRequest) GetTimeDependent() string {
	if o == nil {
		return ""
	}
	return o.TimeDependent
}

type QtiResponseDeclarationAttributesRequest struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *QtiResponseDeclarationAttributesRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *QtiResponseDeclarationAttributesRequest) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *QtiResponseDeclarationAttributesRequest) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type QtiCorrectResponseRequest struct {
	QtiValue []string `json:"qti-value"`
}

func (o *QtiCorrectResponseRequest) GetQtiValue() []string {
	if o == nil {
		return []string{}
	}
	return o.QtiValue
}

type QtiResponseDeclarationRequest struct {
	Attributes         QtiResponseDeclarationAttributesRequest `json:"_attributes"`
	QtiCorrectResponse QtiCorrectResponseRequest               `json:"qti-correct-response"`
}

func (o *QtiResponseDeclarationRequest) GetAttributes() QtiResponseDeclarationAttributesRequest {
	if o == nil {
		return QtiResponseDeclarationAttributesRequest{}
	}
	return o.Attributes
}

func (o *QtiResponseDeclarationRequest) GetQtiCorrectResponse() QtiCorrectResponseRequest {
	if o == nil {
		return QtiCorrectResponseRequest{}
	}
	return o.QtiCorrectResponse
}

type QtiOutcomeDeclarationAttributesRequest struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *QtiOutcomeDeclarationAttributesRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *QtiOutcomeDeclarationAttributesRequest) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *QtiOutcomeDeclarationAttributesRequest) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type UpdateAssessmentItemQtiOutcomeDeclarationRequest struct {
	Attributes QtiOutcomeDeclarationAttributesRequest `json:"_attributes"`
}

func (o *UpdateAssessmentItemQtiOutcomeDeclarationRequest) GetAttributes() QtiOutcomeDeclarationAttributesRequest {
	if o == nil {
		return QtiOutcomeDeclarationAttributesRequest{}
	}
	return o.Attributes
}

type QtiAssessmentStimulusRefAttributesRequest struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
	Title      string `json:"title"`
}

func (o *QtiAssessmentStimulusRefAttributesRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *QtiAssessmentStimulusRefAttributesRequest) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *QtiAssessmentStimulusRefAttributesRequest) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type QtiAssessmentStimulusRefRequest struct {
	Attributes QtiAssessmentStimulusRefAttributesRequest `json:"_attributes"`
}

func (o *QtiAssessmentStimulusRefRequest) GetAttributes() QtiAssessmentStimulusRefAttributesRequest {
	if o == nil {
		return QtiAssessmentStimulusRefAttributesRequest{}
	}
	return o.Attributes
}

type QtiAssessmentItemRequest struct {
	Attributes               AttributesRequest                                  `json:"_attributes"`
	QtiResponseDeclaration   []QtiResponseDeclarationRequest                    `json:"qti-response-declaration"`
	QtiOutcomeDeclaration    []UpdateAssessmentItemQtiOutcomeDeclarationRequest `json:"qti-outcome-declaration"`
	QtiAssessmentStimulusRef QtiAssessmentStimulusRefRequest                    `json:"qti-assessment-stimulus-ref"`
	QtiItemBody              any                                                `json:"qti-item-body,omitempty"`
	QtiResponseProcessing    any                                                `json:"qti-response-processing,omitempty"`
}

func (o *QtiAssessmentItemRequest) GetAttributes() AttributesRequest {
	if o == nil {
		return AttributesRequest{}
	}
	return o.Attributes
}

func (o *QtiAssessmentItemRequest) GetQtiResponseDeclaration() []QtiResponseDeclarationRequest {
	if o == nil {
		return []QtiResponseDeclarationRequest{}
	}
	return o.QtiResponseDeclaration
}

func (o *QtiAssessmentItemRequest) GetQtiOutcomeDeclaration() []UpdateAssessmentItemQtiOutcomeDeclarationRequest {
	if o == nil {
		return []UpdateAssessmentItemQtiOutcomeDeclarationRequest{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *QtiAssessmentItemRequest) GetQtiAssessmentStimulusRef() QtiAssessmentStimulusRefRequest {
	if o == nil {
		return QtiAssessmentStimulusRefRequest{}
	}
	return o.QtiAssessmentStimulusRef
}

func (o *QtiAssessmentItemRequest) GetQtiItemBody() any {
	if o == nil {
		return nil
	}
	return o.QtiItemBody
}

func (o *QtiAssessmentItemRequest) GetQtiResponseProcessing() any {
	if o == nil {
		return nil
	}
	return o.QtiResponseProcessing
}

// ContentRequest - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type ContentRequest struct {
	QtiAssessmentItem QtiAssessmentItemRequest `json:"qti-assessment-item"`
}

func (o *ContentRequest) GetQtiAssessmentItem() QtiAssessmentItemRequest {
	if o == nil {
		return QtiAssessmentItemRequest{}
	}
	return o.QtiAssessmentItem
}

// ModalFeedbackShowHideRequest - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type ModalFeedbackShowHideRequest string

const (
	ModalFeedbackShowHideRequestShow ModalFeedbackShowHideRequest = "show"
	ModalFeedbackShowHideRequestHide ModalFeedbackShowHideRequest = "hide"
)

func (e ModalFeedbackShowHideRequest) ToPointer() *ModalFeedbackShowHideRequest {
	return &e
}
func (e *ModalFeedbackShowHideRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = ModalFeedbackShowHideRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModalFeedbackShowHideRequest: %v", v)
	}
}

type ModalFeedbackRequest struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide ModalFeedbackShowHideRequest `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
	Title string `json:"title"`
}

func (o *ModalFeedbackRequest) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *ModalFeedbackRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *ModalFeedbackRequest) GetShowHide() ModalFeedbackShowHideRequest {
	if o == nil {
		return ModalFeedbackShowHideRequest("")
	}
	return o.ShowHide
}

func (o *ModalFeedbackRequest) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *ModalFeedbackRequest) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

// FeedbackInlineShowHideRequest - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type FeedbackInlineShowHideRequest string

const (
	FeedbackInlineShowHideRequestShow FeedbackInlineShowHideRequest = "show"
	FeedbackInlineShowHideRequestHide FeedbackInlineShowHideRequest = "hide"
)

func (e FeedbackInlineShowHideRequest) ToPointer() *FeedbackInlineShowHideRequest {
	return &e
}
func (e *FeedbackInlineShowHideRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = FeedbackInlineShowHideRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeedbackInlineShowHideRequest: %v", v)
	}
}

type FeedbackInlineRequest struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide FeedbackInlineShowHideRequest `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *FeedbackInlineRequest) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *FeedbackInlineRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *FeedbackInlineRequest) GetShowHide() FeedbackInlineShowHideRequest {
	if o == nil {
		return FeedbackInlineShowHideRequest("")
	}
	return o.ShowHide
}

func (o *FeedbackInlineRequest) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *FeedbackInlineRequest) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// FeedbackBlockShowHideRequest - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type FeedbackBlockShowHideRequest string

const (
	FeedbackBlockShowHideRequestShow FeedbackBlockShowHideRequest = "show"
	FeedbackBlockShowHideRequestHide FeedbackBlockShowHideRequest = "hide"
)

func (e FeedbackBlockShowHideRequest) ToPointer() *FeedbackBlockShowHideRequest {
	return &e
}
func (e *FeedbackBlockShowHideRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = FeedbackBlockShowHideRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeedbackBlockShowHideRequest: %v", v)
	}
}

type FeedbackBlockRequest struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide FeedbackBlockShowHideRequest `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *FeedbackBlockRequest) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *FeedbackBlockRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *FeedbackBlockRequest) GetShowHide() FeedbackBlockShowHideRequest {
	if o == nil {
		return FeedbackBlockShowHideRequest("")
	}
	return o.ShowHide
}

func (o *FeedbackBlockRequest) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *FeedbackBlockRequest) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// UpdateAssessmentItemRequestBody - The updated assessment item content, interactions, and configuration. Can be provided in either XML or JSON format.
type UpdateAssessmentItemRequestBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Assessment item interaction types that are supported by the service provider.
	Type TypeRequest `json:"type"`
	// QTI version of the assessment item
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
	TimeDependent *bool `default:"false" json:"timeDependent"`
	// Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
	Adaptive             *bool                        `default:"false" json:"adaptive"`
	ResponseDeclarations []ResponseDeclarationRequest `json:"responseDeclarations,omitempty"`
	OutcomeDeclarations  []OutcomeDeclarationRequest  `json:"outcomeDeclarations,omitempty"`
	// Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
	ResponseProcessing ResponseProcessingRequest `json:"responseProcessing"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content ContentRequest `json:"content"`
	// Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
	ModalFeedback []ModalFeedbackRequest `json:"modalFeedback,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackInline []FeedbackInlineRequest `json:"feedbackInline,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackBlock []FeedbackBlockRequest `json:"feedbackBlock,omitempty"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (u UpdateAssessmentItemRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentItemRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentItemRequestBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateAssessmentItemRequestBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemRequestBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentItemRequestBody) GetType() TypeRequest {
	if o == nil {
		return TypeRequest("")
	}
	return o.Type
}

func (o *UpdateAssessmentItemRequestBody) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *UpdateAssessmentItemRequestBody) GetTimeDependent() *bool {
	if o == nil {
		return nil
	}
	return o.TimeDependent
}

func (o *UpdateAssessmentItemRequestBody) GetAdaptive() *bool {
	if o == nil {
		return nil
	}
	return o.Adaptive
}

func (o *UpdateAssessmentItemRequestBody) GetResponseDeclarations() []ResponseDeclarationRequest {
	if o == nil {
		return nil
	}
	return o.ResponseDeclarations
}

func (o *UpdateAssessmentItemRequestBody) GetOutcomeDeclarations() []OutcomeDeclarationRequest {
	if o == nil {
		return nil
	}
	return o.OutcomeDeclarations
}

func (o *UpdateAssessmentItemRequestBody) GetResponseProcessing() ResponseProcessingRequest {
	if o == nil {
		return ResponseProcessingRequest{}
	}
	return o.ResponseProcessing
}

func (o *UpdateAssessmentItemRequestBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateAssessmentItemRequestBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *UpdateAssessmentItemRequestBody) GetContent() ContentRequest {
	if o == nil {
		return ContentRequest{}
	}
	return o.Content
}

func (o *UpdateAssessmentItemRequestBody) GetModalFeedback() []ModalFeedbackRequest {
	if o == nil {
		return nil
	}
	return o.ModalFeedback
}

func (o *UpdateAssessmentItemRequestBody) GetFeedbackInline() []FeedbackInlineRequest {
	if o == nil {
		return nil
	}
	return o.FeedbackInline
}

func (o *UpdateAssessmentItemRequestBody) GetFeedbackBlock() []FeedbackBlockRequest {
	if o == nil {
		return nil
	}
	return o.FeedbackBlock
}

func (o *UpdateAssessmentItemRequestBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdateAssessmentItemRequestBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *UpdateAssessmentItemRequestBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

type UpdateAssessmentItemRequest struct {
	// The unique identifier of the assessment item to update
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
	// The updated assessment item content, interactions, and configuration. Can be provided in either XML or JSON format.
	RequestBody UpdateAssessmentItemRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateAssessmentItemRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemRequest) GetRequestBody() UpdateAssessmentItemRequestBody {
	if o == nil {
		return UpdateAssessmentItemRequestBody{}
	}
	return o.RequestBody
}

// UpdateAssessmentItemTypeResponse - Assessment item interaction types that are supported by the service provider.
type UpdateAssessmentItemTypeResponse string

const (
	UpdateAssessmentItemTypeResponseChoice           UpdateAssessmentItemTypeResponse = "choice"
	UpdateAssessmentItemTypeResponseTextEntry        UpdateAssessmentItemTypeResponse = "text-entry"
	UpdateAssessmentItemTypeResponseExtendedText     UpdateAssessmentItemTypeResponse = "extended-text"
	UpdateAssessmentItemTypeResponseInlineChoice     UpdateAssessmentItemTypeResponse = "inline-choice"
	UpdateAssessmentItemTypeResponseMatch            UpdateAssessmentItemTypeResponse = "match"
	UpdateAssessmentItemTypeResponseOrder            UpdateAssessmentItemTypeResponse = "order"
	UpdateAssessmentItemTypeResponseAssociate        UpdateAssessmentItemTypeResponse = "associate"
	UpdateAssessmentItemTypeResponseSelectPoint      UpdateAssessmentItemTypeResponse = "select-point"
	UpdateAssessmentItemTypeResponseGraphicOrder     UpdateAssessmentItemTypeResponse = "graphic-order"
	UpdateAssessmentItemTypeResponseGraphicAssociate UpdateAssessmentItemTypeResponse = "graphic-associate"
	UpdateAssessmentItemTypeResponseGraphicGapMatch  UpdateAssessmentItemTypeResponse = "graphic-gap-match"
	UpdateAssessmentItemTypeResponseHotspot          UpdateAssessmentItemTypeResponse = "hotspot"
	UpdateAssessmentItemTypeResponseHottext          UpdateAssessmentItemTypeResponse = "hottext"
	UpdateAssessmentItemTypeResponseSlider           UpdateAssessmentItemTypeResponse = "slider"
	UpdateAssessmentItemTypeResponseDrawing          UpdateAssessmentItemTypeResponse = "drawing"
	UpdateAssessmentItemTypeResponseMedia            UpdateAssessmentItemTypeResponse = "media"
	UpdateAssessmentItemTypeResponseUpload           UpdateAssessmentItemTypeResponse = "upload"
)

func (e UpdateAssessmentItemTypeResponse) ToPointer() *UpdateAssessmentItemTypeResponse {
	return &e
}
func (e *UpdateAssessmentItemTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "choice":
		fallthrough
	case "text-entry":
		fallthrough
	case "extended-text":
		fallthrough
	case "inline-choice":
		fallthrough
	case "match":
		fallthrough
	case "order":
		fallthrough
	case "associate":
		fallthrough
	case "select-point":
		fallthrough
	case "graphic-order":
		fallthrough
	case "graphic-associate":
		fallthrough
	case "graphic-gap-match":
		fallthrough
	case "hotspot":
		fallthrough
	case "hottext":
		fallthrough
	case "slider":
		fallthrough
	case "drawing":
		fallthrough
	case "media":
		fallthrough
	case "upload":
		*e = UpdateAssessmentItemTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemTypeResponse: %v", v)
	}
}

// UpdateAssessmentItemResponseDeclarationCardinalityResponse - Specifies how many values the response variable can hold and whether order matters.
type UpdateAssessmentItemResponseDeclarationCardinalityResponse string

const (
	UpdateAssessmentItemResponseDeclarationCardinalityResponseSingle   UpdateAssessmentItemResponseDeclarationCardinalityResponse = "single"
	UpdateAssessmentItemResponseDeclarationCardinalityResponseMultiple UpdateAssessmentItemResponseDeclarationCardinalityResponse = "multiple"
	UpdateAssessmentItemResponseDeclarationCardinalityResponseOrdered  UpdateAssessmentItemResponseDeclarationCardinalityResponse = "ordered"
	UpdateAssessmentItemResponseDeclarationCardinalityResponseRecord   UpdateAssessmentItemResponseDeclarationCardinalityResponse = "record"
)

func (e UpdateAssessmentItemResponseDeclarationCardinalityResponse) ToPointer() *UpdateAssessmentItemResponseDeclarationCardinalityResponse {
	return &e
}
func (e *UpdateAssessmentItemResponseDeclarationCardinalityResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = UpdateAssessmentItemResponseDeclarationCardinalityResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemResponseDeclarationCardinalityResponse: %v", v)
	}
}

// UpdateAssessmentItemResponseDeclarationBaseTypeResponse - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type UpdateAssessmentItemResponseDeclarationBaseTypeResponse string

const (
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseIdentifier   UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "identifier"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseBoolean      UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "boolean"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseInteger      UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "integer"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseFloat        UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "float"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseString       UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "string"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponsePoint        UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "point"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponsePair         UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "pair"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseDirectedPair UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "directedPair"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseDuration     UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "duration"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseFile         UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "file"
	UpdateAssessmentItemResponseDeclarationBaseTypeResponseURI          UpdateAssessmentItemResponseDeclarationBaseTypeResponse = "uri"
)

func (e UpdateAssessmentItemResponseDeclarationBaseTypeResponse) ToPointer() *UpdateAssessmentItemResponseDeclarationBaseTypeResponse {
	return &e
}
func (e *UpdateAssessmentItemResponseDeclarationBaseTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = UpdateAssessmentItemResponseDeclarationBaseTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemResponseDeclarationBaseTypeResponse: %v", v)
	}
}

// UpdateAssessmentItemCorrectResponseResponse - Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
type UpdateAssessmentItemCorrectResponseResponse struct {
	Value []string `json:"value"`
}

func (o *UpdateAssessmentItemCorrectResponseResponse) GetValue() []string {
	if o == nil {
		return []string{}
	}
	return o.Value
}

type UpdateAssessmentItemResponseDeclarationResponse struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality UpdateAssessmentItemResponseDeclarationCardinalityResponse `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *UpdateAssessmentItemResponseDeclarationBaseTypeResponse `json:"baseType,omitempty"`
	// Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
	CorrectResponse UpdateAssessmentItemCorrectResponseResponse `json:"correctResponse"`
}

func (o *UpdateAssessmentItemResponseDeclarationResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemResponseDeclarationResponse) GetCardinality() UpdateAssessmentItemResponseDeclarationCardinalityResponse {
	if o == nil {
		return UpdateAssessmentItemResponseDeclarationCardinalityResponse("")
	}
	return o.Cardinality
}

func (o *UpdateAssessmentItemResponseDeclarationResponse) GetBaseType() *UpdateAssessmentItemResponseDeclarationBaseTypeResponse {
	if o == nil {
		return nil
	}
	return o.BaseType
}

func (o *UpdateAssessmentItemResponseDeclarationResponse) GetCorrectResponse() UpdateAssessmentItemCorrectResponseResponse {
	if o == nil {
		return UpdateAssessmentItemCorrectResponseResponse{}
	}
	return o.CorrectResponse
}

// UpdateAssessmentItemOutcomeDeclarationCardinalityResponse - Specifies how many values the response variable can hold and whether order matters.
type UpdateAssessmentItemOutcomeDeclarationCardinalityResponse string

const (
	UpdateAssessmentItemOutcomeDeclarationCardinalityResponseSingle   UpdateAssessmentItemOutcomeDeclarationCardinalityResponse = "single"
	UpdateAssessmentItemOutcomeDeclarationCardinalityResponseMultiple UpdateAssessmentItemOutcomeDeclarationCardinalityResponse = "multiple"
	UpdateAssessmentItemOutcomeDeclarationCardinalityResponseOrdered  UpdateAssessmentItemOutcomeDeclarationCardinalityResponse = "ordered"
	UpdateAssessmentItemOutcomeDeclarationCardinalityResponseRecord   UpdateAssessmentItemOutcomeDeclarationCardinalityResponse = "record"
)

func (e UpdateAssessmentItemOutcomeDeclarationCardinalityResponse) ToPointer() *UpdateAssessmentItemOutcomeDeclarationCardinalityResponse {
	return &e
}
func (e *UpdateAssessmentItemOutcomeDeclarationCardinalityResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = UpdateAssessmentItemOutcomeDeclarationCardinalityResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemOutcomeDeclarationCardinalityResponse: %v", v)
	}
}

// UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse string

const (
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseIdentifier   UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "identifier"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseBoolean      UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "boolean"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseInteger      UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "integer"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseFloat        UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "float"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseString       UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "string"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponsePoint        UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "point"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponsePair         UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "pair"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseDirectedPair UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "directedPair"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseDuration     UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "duration"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseFile         UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "file"
	UpdateAssessmentItemOutcomeDeclarationBaseTypeResponseURI          UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse = "uri"
)

func (e UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse) ToPointer() *UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse {
	return &e
}
func (e *UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse: %v", v)
	}
}

type UpdateAssessmentItemOutcomeDeclarationResponse struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality UpdateAssessmentItemOutcomeDeclarationCardinalityResponse `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse `json:"baseType,omitempty"`
}

func (o *UpdateAssessmentItemOutcomeDeclarationResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemOutcomeDeclarationResponse) GetCardinality() UpdateAssessmentItemOutcomeDeclarationCardinalityResponse {
	if o == nil {
		return UpdateAssessmentItemOutcomeDeclarationCardinalityResponse("")
	}
	return o.Cardinality
}

func (o *UpdateAssessmentItemOutcomeDeclarationResponse) GetBaseType() *UpdateAssessmentItemOutcomeDeclarationBaseTypeResponse {
	if o == nil {
		return nil
	}
	return o.BaseType
}

// UpdateAssessmentItemTemplateTypeResponse - Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
type UpdateAssessmentItemTemplateTypeResponse string

const (
	UpdateAssessmentItemTemplateTypeResponseMatchCorrect UpdateAssessmentItemTemplateTypeResponse = "match_correct"
	UpdateAssessmentItemTemplateTypeResponseMapResponse  UpdateAssessmentItemTemplateTypeResponse = "map_response"
)

func (e UpdateAssessmentItemTemplateTypeResponse) ToPointer() *UpdateAssessmentItemTemplateTypeResponse {
	return &e
}
func (e *UpdateAssessmentItemTemplateTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "match_correct":
		fallthrough
	case "map_response":
		*e = UpdateAssessmentItemTemplateTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemTemplateTypeResponse: %v", v)
	}
}

// UpdateAssessmentItemInlineFeedbackResponse - Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
type UpdateAssessmentItemInlineFeedbackResponse struct {
	// Identifier of the outcome variable to be set with the inline feedback value.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier of the variable whose value will be assigned to the outcome variable during response processing.
	VariableIdentifier string `json:"variableIdentifier"`
}

func (o *UpdateAssessmentItemInlineFeedbackResponse) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *UpdateAssessmentItemInlineFeedbackResponse) GetVariableIdentifier() string {
	if o == nil {
		return ""
	}
	return o.VariableIdentifier
}

// UpdateAssessmentItemResponseProcessingResponse - Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
type UpdateAssessmentItemResponseProcessingResponse struct {
	// Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
	TemplateType UpdateAssessmentItemTemplateTypeResponse `json:"templateType"`
	// Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
	ResponseDeclarationIdentifier string `json:"responseDeclarationIdentifier"`
	// Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
	CorrectResponseIdentifier string `json:"correctResponseIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
	IncorrectResponseIdentifier string `json:"incorrectResponseIdentifier"`
	// Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
	InlineFeedback *UpdateAssessmentItemInlineFeedbackResponse `json:"inlineFeedback,omitempty"`
}

func (o *UpdateAssessmentItemResponseProcessingResponse) GetTemplateType() UpdateAssessmentItemTemplateTypeResponse {
	if o == nil {
		return UpdateAssessmentItemTemplateTypeResponse("")
	}
	return o.TemplateType
}

func (o *UpdateAssessmentItemResponseProcessingResponse) GetResponseDeclarationIdentifier() string {
	if o == nil {
		return ""
	}
	return o.ResponseDeclarationIdentifier
}

func (o *UpdateAssessmentItemResponseProcessingResponse) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *UpdateAssessmentItemResponseProcessingResponse) GetCorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.CorrectResponseIdentifier
}

func (o *UpdateAssessmentItemResponseProcessingResponse) GetIncorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.IncorrectResponseIdentifier
}

func (o *UpdateAssessmentItemResponseProcessingResponse) GetInlineFeedback() *UpdateAssessmentItemInlineFeedbackResponse {
	if o == nil {
		return nil
	}
	return o.InlineFeedback
}

type UpdateAssessmentItemAttributesResponse struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	Adaptive          string `json:"adaptive"`
	TimeDependent     string `json:"time-dependent"`
}

func (o *UpdateAssessmentItemAttributesResponse) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *UpdateAssessmentItemAttributesResponse) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *UpdateAssessmentItemAttributesResponse) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *UpdateAssessmentItemAttributesResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemAttributesResponse) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentItemAttributesResponse) GetAdaptive() string {
	if o == nil {
		return ""
	}
	return o.Adaptive
}

func (o *UpdateAssessmentItemAttributesResponse) GetTimeDependent() string {
	if o == nil {
		return ""
	}
	return o.TimeDependent
}

type UpdateAssessmentItemQtiResponseDeclarationAttributesResponse struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *UpdateAssessmentItemQtiResponseDeclarationAttributesResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemQtiResponseDeclarationAttributesResponse) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *UpdateAssessmentItemQtiResponseDeclarationAttributesResponse) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type UpdateAssessmentItemQtiCorrectResponseResponse struct {
	QtiValue []string `json:"qti-value"`
}

func (o *UpdateAssessmentItemQtiCorrectResponseResponse) GetQtiValue() []string {
	if o == nil {
		return []string{}
	}
	return o.QtiValue
}

type UpdateAssessmentItemQtiResponseDeclarationResponse struct {
	Attributes         UpdateAssessmentItemQtiResponseDeclarationAttributesResponse `json:"_attributes"`
	QtiCorrectResponse UpdateAssessmentItemQtiCorrectResponseResponse               `json:"qti-correct-response"`
}

func (o *UpdateAssessmentItemQtiResponseDeclarationResponse) GetAttributes() UpdateAssessmentItemQtiResponseDeclarationAttributesResponse {
	if o == nil {
		return UpdateAssessmentItemQtiResponseDeclarationAttributesResponse{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentItemQtiResponseDeclarationResponse) GetQtiCorrectResponse() UpdateAssessmentItemQtiCorrectResponseResponse {
	if o == nil {
		return UpdateAssessmentItemQtiCorrectResponseResponse{}
	}
	return o.QtiCorrectResponse
}

type UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type UpdateAssessmentItemQtiOutcomeDeclarationResponse struct {
	Attributes UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse `json:"_attributes"`
}

func (o *UpdateAssessmentItemQtiOutcomeDeclarationResponse) GetAttributes() UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse {
	if o == nil {
		return UpdateAssessmentItemQtiOutcomeDeclarationAttributesResponse{}
	}
	return o.Attributes
}

type UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
	Title      string `json:"title"`
}

func (o *UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type UpdateAssessmentItemQtiAssessmentStimulusRefResponse struct {
	Attributes UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse `json:"_attributes"`
}

func (o *UpdateAssessmentItemQtiAssessmentStimulusRefResponse) GetAttributes() UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse {
	if o == nil {
		return UpdateAssessmentItemQtiAssessmentStimulusRefAttributesResponse{}
	}
	return o.Attributes
}

type UpdateAssessmentItemQtiAssessmentItemResponse struct {
	Attributes               UpdateAssessmentItemAttributesResponse               `json:"_attributes"`
	QtiResponseDeclaration   []UpdateAssessmentItemQtiResponseDeclarationResponse `json:"qti-response-declaration"`
	QtiOutcomeDeclaration    []UpdateAssessmentItemQtiOutcomeDeclarationResponse  `json:"qti-outcome-declaration"`
	QtiAssessmentStimulusRef UpdateAssessmentItemQtiAssessmentStimulusRefResponse `json:"qti-assessment-stimulus-ref"`
	QtiItemBody              any                                                  `json:"qti-item-body,omitempty"`
	QtiResponseProcessing    any                                                  `json:"qti-response-processing,omitempty"`
}

func (o *UpdateAssessmentItemQtiAssessmentItemResponse) GetAttributes() UpdateAssessmentItemAttributesResponse {
	if o == nil {
		return UpdateAssessmentItemAttributesResponse{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentItemQtiAssessmentItemResponse) GetQtiResponseDeclaration() []UpdateAssessmentItemQtiResponseDeclarationResponse {
	if o == nil {
		return []UpdateAssessmentItemQtiResponseDeclarationResponse{}
	}
	return o.QtiResponseDeclaration
}

func (o *UpdateAssessmentItemQtiAssessmentItemResponse) GetQtiOutcomeDeclaration() []UpdateAssessmentItemQtiOutcomeDeclarationResponse {
	if o == nil {
		return []UpdateAssessmentItemQtiOutcomeDeclarationResponse{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *UpdateAssessmentItemQtiAssessmentItemResponse) GetQtiAssessmentStimulusRef() UpdateAssessmentItemQtiAssessmentStimulusRefResponse {
	if o == nil {
		return UpdateAssessmentItemQtiAssessmentStimulusRefResponse{}
	}
	return o.QtiAssessmentStimulusRef
}

func (o *UpdateAssessmentItemQtiAssessmentItemResponse) GetQtiItemBody() any {
	if o == nil {
		return nil
	}
	return o.QtiItemBody
}

func (o *UpdateAssessmentItemQtiAssessmentItemResponse) GetQtiResponseProcessing() any {
	if o == nil {
		return nil
	}
	return o.QtiResponseProcessing
}

// UpdateAssessmentItemContentResponse - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type UpdateAssessmentItemContentResponse struct {
	QtiAssessmentItem UpdateAssessmentItemQtiAssessmentItemResponse `json:"qti-assessment-item"`
}

func (o *UpdateAssessmentItemContentResponse) GetQtiAssessmentItem() UpdateAssessmentItemQtiAssessmentItemResponse {
	if o == nil {
		return UpdateAssessmentItemQtiAssessmentItemResponse{}
	}
	return o.QtiAssessmentItem
}

// UpdateAssessmentItemModalFeedbackShowHideResponse - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type UpdateAssessmentItemModalFeedbackShowHideResponse string

const (
	UpdateAssessmentItemModalFeedbackShowHideResponseShow UpdateAssessmentItemModalFeedbackShowHideResponse = "show"
	UpdateAssessmentItemModalFeedbackShowHideResponseHide UpdateAssessmentItemModalFeedbackShowHideResponse = "hide"
)

func (e UpdateAssessmentItemModalFeedbackShowHideResponse) ToPointer() *UpdateAssessmentItemModalFeedbackShowHideResponse {
	return &e
}
func (e *UpdateAssessmentItemModalFeedbackShowHideResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = UpdateAssessmentItemModalFeedbackShowHideResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemModalFeedbackShowHideResponse: %v", v)
	}
}

type UpdateAssessmentItemModalFeedbackResponse struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide UpdateAssessmentItemModalFeedbackShowHideResponse `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
	Title string `json:"title"`
}

func (o *UpdateAssessmentItemModalFeedbackResponse) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *UpdateAssessmentItemModalFeedbackResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemModalFeedbackResponse) GetShowHide() UpdateAssessmentItemModalFeedbackShowHideResponse {
	if o == nil {
		return UpdateAssessmentItemModalFeedbackShowHideResponse("")
	}
	return o.ShowHide
}

func (o *UpdateAssessmentItemModalFeedbackResponse) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *UpdateAssessmentItemModalFeedbackResponse) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

// UpdateAssessmentItemFeedbackInlineShowHideResponse - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type UpdateAssessmentItemFeedbackInlineShowHideResponse string

const (
	UpdateAssessmentItemFeedbackInlineShowHideResponseShow UpdateAssessmentItemFeedbackInlineShowHideResponse = "show"
	UpdateAssessmentItemFeedbackInlineShowHideResponseHide UpdateAssessmentItemFeedbackInlineShowHideResponse = "hide"
)

func (e UpdateAssessmentItemFeedbackInlineShowHideResponse) ToPointer() *UpdateAssessmentItemFeedbackInlineShowHideResponse {
	return &e
}
func (e *UpdateAssessmentItemFeedbackInlineShowHideResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = UpdateAssessmentItemFeedbackInlineShowHideResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemFeedbackInlineShowHideResponse: %v", v)
	}
}

type UpdateAssessmentItemFeedbackInlineResponse struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide UpdateAssessmentItemFeedbackInlineShowHideResponse `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *UpdateAssessmentItemFeedbackInlineResponse) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *UpdateAssessmentItemFeedbackInlineResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemFeedbackInlineResponse) GetShowHide() UpdateAssessmentItemFeedbackInlineShowHideResponse {
	if o == nil {
		return UpdateAssessmentItemFeedbackInlineShowHideResponse("")
	}
	return o.ShowHide
}

func (o *UpdateAssessmentItemFeedbackInlineResponse) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *UpdateAssessmentItemFeedbackInlineResponse) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// UpdateAssessmentItemFeedbackBlockShowHideResponse - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type UpdateAssessmentItemFeedbackBlockShowHideResponse string

const (
	UpdateAssessmentItemFeedbackBlockShowHideResponseShow UpdateAssessmentItemFeedbackBlockShowHideResponse = "show"
	UpdateAssessmentItemFeedbackBlockShowHideResponseHide UpdateAssessmentItemFeedbackBlockShowHideResponse = "hide"
)

func (e UpdateAssessmentItemFeedbackBlockShowHideResponse) ToPointer() *UpdateAssessmentItemFeedbackBlockShowHideResponse {
	return &e
}
func (e *UpdateAssessmentItemFeedbackBlockShowHideResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = UpdateAssessmentItemFeedbackBlockShowHideResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentItemFeedbackBlockShowHideResponse: %v", v)
	}
}

type UpdateAssessmentItemFeedbackBlockResponse struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide UpdateAssessmentItemFeedbackBlockShowHideResponse `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *UpdateAssessmentItemFeedbackBlockResponse) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *UpdateAssessmentItemFeedbackBlockResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemFeedbackBlockResponse) GetShowHide() UpdateAssessmentItemFeedbackBlockShowHideResponse {
	if o == nil {
		return UpdateAssessmentItemFeedbackBlockShowHideResponse("")
	}
	return o.ShowHide
}

func (o *UpdateAssessmentItemFeedbackBlockResponse) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *UpdateAssessmentItemFeedbackBlockResponse) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// UpdateAssessmentItemResponseBody - Assessment item updated successfully
type UpdateAssessmentItemResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Assessment item interaction types that are supported by the service provider.
	Type UpdateAssessmentItemTypeResponse `json:"type"`
	// QTI version of the assessment item
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
	TimeDependent *bool `default:"false" json:"timeDependent"`
	// Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
	Adaptive             *bool                                             `default:"false" json:"adaptive"`
	ResponseDeclarations []UpdateAssessmentItemResponseDeclarationResponse `json:"responseDeclarations,omitempty"`
	OutcomeDeclarations  []UpdateAssessmentItemOutcomeDeclarationResponse  `json:"outcomeDeclarations,omitempty"`
	// Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
	ResponseProcessing UpdateAssessmentItemResponseProcessingResponse `json:"responseProcessing"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content UpdateAssessmentItemContentResponse `json:"content"`
	// Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
	ModalFeedback []UpdateAssessmentItemModalFeedbackResponse `json:"modalFeedback,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackInline []UpdateAssessmentItemFeedbackInlineResponse `json:"feedbackInline,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackBlock []UpdateAssessmentItemFeedbackBlockResponse `json:"feedbackBlock,omitempty"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (u UpdateAssessmentItemResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentItemResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentItemResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateAssessmentItemResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentItemResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentItemResponseBody) GetType() UpdateAssessmentItemTypeResponse {
	if o == nil {
		return UpdateAssessmentItemTypeResponse("")
	}
	return o.Type
}

func (o *UpdateAssessmentItemResponseBody) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *UpdateAssessmentItemResponseBody) GetTimeDependent() *bool {
	if o == nil {
		return nil
	}
	return o.TimeDependent
}

func (o *UpdateAssessmentItemResponseBody) GetAdaptive() *bool {
	if o == nil {
		return nil
	}
	return o.Adaptive
}

func (o *UpdateAssessmentItemResponseBody) GetResponseDeclarations() []UpdateAssessmentItemResponseDeclarationResponse {
	if o == nil {
		return nil
	}
	return o.ResponseDeclarations
}

func (o *UpdateAssessmentItemResponseBody) GetOutcomeDeclarations() []UpdateAssessmentItemOutcomeDeclarationResponse {
	if o == nil {
		return nil
	}
	return o.OutcomeDeclarations
}

func (o *UpdateAssessmentItemResponseBody) GetResponseProcessing() UpdateAssessmentItemResponseProcessingResponse {
	if o == nil {
		return UpdateAssessmentItemResponseProcessingResponse{}
	}
	return o.ResponseProcessing
}

func (o *UpdateAssessmentItemResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateAssessmentItemResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *UpdateAssessmentItemResponseBody) GetContent() UpdateAssessmentItemContentResponse {
	if o == nil {
		return UpdateAssessmentItemContentResponse{}
	}
	return o.Content
}

func (o *UpdateAssessmentItemResponseBody) GetModalFeedback() []UpdateAssessmentItemModalFeedbackResponse {
	if o == nil {
		return nil
	}
	return o.ModalFeedback
}

func (o *UpdateAssessmentItemResponseBody) GetFeedbackInline() []UpdateAssessmentItemFeedbackInlineResponse {
	if o == nil {
		return nil
	}
	return o.FeedbackInline
}

func (o *UpdateAssessmentItemResponseBody) GetFeedbackBlock() []UpdateAssessmentItemFeedbackBlockResponse {
	if o == nil {
		return nil
	}
	return o.FeedbackBlock
}

func (o *UpdateAssessmentItemResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdateAssessmentItemResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *UpdateAssessmentItemResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

type UpdateAssessmentItemResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Assessment item updated successfully
	Object *UpdateAssessmentItemResponseBody
}

func (o *UpdateAssessmentItemResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateAssessmentItemResponse) GetObject() *UpdateAssessmentItemResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
