// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type CreateTestPartRequest struct {
	// The unique identifier of the parent assessment test where the test part will be created
	AssessmentTestIdentifier string `pathParam:"style=simple,explode=false,name=assessmentTestIdentifier"`
	// The test part to create
	TestPart components.TestPart `request:"mediaType=application/json"`
}

func (o *CreateTestPartRequest) GetAssessmentTestIdentifier() string {
	if o == nil {
		return ""
	}
	return o.AssessmentTestIdentifier
}

func (o *CreateTestPartRequest) GetTestPart() components.TestPart {
	if o == nil {
		return components.TestPart{}
	}
	return o.TestPart
}

// CreateTestPartNavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type CreateTestPartNavigationMode string

const (
	CreateTestPartNavigationModeLinear    CreateTestPartNavigationMode = "linear"
	CreateTestPartNavigationModeNonlinear CreateTestPartNavigationMode = "nonlinear"
)

func (e CreateTestPartNavigationMode) ToPointer() *CreateTestPartNavigationMode {
	return &e
}
func (e *CreateTestPartNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = CreateTestPartNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTestPartNavigationMode: %v", v)
	}
}

// CreateTestPartSubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type CreateTestPartSubmissionMode string

const (
	CreateTestPartSubmissionModeIndividual   CreateTestPartSubmissionMode = "individual"
	CreateTestPartSubmissionModeSimultaneous CreateTestPartSubmissionMode = "simultaneous"
)

func (e CreateTestPartSubmissionMode) ToPointer() *CreateTestPartSubmissionMode {
	return &e
}
func (e *CreateTestPartSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = CreateTestPartSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTestPartSubmissionMode: %v", v)
	}
}

type CreateTestPartAttributes struct {
	Identifier     string `json:"identifier"`
	NavigationMode string `json:"navigation-mode"`
	SubmissionMode string `json:"submission-mode"`
}

func (o *CreateTestPartAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateTestPartAttributes) GetNavigationMode() string {
	if o == nil {
		return ""
	}
	return o.NavigationMode
}

func (o *CreateTestPartAttributes) GetSubmissionMode() string {
	if o == nil {
		return ""
	}
	return o.SubmissionMode
}

type CreateTestPartQtiAssessmentSectionAttributes struct {
	Identifier string `json:"identifier"`
	Title      string `json:"title"`
	Visible    string `json:"visible"`
	Required   string `json:"required"`
	Fixed      string `json:"fixed"`
}

func (o *CreateTestPartQtiAssessmentSectionAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateTestPartQtiAssessmentSectionAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *CreateTestPartQtiAssessmentSectionAttributes) GetVisible() string {
	if o == nil {
		return ""
	}
	return o.Visible
}

func (o *CreateTestPartQtiAssessmentSectionAttributes) GetRequired() string {
	if o == nil {
		return ""
	}
	return o.Required
}

func (o *CreateTestPartQtiAssessmentSectionAttributes) GetFixed() string {
	if o == nil {
		return ""
	}
	return o.Fixed
}

type CreateTestPartQtiAssessmentItemRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
}

func (o *CreateTestPartQtiAssessmentItemRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateTestPartQtiAssessmentItemRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

type CreateTestPartQtiAssessmentItemRef struct {
	Attributes CreateTestPartQtiAssessmentItemRefAttributes `json:"_attributes"`
}

func (o *CreateTestPartQtiAssessmentItemRef) GetAttributes() CreateTestPartQtiAssessmentItemRefAttributes {
	if o == nil {
		return CreateTestPartQtiAssessmentItemRefAttributes{}
	}
	return o.Attributes
}

type CreateTestPartQtiAssessmentSection struct {
	Attributes           CreateTestPartQtiAssessmentSectionAttributes `json:"_attributes"`
	QtiAssessmentItemRef []CreateTestPartQtiAssessmentItemRef         `json:"qti-assessment-item-ref,omitempty"`
}

func (o *CreateTestPartQtiAssessmentSection) GetAttributes() CreateTestPartQtiAssessmentSectionAttributes {
	if o == nil {
		return CreateTestPartQtiAssessmentSectionAttributes{}
	}
	return o.Attributes
}

func (o *CreateTestPartQtiAssessmentSection) GetQtiAssessmentItemRef() []CreateTestPartQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

type CreateTestPartQtiTestPart struct {
	Attributes           CreateTestPartAttributes             `json:"_attributes"`
	QtiAssessmentSection []CreateTestPartQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *CreateTestPartQtiTestPart) GetAttributes() CreateTestPartAttributes {
	if o == nil {
		return CreateTestPartAttributes{}
	}
	return o.Attributes
}

func (o *CreateTestPartQtiTestPart) GetQtiAssessmentSection() []CreateTestPartQtiAssessmentSection {
	if o == nil {
		return []CreateTestPartQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

type CreateTestPartContent struct {
	QtiTestPart CreateTestPartQtiTestPart `json:"qti-test-part"`
}

func (o *CreateTestPartContent) GetQtiTestPart() CreateTestPartQtiTestPart {
	if o == nil {
		return CreateTestPartQtiTestPart{}
	}
	return o.QtiTestPart
}

// CreateTestPartResponseBody - Response data returned after successfully creating a new test part. Includes the generated XML and parsed content structure.
type CreateTestPartResponseBody struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode CreateTestPartNavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       CreateTestPartSubmissionMode `json:"submissionMode"`
	QtiAssessmentSection []components.Section         `json:"qti-assessment-section"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML  string                `json:"rawXml"`
	Content CreateTestPartContent `json:"content"`
}

func (o *CreateTestPartResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateTestPartResponseBody) GetNavigationMode() CreateTestPartNavigationMode {
	if o == nil {
		return CreateTestPartNavigationMode("")
	}
	return o.NavigationMode
}

func (o *CreateTestPartResponseBody) GetSubmissionMode() CreateTestPartSubmissionMode {
	if o == nil {
		return CreateTestPartSubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *CreateTestPartResponseBody) GetQtiAssessmentSection() []components.Section {
	if o == nil {
		return []components.Section{}
	}
	return o.QtiAssessmentSection
}

func (o *CreateTestPartResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *CreateTestPartResponseBody) GetContent() CreateTestPartContent {
	if o == nil {
		return CreateTestPartContent{}
	}
	return o.Content
}

type CreateTestPartResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Test part created successfully
	Object *CreateTestPartResponseBody
}

func (o *CreateTestPartResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateTestPartResponse) GetObject() *CreateTestPartResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
