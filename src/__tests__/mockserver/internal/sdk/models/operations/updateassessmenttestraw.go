// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"io"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type UpdateAssessmentTestRawRequest struct {
	// Assessment test identifier to update
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
	// The assessment test to update
	RequestBody io.Reader `request:"mediaType=application/xml"`
}

func (o *UpdateAssessmentTestRawRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawRequest) GetRequestBody() io.Reader {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateAssessmentTestRawNavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type UpdateAssessmentTestRawNavigationMode string

const (
	UpdateAssessmentTestRawNavigationModeLinear    UpdateAssessmentTestRawNavigationMode = "linear"
	UpdateAssessmentTestRawNavigationModeNonlinear UpdateAssessmentTestRawNavigationMode = "nonlinear"
)

func (e UpdateAssessmentTestRawNavigationMode) ToPointer() *UpdateAssessmentTestRawNavigationMode {
	return &e
}
func (e *UpdateAssessmentTestRawNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = UpdateAssessmentTestRawNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestRawNavigationMode: %v", v)
	}
}

// UpdateAssessmentTestRawSubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type UpdateAssessmentTestRawSubmissionMode string

const (
	UpdateAssessmentTestRawSubmissionModeIndividual   UpdateAssessmentTestRawSubmissionMode = "individual"
	UpdateAssessmentTestRawSubmissionModeSimultaneous UpdateAssessmentTestRawSubmissionMode = "simultaneous"
)

func (e UpdateAssessmentTestRawSubmissionMode) ToPointer() *UpdateAssessmentTestRawSubmissionMode {
	return &e
}
func (e *UpdateAssessmentTestRawSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = UpdateAssessmentTestRawSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestRawSubmissionMode: %v", v)
	}
}

// UpdateAssessmentTestRawQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type UpdateAssessmentTestRawQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// UpdateAssessmentTestRawQtiAssessmentSection - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type UpdateAssessmentTestRawQtiAssessmentSection struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []UpdateAssessmentTestRawQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (u UpdateAssessmentTestRawQtiAssessmentSection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentTestRawQtiAssessmentSection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *UpdateAssessmentTestRawQtiAssessmentSection) GetQtiAssessmentItemRef() []UpdateAssessmentTestRawQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

// UpdateAssessmentTestRawQtiTestPartResponse - Complete test part data returned from the service provider. Contains all sections and their configuration.
type UpdateAssessmentTestRawQtiTestPartResponse struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode UpdateAssessmentTestRawNavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       UpdateAssessmentTestRawSubmissionMode         `json:"submissionMode"`
	QtiAssessmentSection []UpdateAssessmentTestRawQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *UpdateAssessmentTestRawQtiTestPartResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiTestPartResponse) GetNavigationMode() UpdateAssessmentTestRawNavigationMode {
	if o == nil {
		return UpdateAssessmentTestRawNavigationMode("")
	}
	return o.NavigationMode
}

func (o *UpdateAssessmentTestRawQtiTestPartResponse) GetSubmissionMode() UpdateAssessmentTestRawSubmissionMode {
	if o == nil {
		return UpdateAssessmentTestRawSubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *UpdateAssessmentTestRawQtiTestPartResponse) GetQtiAssessmentSection() []UpdateAssessmentTestRawQtiAssessmentSection {
	if o == nil {
		return []UpdateAssessmentTestRawQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

// UpdateAssessmentTestRawCardinality - Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
type UpdateAssessmentTestRawCardinality string

const (
	UpdateAssessmentTestRawCardinalitySingle   UpdateAssessmentTestRawCardinality = "single"
	UpdateAssessmentTestRawCardinalityMultiple UpdateAssessmentTestRawCardinality = "multiple"
	UpdateAssessmentTestRawCardinalityOrdered  UpdateAssessmentTestRawCardinality = "ordered"
	UpdateAssessmentTestRawCardinalityRecord   UpdateAssessmentTestRawCardinality = "record"
)

func (e UpdateAssessmentTestRawCardinality) ToPointer() *UpdateAssessmentTestRawCardinality {
	return &e
}
func (e *UpdateAssessmentTestRawCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = UpdateAssessmentTestRawCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestRawCardinality: %v", v)
	}
}

// UpdateAssessmentTestRawBaseType - Data type of the outcome variable, determining how values are stored and processed
type UpdateAssessmentTestRawBaseType string

const (
	UpdateAssessmentTestRawBaseTypeIdentifier   UpdateAssessmentTestRawBaseType = "identifier"
	UpdateAssessmentTestRawBaseTypeBoolean      UpdateAssessmentTestRawBaseType = "boolean"
	UpdateAssessmentTestRawBaseTypeInteger      UpdateAssessmentTestRawBaseType = "integer"
	UpdateAssessmentTestRawBaseTypeFloat        UpdateAssessmentTestRawBaseType = "float"
	UpdateAssessmentTestRawBaseTypeString       UpdateAssessmentTestRawBaseType = "string"
	UpdateAssessmentTestRawBaseTypePoint        UpdateAssessmentTestRawBaseType = "point"
	UpdateAssessmentTestRawBaseTypePair         UpdateAssessmentTestRawBaseType = "pair"
	UpdateAssessmentTestRawBaseTypeDirectedPair UpdateAssessmentTestRawBaseType = "directedPair"
	UpdateAssessmentTestRawBaseTypeDuration     UpdateAssessmentTestRawBaseType = "duration"
	UpdateAssessmentTestRawBaseTypeFile         UpdateAssessmentTestRawBaseType = "file"
	UpdateAssessmentTestRawBaseTypeURI          UpdateAssessmentTestRawBaseType = "uri"
)

func (e UpdateAssessmentTestRawBaseType) ToPointer() *UpdateAssessmentTestRawBaseType {
	return &e
}
func (e *UpdateAssessmentTestRawBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = UpdateAssessmentTestRawBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestRawBaseType: %v", v)
	}
}

// UpdateAssessmentTestRawDefaultValue - Optional default value configuration for outcome variables
type UpdateAssessmentTestRawDefaultValue struct {
	// The default value to assign to the outcome variable
	Value any `json:"value,omitempty"`
}

func (o *UpdateAssessmentTestRawDefaultValue) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateAssessmentTestRawQtiOutcomeDeclarationResponse struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
	Cardinality *UpdateAssessmentTestRawCardinality `default:"single" json:"cardinality"`
	// Data type of the outcome variable, determining how values are stored and processed
	BaseType UpdateAssessmentTestRawBaseType `json:"baseType"`
	// Expected maximum value for this outcome variable in normal circumstances
	NormalMaximum *float64 `json:"normalMaximum,omitempty"`
	// Expected minimum value for this outcome variable in normal circumstances
	NormalMinimum *float64 `json:"normalMinimum,omitempty"`
	// Optional default value configuration for outcome variables
	DefaultValue *UpdateAssessmentTestRawDefaultValue `json:"defaultValue,omitempty"`
}

func (u UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) GetCardinality() *UpdateAssessmentTestRawCardinality {
	if o == nil {
		return nil
	}
	return o.Cardinality
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) GetBaseType() UpdateAssessmentTestRawBaseType {
	if o == nil {
		return UpdateAssessmentTestRawBaseType("")
	}
	return o.BaseType
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationResponse) GetDefaultValue() *UpdateAssessmentTestRawDefaultValue {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type UpdateAssessmentTestRawAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	ToolName          string `json:"tool-name"`
	ToolVersion       string `json:"tool-version"`
}

func (o *UpdateAssessmentTestRawAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *UpdateAssessmentTestRawAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *UpdateAssessmentTestRawAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *UpdateAssessmentTestRawAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestRawAttributes) GetToolName() string {
	if o == nil {
		return ""
	}
	return o.ToolName
}

func (o *UpdateAssessmentTestRawAttributes) GetToolVersion() string {
	if o == nil {
		return ""
	}
	return o.ToolVersion
}

type UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"base-type"`
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type UpdateAssessmentTestRawQtiDefaultValue struct {
	QtiValue any `json:"qti-value,omitempty"`
}

func (o *UpdateAssessmentTestRawQtiDefaultValue) GetQtiValue() any {
	if o == nil {
		return nil
	}
	return o.QtiValue
}

type UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration struct {
	Attributes      UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes `json:"_attributes"`
	QtiDefaultValue *UpdateAssessmentTestRawQtiDefaultValue                `json:"qti-default-value,omitempty"`
	NormalMaximum   *float64                                               `json:"normal-maximum,omitempty"`
	NormalMinimum   *float64                                               `json:"normal-minimum,omitempty"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration) GetAttributes() UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes {
	if o == nil {
		return UpdateAssessmentTestRawQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration) GetQtiDefaultValue() *UpdateAssessmentTestRawQtiDefaultValue {
	if o == nil {
		return nil
	}
	return o.QtiDefaultValue
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

type UpdateAssessmentTestRawQtiTestPartAttributes struct {
	Identifier     string `json:"identifier"`
	NavigationMode string `json:"navigation-mode"`
	SubmissionMode string `json:"submission-mode"`
}

func (o *UpdateAssessmentTestRawQtiTestPartAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiTestPartAttributes) GetNavigationMode() string {
	if o == nil {
		return ""
	}
	return o.NavigationMode
}

func (o *UpdateAssessmentTestRawQtiTestPartAttributes) GetSubmissionMode() string {
	if o == nil {
		return ""
	}
	return o.SubmissionMode
}

type UpdateAssessmentTestRawQtiAssessmentSectionAttributes struct {
	Identifier string `json:"identifier"`
	Title      string `json:"title"`
	Visible    string `json:"visible"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentSectionAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiAssessmentSectionAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestRawQtiAssessmentSectionAttributes) GetVisible() string {
	if o == nil {
		return ""
	}
	return o.Visible
}

type UpdateAssessmentTestRawQtiAssessmentItemRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentItemRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawQtiAssessmentItemRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

type UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef struct {
	Attributes UpdateAssessmentTestRawQtiAssessmentItemRefAttributes `json:"_attributes"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef) GetAttributes() UpdateAssessmentTestRawQtiAssessmentItemRefAttributes {
	if o == nil {
		return UpdateAssessmentTestRawQtiAssessmentItemRefAttributes{}
	}
	return o.Attributes
}

type UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection struct {
	Attributes           UpdateAssessmentTestRawQtiAssessmentSectionAttributes          `json:"_attributes"`
	QtiAssessmentItemRef []UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection) GetAttributes() UpdateAssessmentTestRawQtiAssessmentSectionAttributes {
	if o == nil {
		return UpdateAssessmentTestRawQtiAssessmentSectionAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection) GetQtiAssessmentItemRef() []UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

type UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart struct {
	Attributes           UpdateAssessmentTestRawQtiTestPartAttributes                   `json:"_attributes"`
	QtiAssessmentSection []UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart) GetAttributes() UpdateAssessmentTestRawQtiTestPartAttributes {
	if o == nil {
		return UpdateAssessmentTestRawQtiTestPartAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart) GetQtiAssessmentSection() []UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection {
	if o == nil {
		return []UpdateAssessmentTestRawQtiAssessmentTestQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

type UpdateAssessmentTestRawQtiAssessmentTest struct {
	Attributes            UpdateAssessmentTestRawAttributes                               `json:"_attributes"`
	QtiOutcomeDeclaration []UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration `json:"qti-outcome-declaration"`
	QtiTestPart           []UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart           `json:"qti-test-part"`
}

func (o *UpdateAssessmentTestRawQtiAssessmentTest) GetAttributes() UpdateAssessmentTestRawAttributes {
	if o == nil {
		return UpdateAssessmentTestRawAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestRawQtiAssessmentTest) GetQtiOutcomeDeclaration() []UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration {
	if o == nil {
		return []UpdateAssessmentTestRawQtiAssessmentTestQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *UpdateAssessmentTestRawQtiAssessmentTest) GetQtiTestPart() []UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart {
	if o == nil {
		return []UpdateAssessmentTestRawQtiAssessmentTestQtiTestPart{}
	}
	return o.QtiTestPart
}

// UpdateAssessmentTestRawContent - Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
type UpdateAssessmentTestRawContent struct {
	QtiAssessmentTest UpdateAssessmentTestRawQtiAssessmentTest `json:"qti-assessment-test"`
}

func (o *UpdateAssessmentTestRawContent) GetQtiAssessmentTest() UpdateAssessmentTestRawQtiAssessmentTest {
	if o == nil {
		return UpdateAssessmentTestRawQtiAssessmentTest{}
	}
	return o.QtiAssessmentTest
}

// UpdateAssessmentTestRawResponseBody - Complete assessment test data including all test parts, sections, items, and configuration settings
type UpdateAssessmentTestRawResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Version of the specification used for this assessment test
	QtiVersion  *string                                      `default:"3.0" json:"qtiVersion"`
	QtiTestPart []UpdateAssessmentTestRawQtiTestPartResponse `json:"qti-test-part"`
	// Array of outcome variable declarations for storing assessment results and computed values
	QtiOutcomeDeclaration []UpdateAssessmentTestRawQtiOutcomeDeclarationResponse `json:"qti-outcome-declaration"`
	// Time limit for the entire assessment test in seconds. When not specified, there is no time limit
	TimeLimit *float64 `json:"timeLimit,omitempty"`
	// Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
	MaxAttempts *float64 `json:"maxAttempts,omitempty"`
	// Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
	ToolsEnabled map[string]bool `json:"toolsEnabled,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
	Content UpdateAssessmentTestRawContent `json:"content"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
	// Indicates whether the generated XML is valid according to schema validation
	IsValidXML bool `json:"isValidXml"`
}

func (u UpdateAssessmentTestRawResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentTestRawResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentTestRawResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateAssessmentTestRawResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRawResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestRawResponseBody) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *UpdateAssessmentTestRawResponseBody) GetQtiTestPart() []UpdateAssessmentTestRawQtiTestPartResponse {
	if o == nil {
		return []UpdateAssessmentTestRawQtiTestPartResponse{}
	}
	return o.QtiTestPart
}

func (o *UpdateAssessmentTestRawResponseBody) GetQtiOutcomeDeclaration() []UpdateAssessmentTestRawQtiOutcomeDeclarationResponse {
	if o == nil {
		return []UpdateAssessmentTestRawQtiOutcomeDeclarationResponse{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *UpdateAssessmentTestRawResponseBody) GetTimeLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeLimit
}

func (o *UpdateAssessmentTestRawResponseBody) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *UpdateAssessmentTestRawResponseBody) GetToolsEnabled() map[string]bool {
	if o == nil {
		return nil
	}
	return o.ToolsEnabled
}

func (o *UpdateAssessmentTestRawResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateAssessmentTestRawResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *UpdateAssessmentTestRawResponseBody) GetContent() UpdateAssessmentTestRawContent {
	if o == nil {
		return UpdateAssessmentTestRawContent{}
	}
	return o.Content
}

func (o *UpdateAssessmentTestRawResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdateAssessmentTestRawResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *UpdateAssessmentTestRawResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

func (o *UpdateAssessmentTestRawResponseBody) GetIsValidXML() bool {
	if o == nil {
		return false
	}
	return o.IsValidXML
}

type UpdateAssessmentTestRawResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Assessment test updated successfully
	Object *UpdateAssessmentTestRawResponseBody
}

func (o *UpdateAssessmentTestRawResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateAssessmentTestRawResponse) GetObject() *UpdateAssessmentTestRawResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
