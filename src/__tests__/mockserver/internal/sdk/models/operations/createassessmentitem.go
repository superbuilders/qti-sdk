// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// CreateAssessmentItemType - Assessment item interaction types that are supported by the service provider.
type CreateAssessmentItemType string

const (
	CreateAssessmentItemTypeChoice           CreateAssessmentItemType = "choice"
	CreateAssessmentItemTypeTextEntry        CreateAssessmentItemType = "text-entry"
	CreateAssessmentItemTypeExtendedText     CreateAssessmentItemType = "extended-text"
	CreateAssessmentItemTypeInlineChoice     CreateAssessmentItemType = "inline-choice"
	CreateAssessmentItemTypeMatch            CreateAssessmentItemType = "match"
	CreateAssessmentItemTypeOrder            CreateAssessmentItemType = "order"
	CreateAssessmentItemTypeAssociate        CreateAssessmentItemType = "associate"
	CreateAssessmentItemTypeSelectPoint      CreateAssessmentItemType = "select-point"
	CreateAssessmentItemTypeGraphicOrder     CreateAssessmentItemType = "graphic-order"
	CreateAssessmentItemTypeGraphicAssociate CreateAssessmentItemType = "graphic-associate"
	CreateAssessmentItemTypeGraphicGapMatch  CreateAssessmentItemType = "graphic-gap-match"
	CreateAssessmentItemTypeHotspot          CreateAssessmentItemType = "hotspot"
	CreateAssessmentItemTypeHottext          CreateAssessmentItemType = "hottext"
	CreateAssessmentItemTypeSlider           CreateAssessmentItemType = "slider"
	CreateAssessmentItemTypeDrawing          CreateAssessmentItemType = "drawing"
	CreateAssessmentItemTypeMedia            CreateAssessmentItemType = "media"
	CreateAssessmentItemTypeUpload           CreateAssessmentItemType = "upload"
)

func (e CreateAssessmentItemType) ToPointer() *CreateAssessmentItemType {
	return &e
}
func (e *CreateAssessmentItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "choice":
		fallthrough
	case "text-entry":
		fallthrough
	case "extended-text":
		fallthrough
	case "inline-choice":
		fallthrough
	case "match":
		fallthrough
	case "order":
		fallthrough
	case "associate":
		fallthrough
	case "select-point":
		fallthrough
	case "graphic-order":
		fallthrough
	case "graphic-associate":
		fallthrough
	case "graphic-gap-match":
		fallthrough
	case "hotspot":
		fallthrough
	case "hottext":
		fallthrough
	case "slider":
		fallthrough
	case "drawing":
		fallthrough
	case "media":
		fallthrough
	case "upload":
		*e = CreateAssessmentItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemType: %v", v)
	}
}

// CreateAssessmentItemResponseDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type CreateAssessmentItemResponseDeclarationCardinality string

const (
	CreateAssessmentItemResponseDeclarationCardinalitySingle   CreateAssessmentItemResponseDeclarationCardinality = "single"
	CreateAssessmentItemResponseDeclarationCardinalityMultiple CreateAssessmentItemResponseDeclarationCardinality = "multiple"
	CreateAssessmentItemResponseDeclarationCardinalityOrdered  CreateAssessmentItemResponseDeclarationCardinality = "ordered"
	CreateAssessmentItemResponseDeclarationCardinalityRecord   CreateAssessmentItemResponseDeclarationCardinality = "record"
)

func (e CreateAssessmentItemResponseDeclarationCardinality) ToPointer() *CreateAssessmentItemResponseDeclarationCardinality {
	return &e
}
func (e *CreateAssessmentItemResponseDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = CreateAssessmentItemResponseDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemResponseDeclarationCardinality: %v", v)
	}
}

// CreateAssessmentItemResponseDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type CreateAssessmentItemResponseDeclarationBaseType string

const (
	CreateAssessmentItemResponseDeclarationBaseTypeIdentifier   CreateAssessmentItemResponseDeclarationBaseType = "identifier"
	CreateAssessmentItemResponseDeclarationBaseTypeBoolean      CreateAssessmentItemResponseDeclarationBaseType = "boolean"
	CreateAssessmentItemResponseDeclarationBaseTypeInteger      CreateAssessmentItemResponseDeclarationBaseType = "integer"
	CreateAssessmentItemResponseDeclarationBaseTypeFloat        CreateAssessmentItemResponseDeclarationBaseType = "float"
	CreateAssessmentItemResponseDeclarationBaseTypeString       CreateAssessmentItemResponseDeclarationBaseType = "string"
	CreateAssessmentItemResponseDeclarationBaseTypePoint        CreateAssessmentItemResponseDeclarationBaseType = "point"
	CreateAssessmentItemResponseDeclarationBaseTypePair         CreateAssessmentItemResponseDeclarationBaseType = "pair"
	CreateAssessmentItemResponseDeclarationBaseTypeDirectedPair CreateAssessmentItemResponseDeclarationBaseType = "directedPair"
	CreateAssessmentItemResponseDeclarationBaseTypeDuration     CreateAssessmentItemResponseDeclarationBaseType = "duration"
	CreateAssessmentItemResponseDeclarationBaseTypeFile         CreateAssessmentItemResponseDeclarationBaseType = "file"
	CreateAssessmentItemResponseDeclarationBaseTypeURI          CreateAssessmentItemResponseDeclarationBaseType = "uri"
)

func (e CreateAssessmentItemResponseDeclarationBaseType) ToPointer() *CreateAssessmentItemResponseDeclarationBaseType {
	return &e
}
func (e *CreateAssessmentItemResponseDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = CreateAssessmentItemResponseDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemResponseDeclarationBaseType: %v", v)
	}
}

// CreateAssessmentItemCorrectResponse - Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
type CreateAssessmentItemCorrectResponse struct {
	Value []string `json:"value"`
}

func (o *CreateAssessmentItemCorrectResponse) GetValue() []string {
	if o == nil {
		return []string{}
	}
	return o.Value
}

type CreateAssessmentItemResponseDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality CreateAssessmentItemResponseDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *CreateAssessmentItemResponseDeclarationBaseType `json:"baseType,omitempty"`
	// Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
	CorrectResponse CreateAssessmentItemCorrectResponse `json:"correctResponse"`
}

func (o *CreateAssessmentItemResponseDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemResponseDeclaration) GetCardinality() CreateAssessmentItemResponseDeclarationCardinality {
	if o == nil {
		return CreateAssessmentItemResponseDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *CreateAssessmentItemResponseDeclaration) GetBaseType() *CreateAssessmentItemResponseDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

func (o *CreateAssessmentItemResponseDeclaration) GetCorrectResponse() CreateAssessmentItemCorrectResponse {
	if o == nil {
		return CreateAssessmentItemCorrectResponse{}
	}
	return o.CorrectResponse
}

// CreateAssessmentItemOutcomeDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type CreateAssessmentItemOutcomeDeclarationCardinality string

const (
	CreateAssessmentItemOutcomeDeclarationCardinalitySingle   CreateAssessmentItemOutcomeDeclarationCardinality = "single"
	CreateAssessmentItemOutcomeDeclarationCardinalityMultiple CreateAssessmentItemOutcomeDeclarationCardinality = "multiple"
	CreateAssessmentItemOutcomeDeclarationCardinalityOrdered  CreateAssessmentItemOutcomeDeclarationCardinality = "ordered"
	CreateAssessmentItemOutcomeDeclarationCardinalityRecord   CreateAssessmentItemOutcomeDeclarationCardinality = "record"
)

func (e CreateAssessmentItemOutcomeDeclarationCardinality) ToPointer() *CreateAssessmentItemOutcomeDeclarationCardinality {
	return &e
}
func (e *CreateAssessmentItemOutcomeDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = CreateAssessmentItemOutcomeDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemOutcomeDeclarationCardinality: %v", v)
	}
}

// CreateAssessmentItemOutcomeDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type CreateAssessmentItemOutcomeDeclarationBaseType string

const (
	CreateAssessmentItemOutcomeDeclarationBaseTypeIdentifier   CreateAssessmentItemOutcomeDeclarationBaseType = "identifier"
	CreateAssessmentItemOutcomeDeclarationBaseTypeBoolean      CreateAssessmentItemOutcomeDeclarationBaseType = "boolean"
	CreateAssessmentItemOutcomeDeclarationBaseTypeInteger      CreateAssessmentItemOutcomeDeclarationBaseType = "integer"
	CreateAssessmentItemOutcomeDeclarationBaseTypeFloat        CreateAssessmentItemOutcomeDeclarationBaseType = "float"
	CreateAssessmentItemOutcomeDeclarationBaseTypeString       CreateAssessmentItemOutcomeDeclarationBaseType = "string"
	CreateAssessmentItemOutcomeDeclarationBaseTypePoint        CreateAssessmentItemOutcomeDeclarationBaseType = "point"
	CreateAssessmentItemOutcomeDeclarationBaseTypePair         CreateAssessmentItemOutcomeDeclarationBaseType = "pair"
	CreateAssessmentItemOutcomeDeclarationBaseTypeDirectedPair CreateAssessmentItemOutcomeDeclarationBaseType = "directedPair"
	CreateAssessmentItemOutcomeDeclarationBaseTypeDuration     CreateAssessmentItemOutcomeDeclarationBaseType = "duration"
	CreateAssessmentItemOutcomeDeclarationBaseTypeFile         CreateAssessmentItemOutcomeDeclarationBaseType = "file"
	CreateAssessmentItemOutcomeDeclarationBaseTypeURI          CreateAssessmentItemOutcomeDeclarationBaseType = "uri"
)

func (e CreateAssessmentItemOutcomeDeclarationBaseType) ToPointer() *CreateAssessmentItemOutcomeDeclarationBaseType {
	return &e
}
func (e *CreateAssessmentItemOutcomeDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = CreateAssessmentItemOutcomeDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemOutcomeDeclarationBaseType: %v", v)
	}
}

type CreateAssessmentItemOutcomeDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality CreateAssessmentItemOutcomeDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *CreateAssessmentItemOutcomeDeclarationBaseType `json:"baseType,omitempty"`
}

func (o *CreateAssessmentItemOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemOutcomeDeclaration) GetCardinality() CreateAssessmentItemOutcomeDeclarationCardinality {
	if o == nil {
		return CreateAssessmentItemOutcomeDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *CreateAssessmentItemOutcomeDeclaration) GetBaseType() *CreateAssessmentItemOutcomeDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

// CreateAssessmentItemTemplateType - Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
type CreateAssessmentItemTemplateType string

const (
	CreateAssessmentItemTemplateTypeMatchCorrect CreateAssessmentItemTemplateType = "match_correct"
	CreateAssessmentItemTemplateTypeMapResponse  CreateAssessmentItemTemplateType = "map_response"
)

func (e CreateAssessmentItemTemplateType) ToPointer() *CreateAssessmentItemTemplateType {
	return &e
}
func (e *CreateAssessmentItemTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "match_correct":
		fallthrough
	case "map_response":
		*e = CreateAssessmentItemTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemTemplateType: %v", v)
	}
}

// CreateAssessmentItemInlineFeedback - Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
type CreateAssessmentItemInlineFeedback struct {
	// Identifier of the outcome variable to be set with the inline feedback value.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier of the variable whose value will be assigned to the outcome variable during response processing.
	VariableIdentifier string `json:"variableIdentifier"`
}

func (o *CreateAssessmentItemInlineFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *CreateAssessmentItemInlineFeedback) GetVariableIdentifier() string {
	if o == nil {
		return ""
	}
	return o.VariableIdentifier
}

// CreateAssessmentItemResponseProcessing - Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
type CreateAssessmentItemResponseProcessing struct {
	// Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
	TemplateType CreateAssessmentItemTemplateType `json:"templateType"`
	// Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
	ResponseDeclarationIdentifier string `json:"responseDeclarationIdentifier"`
	// Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
	CorrectResponseIdentifier string `json:"correctResponseIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
	IncorrectResponseIdentifier string `json:"incorrectResponseIdentifier"`
	// Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
	InlineFeedback *CreateAssessmentItemInlineFeedback `json:"inlineFeedback,omitempty"`
}

func (o *CreateAssessmentItemResponseProcessing) GetTemplateType() CreateAssessmentItemTemplateType {
	if o == nil {
		return CreateAssessmentItemTemplateType("")
	}
	return o.TemplateType
}

func (o *CreateAssessmentItemResponseProcessing) GetResponseDeclarationIdentifier() string {
	if o == nil {
		return ""
	}
	return o.ResponseDeclarationIdentifier
}

func (o *CreateAssessmentItemResponseProcessing) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *CreateAssessmentItemResponseProcessing) GetCorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.CorrectResponseIdentifier
}

func (o *CreateAssessmentItemResponseProcessing) GetIncorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.IncorrectResponseIdentifier
}

func (o *CreateAssessmentItemResponseProcessing) GetInlineFeedback() *CreateAssessmentItemInlineFeedback {
	if o == nil {
		return nil
	}
	return o.InlineFeedback
}

type CreateAssessmentItemAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	Adaptive          string `json:"adaptive"`
	TimeDependent     string `json:"time-dependent"`
}

func (o *CreateAssessmentItemAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *CreateAssessmentItemAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *CreateAssessmentItemAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *CreateAssessmentItemAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *CreateAssessmentItemAttributes) GetAdaptive() string {
	if o == nil {
		return ""
	}
	return o.Adaptive
}

func (o *CreateAssessmentItemAttributes) GetTimeDependent() string {
	if o == nil {
		return ""
	}
	return o.TimeDependent
}

type CreateAssessmentItemQtiResponseDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *CreateAssessmentItemQtiResponseDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemQtiResponseDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *CreateAssessmentItemQtiResponseDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type CreateAssessmentItemQtiCorrectResponse struct {
	QtiValue []string `json:"qti-value"`
}

func (o *CreateAssessmentItemQtiCorrectResponse) GetQtiValue() []string {
	if o == nil {
		return []string{}
	}
	return o.QtiValue
}

type CreateAssessmentItemQtiResponseDeclaration struct {
	Attributes         CreateAssessmentItemQtiResponseDeclarationAttributes `json:"_attributes"`
	QtiCorrectResponse CreateAssessmentItemQtiCorrectResponse               `json:"qti-correct-response"`
}

func (o *CreateAssessmentItemQtiResponseDeclaration) GetAttributes() CreateAssessmentItemQtiResponseDeclarationAttributes {
	if o == nil {
		return CreateAssessmentItemQtiResponseDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *CreateAssessmentItemQtiResponseDeclaration) GetQtiCorrectResponse() CreateAssessmentItemQtiCorrectResponse {
	if o == nil {
		return CreateAssessmentItemQtiCorrectResponse{}
	}
	return o.QtiCorrectResponse
}

type CreateAssessmentItemQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"baseType"`
}

func (o *CreateAssessmentItemQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *CreateAssessmentItemQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type CreateAssessmentItemQtiOutcomeDeclaration struct {
	Attributes CreateAssessmentItemQtiOutcomeDeclarationAttributes `json:"_attributes"`
}

func (o *CreateAssessmentItemQtiOutcomeDeclaration) GetAttributes() CreateAssessmentItemQtiOutcomeDeclarationAttributes {
	if o == nil {
		return CreateAssessmentItemQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

type CreateAssessmentItemQtiAssessmentStimulusRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
	Title      string `json:"title"`
}

func (o *CreateAssessmentItemQtiAssessmentStimulusRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemQtiAssessmentStimulusRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateAssessmentItemQtiAssessmentStimulusRefAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type CreateAssessmentItemQtiAssessmentStimulusRef struct {
	Attributes CreateAssessmentItemQtiAssessmentStimulusRefAttributes `json:"_attributes"`
}

func (o *CreateAssessmentItemQtiAssessmentStimulusRef) GetAttributes() CreateAssessmentItemQtiAssessmentStimulusRefAttributes {
	if o == nil {
		return CreateAssessmentItemQtiAssessmentStimulusRefAttributes{}
	}
	return o.Attributes
}

type CreateAssessmentItemQtiAssessmentItem struct {
	Attributes               CreateAssessmentItemAttributes               `json:"_attributes"`
	QtiResponseDeclaration   []CreateAssessmentItemQtiResponseDeclaration `json:"qti-response-declaration"`
	QtiOutcomeDeclaration    []CreateAssessmentItemQtiOutcomeDeclaration  `json:"qti-outcome-declaration"`
	QtiAssessmentStimulusRef CreateAssessmentItemQtiAssessmentStimulusRef `json:"qti-assessment-stimulus-ref"`
	QtiItemBody              any                                          `json:"qti-item-body,omitempty"`
	QtiResponseProcessing    any                                          `json:"qti-response-processing,omitempty"`
}

func (o *CreateAssessmentItemQtiAssessmentItem) GetAttributes() CreateAssessmentItemAttributes {
	if o == nil {
		return CreateAssessmentItemAttributes{}
	}
	return o.Attributes
}

func (o *CreateAssessmentItemQtiAssessmentItem) GetQtiResponseDeclaration() []CreateAssessmentItemQtiResponseDeclaration {
	if o == nil {
		return []CreateAssessmentItemQtiResponseDeclaration{}
	}
	return o.QtiResponseDeclaration
}

func (o *CreateAssessmentItemQtiAssessmentItem) GetQtiOutcomeDeclaration() []CreateAssessmentItemQtiOutcomeDeclaration {
	if o == nil {
		return []CreateAssessmentItemQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *CreateAssessmentItemQtiAssessmentItem) GetQtiAssessmentStimulusRef() CreateAssessmentItemQtiAssessmentStimulusRef {
	if o == nil {
		return CreateAssessmentItemQtiAssessmentStimulusRef{}
	}
	return o.QtiAssessmentStimulusRef
}

func (o *CreateAssessmentItemQtiAssessmentItem) GetQtiItemBody() any {
	if o == nil {
		return nil
	}
	return o.QtiItemBody
}

func (o *CreateAssessmentItemQtiAssessmentItem) GetQtiResponseProcessing() any {
	if o == nil {
		return nil
	}
	return o.QtiResponseProcessing
}

// CreateAssessmentItemContent - Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
type CreateAssessmentItemContent struct {
	QtiAssessmentItem CreateAssessmentItemQtiAssessmentItem `json:"qti-assessment-item"`
}

func (o *CreateAssessmentItemContent) GetQtiAssessmentItem() CreateAssessmentItemQtiAssessmentItem {
	if o == nil {
		return CreateAssessmentItemQtiAssessmentItem{}
	}
	return o.QtiAssessmentItem
}

// CreateAssessmentItemModalFeedbackShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type CreateAssessmentItemModalFeedbackShowHide string

const (
	CreateAssessmentItemModalFeedbackShowHideShow CreateAssessmentItemModalFeedbackShowHide = "show"
	CreateAssessmentItemModalFeedbackShowHideHide CreateAssessmentItemModalFeedbackShowHide = "hide"
)

func (e CreateAssessmentItemModalFeedbackShowHide) ToPointer() *CreateAssessmentItemModalFeedbackShowHide {
	return &e
}
func (e *CreateAssessmentItemModalFeedbackShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = CreateAssessmentItemModalFeedbackShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemModalFeedbackShowHide: %v", v)
	}
}

type CreateAssessmentItemModalFeedback struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide CreateAssessmentItemModalFeedbackShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
	Title string `json:"title"`
}

func (o *CreateAssessmentItemModalFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *CreateAssessmentItemModalFeedback) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemModalFeedback) GetShowHide() CreateAssessmentItemModalFeedbackShowHide {
	if o == nil {
		return CreateAssessmentItemModalFeedbackShowHide("")
	}
	return o.ShowHide
}

func (o *CreateAssessmentItemModalFeedback) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *CreateAssessmentItemModalFeedback) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

// CreateAssessmentItemFeedbackInlineShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type CreateAssessmentItemFeedbackInlineShowHide string

const (
	CreateAssessmentItemFeedbackInlineShowHideShow CreateAssessmentItemFeedbackInlineShowHide = "show"
	CreateAssessmentItemFeedbackInlineShowHideHide CreateAssessmentItemFeedbackInlineShowHide = "hide"
)

func (e CreateAssessmentItemFeedbackInlineShowHide) ToPointer() *CreateAssessmentItemFeedbackInlineShowHide {
	return &e
}
func (e *CreateAssessmentItemFeedbackInlineShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = CreateAssessmentItemFeedbackInlineShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemFeedbackInlineShowHide: %v", v)
	}
}

type CreateAssessmentItemFeedbackInline struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide CreateAssessmentItemFeedbackInlineShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *CreateAssessmentItemFeedbackInline) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *CreateAssessmentItemFeedbackInline) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemFeedbackInline) GetShowHide() CreateAssessmentItemFeedbackInlineShowHide {
	if o == nil {
		return CreateAssessmentItemFeedbackInlineShowHide("")
	}
	return o.ShowHide
}

func (o *CreateAssessmentItemFeedbackInline) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *CreateAssessmentItemFeedbackInline) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// CreateAssessmentItemFeedbackBlockShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type CreateAssessmentItemFeedbackBlockShowHide string

const (
	CreateAssessmentItemFeedbackBlockShowHideShow CreateAssessmentItemFeedbackBlockShowHide = "show"
	CreateAssessmentItemFeedbackBlockShowHideHide CreateAssessmentItemFeedbackBlockShowHide = "hide"
)

func (e CreateAssessmentItemFeedbackBlockShowHide) ToPointer() *CreateAssessmentItemFeedbackBlockShowHide {
	return &e
}
func (e *CreateAssessmentItemFeedbackBlockShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = CreateAssessmentItemFeedbackBlockShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAssessmentItemFeedbackBlockShowHide: %v", v)
	}
}

type CreateAssessmentItemFeedbackBlock struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide CreateAssessmentItemFeedbackBlockShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *CreateAssessmentItemFeedbackBlock) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *CreateAssessmentItemFeedbackBlock) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemFeedbackBlock) GetShowHide() CreateAssessmentItemFeedbackBlockShowHide {
	if o == nil {
		return CreateAssessmentItemFeedbackBlockShowHide("")
	}
	return o.ShowHide
}

func (o *CreateAssessmentItemFeedbackBlock) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *CreateAssessmentItemFeedbackBlock) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// CreateAssessmentItemResponseBody - Assessment item created successfully
type CreateAssessmentItemResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Assessment item interaction types that are supported by the service provider.
	Type CreateAssessmentItemType `json:"type"`
	// QTI version of the assessment item
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
	TimeDependent *bool `default:"false" json:"timeDependent"`
	// Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
	Adaptive             *bool                                     `default:"false" json:"adaptive"`
	ResponseDeclarations []CreateAssessmentItemResponseDeclaration `json:"responseDeclarations,omitempty"`
	OutcomeDeclarations  []CreateAssessmentItemOutcomeDeclaration  `json:"outcomeDeclarations,omitempty"`
	// Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
	ResponseProcessing CreateAssessmentItemResponseProcessing `json:"responseProcessing"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content generated by the service provider. For production use, rawXml is recommended over this parsed structure.
	Content CreateAssessmentItemContent `json:"content"`
	// Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
	ModalFeedback []CreateAssessmentItemModalFeedback `json:"modalFeedback,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackInline []CreateAssessmentItemFeedbackInline `json:"feedbackInline,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackBlock []CreateAssessmentItemFeedbackBlock `json:"feedbackBlock,omitempty"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
}

func (c CreateAssessmentItemResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAssessmentItemResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAssessmentItemResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateAssessmentItemResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *CreateAssessmentItemResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *CreateAssessmentItemResponseBody) GetType() CreateAssessmentItemType {
	if o == nil {
		return CreateAssessmentItemType("")
	}
	return o.Type
}

func (o *CreateAssessmentItemResponseBody) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *CreateAssessmentItemResponseBody) GetTimeDependent() *bool {
	if o == nil {
		return nil
	}
	return o.TimeDependent
}

func (o *CreateAssessmentItemResponseBody) GetAdaptive() *bool {
	if o == nil {
		return nil
	}
	return o.Adaptive
}

func (o *CreateAssessmentItemResponseBody) GetResponseDeclarations() []CreateAssessmentItemResponseDeclaration {
	if o == nil {
		return nil
	}
	return o.ResponseDeclarations
}

func (o *CreateAssessmentItemResponseBody) GetOutcomeDeclarations() []CreateAssessmentItemOutcomeDeclaration {
	if o == nil {
		return nil
	}
	return o.OutcomeDeclarations
}

func (o *CreateAssessmentItemResponseBody) GetResponseProcessing() CreateAssessmentItemResponseProcessing {
	if o == nil {
		return CreateAssessmentItemResponseProcessing{}
	}
	return o.ResponseProcessing
}

func (o *CreateAssessmentItemResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateAssessmentItemResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *CreateAssessmentItemResponseBody) GetContent() CreateAssessmentItemContent {
	if o == nil {
		return CreateAssessmentItemContent{}
	}
	return o.Content
}

func (o *CreateAssessmentItemResponseBody) GetModalFeedback() []CreateAssessmentItemModalFeedback {
	if o == nil {
		return nil
	}
	return o.ModalFeedback
}

func (o *CreateAssessmentItemResponseBody) GetFeedbackInline() []CreateAssessmentItemFeedbackInline {
	if o == nil {
		return nil
	}
	return o.FeedbackInline
}

func (o *CreateAssessmentItemResponseBody) GetFeedbackBlock() []CreateAssessmentItemFeedbackBlock {
	if o == nil {
		return nil
	}
	return o.FeedbackBlock
}

func (o *CreateAssessmentItemResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateAssessmentItemResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *CreateAssessmentItemResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

type CreateAssessmentItemResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Assessment item created successfully
	Object *CreateAssessmentItemResponseBody
}

func (o *CreateAssessmentItemResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateAssessmentItemResponse) GetObject() *CreateAssessmentItemResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
