// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// SearchSectionsSort - Field to sort by
type SearchSectionsSort string

const (
	SearchSectionsSortTitle      SearchSectionsSort = "title"
	SearchSectionsSortIdentifier SearchSectionsSort = "identifier"
	SearchSectionsSortCreatedAt  SearchSectionsSort = "createdAt"
	SearchSectionsSortUpdatedAt  SearchSectionsSort = "updatedAt"
)

func (e SearchSectionsSort) ToPointer() *SearchSectionsSort {
	return &e
}
func (e *SearchSectionsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "identifier":
		fallthrough
	case "createdAt":
		fallthrough
	case "updatedAt":
		*e = SearchSectionsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchSectionsSort: %v", v)
	}
}

// SearchSectionsQueryParamOrder - Sort order
type SearchSectionsQueryParamOrder string

const (
	SearchSectionsQueryParamOrderAsc  SearchSectionsQueryParamOrder = "asc"
	SearchSectionsQueryParamOrderDesc SearchSectionsQueryParamOrder = "desc"
)

func (e SearchSectionsQueryParamOrder) ToPointer() *SearchSectionsQueryParamOrder {
	return &e
}
func (e *SearchSectionsQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchSectionsQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchSectionsQueryParamOrder: %v", v)
	}
}

type SearchSectionsRequest struct {
	// Root assessment test identifier
	AssessmentTestIdentifier string `pathParam:"style=simple,explode=false,name=assessmentTestIdentifier"`
	// Parent test part identifier
	TestPartIdentifier string `pathParam:"style=simple,explode=false,name=testPartIdentifier"`
	// Search title and identifier fields using a search term. This is a fuzzy search.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Page number for pagination
	Page *string `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Number of items per page
	Limit *string `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Field to sort by
	Sort *SearchSectionsSort `queryParam:"style=form,explode=true,name=sort"`
	// Sort order
	Order *SearchSectionsQueryParamOrder `default:"desc" queryParam:"style=form,explode=true,name=order"`
}

func (s SearchSectionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchSectionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchSectionsRequest) GetAssessmentTestIdentifier() string {
	if o == nil {
		return ""
	}
	return o.AssessmentTestIdentifier
}

func (o *SearchSectionsRequest) GetTestPartIdentifier() string {
	if o == nil {
		return ""
	}
	return o.TestPartIdentifier
}

func (o *SearchSectionsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SearchSectionsRequest) GetPage() *string {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchSectionsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchSectionsRequest) GetSort() *SearchSectionsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *SearchSectionsRequest) GetOrder() *SearchSectionsQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

// SearchSectionsQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type SearchSectionsQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *SearchSectionsQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchSectionsQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// SearchSectionsItem - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type SearchSectionsItem struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []SearchSectionsQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (s SearchSectionsItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchSectionsItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchSectionsItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchSectionsItem) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SearchSectionsItem) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *SearchSectionsItem) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *SearchSectionsItem) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *SearchSectionsItem) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *SearchSectionsItem) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *SearchSectionsItem) GetQtiAssessmentItemRef() []SearchSectionsQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

// SearchSectionsOrderResponse - The order to sort the entities by. Either 'asc' or 'desc'.
type SearchSectionsOrderResponse string

const (
	SearchSectionsOrderResponseAsc  SearchSectionsOrderResponse = "asc"
	SearchSectionsOrderResponseDesc SearchSectionsOrderResponse = "desc"
)

func (e SearchSectionsOrderResponse) ToPointer() *SearchSectionsOrderResponse {
	return &e
}
func (e *SearchSectionsOrderResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchSectionsOrderResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchSectionsOrderResponse: %v", v)
	}
}

// SearchSectionsResponseBody - Paginated response containing all assessment sections that exist in the specified test part on the service provider, including complete section data and navigation metadata.
type SearchSectionsResponseBody struct {
	// Array of assessment sections belonging to the specified test part, each containing complete section data and item references.
	Items []SearchSectionsItem `json:"items"`
	// The total number of entities that match the search criteria.
	Total float64 `json:"total"`
	// The page number of the entities that match the search criteria.
	Page *float64 `default:"1" json:"page"`
	// The total number of pages of entities that match the search criteria.
	Pages float64 `json:"pages"`
	// The number of entities per page.
	Limit *float64 `default:"10" json:"limit"`
	// The field to sort the entities by.
	Sort string `json:"sort"`
	// The order to sort the entities by. Either 'asc' or 'desc'.
	Order SearchSectionsOrderResponse `json:"order"`
}

func (s SearchSectionsResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchSectionsResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchSectionsResponseBody) GetItems() []SearchSectionsItem {
	if o == nil {
		return []SearchSectionsItem{}
	}
	return o.Items
}

func (o *SearchSectionsResponseBody) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *SearchSectionsResponseBody) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SearchSectionsResponseBody) GetPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.Pages
}

func (o *SearchSectionsResponseBody) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchSectionsResponseBody) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *SearchSectionsResponseBody) GetOrder() SearchSectionsOrderResponse {
	if o == nil {
		return SearchSectionsOrderResponse("")
	}
	return o.Order
}

type SearchSectionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfully retrieved sections
	Object *SearchSectionsResponseBody
}

func (o *SearchSectionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SearchSectionsResponse) GetObject() *SearchSectionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
