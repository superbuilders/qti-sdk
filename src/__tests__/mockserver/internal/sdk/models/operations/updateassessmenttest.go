// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type UpdateAssessmentTestRequest struct {
	// Assessment test identifier to update
	Identifier string `pathParam:"style=simple,explode=false,name=identifier"`
	// The assessment test to update
	AssessmentTest components.AssessmentTest `request:"mediaType=application/json"`
}

func (o *UpdateAssessmentTestRequest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestRequest) GetAssessmentTest() components.AssessmentTest {
	if o == nil {
		return components.AssessmentTest{}
	}
	return o.AssessmentTest
}

// UpdateAssessmentTestNavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type UpdateAssessmentTestNavigationMode string

const (
	UpdateAssessmentTestNavigationModeLinear    UpdateAssessmentTestNavigationMode = "linear"
	UpdateAssessmentTestNavigationModeNonlinear UpdateAssessmentTestNavigationMode = "nonlinear"
)

func (e UpdateAssessmentTestNavigationMode) ToPointer() *UpdateAssessmentTestNavigationMode {
	return &e
}
func (e *UpdateAssessmentTestNavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = UpdateAssessmentTestNavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestNavigationMode: %v", v)
	}
}

// UpdateAssessmentTestSubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type UpdateAssessmentTestSubmissionMode string

const (
	UpdateAssessmentTestSubmissionModeIndividual   UpdateAssessmentTestSubmissionMode = "individual"
	UpdateAssessmentTestSubmissionModeSimultaneous UpdateAssessmentTestSubmissionMode = "simultaneous"
)

func (e UpdateAssessmentTestSubmissionMode) ToPointer() *UpdateAssessmentTestSubmissionMode {
	return &e
}
func (e *UpdateAssessmentTestSubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = UpdateAssessmentTestSubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestSubmissionMode: %v", v)
	}
}

// UpdateAssessmentTestQtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type UpdateAssessmentTestQtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *UpdateAssessmentTestQtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// UpdateAssessmentTestQtiAssessmentSection - Complete assessment section data with all referenced items. Represents a section containing learning content within a test part.
type UpdateAssessmentTestQtiAssessmentSection struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []UpdateAssessmentTestQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (u UpdateAssessmentTestQtiAssessmentSection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentTestQtiAssessmentSection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *UpdateAssessmentTestQtiAssessmentSection) GetQtiAssessmentItemRef() []UpdateAssessmentTestQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

// UpdateAssessmentTestQtiTestPart - Complete test part data returned from the service provider. Contains all sections and their configuration.
type UpdateAssessmentTestQtiTestPart struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode UpdateAssessmentTestNavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       UpdateAssessmentTestSubmissionMode         `json:"submissionMode"`
	QtiAssessmentSection []UpdateAssessmentTestQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *UpdateAssessmentTestQtiTestPart) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiTestPart) GetNavigationMode() UpdateAssessmentTestNavigationMode {
	if o == nil {
		return UpdateAssessmentTestNavigationMode("")
	}
	return o.NavigationMode
}

func (o *UpdateAssessmentTestQtiTestPart) GetSubmissionMode() UpdateAssessmentTestSubmissionMode {
	if o == nil {
		return UpdateAssessmentTestSubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *UpdateAssessmentTestQtiTestPart) GetQtiAssessmentSection() []UpdateAssessmentTestQtiAssessmentSection {
	if o == nil {
		return []UpdateAssessmentTestQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

// UpdateAssessmentTestCardinality - Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
type UpdateAssessmentTestCardinality string

const (
	UpdateAssessmentTestCardinalitySingle   UpdateAssessmentTestCardinality = "single"
	UpdateAssessmentTestCardinalityMultiple UpdateAssessmentTestCardinality = "multiple"
	UpdateAssessmentTestCardinalityOrdered  UpdateAssessmentTestCardinality = "ordered"
	UpdateAssessmentTestCardinalityRecord   UpdateAssessmentTestCardinality = "record"
)

func (e UpdateAssessmentTestCardinality) ToPointer() *UpdateAssessmentTestCardinality {
	return &e
}
func (e *UpdateAssessmentTestCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = UpdateAssessmentTestCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestCardinality: %v", v)
	}
}

// UpdateAssessmentTestBaseType - Data type of the outcome variable, determining how values are stored and processed
type UpdateAssessmentTestBaseType string

const (
	UpdateAssessmentTestBaseTypeIdentifier   UpdateAssessmentTestBaseType = "identifier"
	UpdateAssessmentTestBaseTypeBoolean      UpdateAssessmentTestBaseType = "boolean"
	UpdateAssessmentTestBaseTypeInteger      UpdateAssessmentTestBaseType = "integer"
	UpdateAssessmentTestBaseTypeFloat        UpdateAssessmentTestBaseType = "float"
	UpdateAssessmentTestBaseTypeString       UpdateAssessmentTestBaseType = "string"
	UpdateAssessmentTestBaseTypePoint        UpdateAssessmentTestBaseType = "point"
	UpdateAssessmentTestBaseTypePair         UpdateAssessmentTestBaseType = "pair"
	UpdateAssessmentTestBaseTypeDirectedPair UpdateAssessmentTestBaseType = "directedPair"
	UpdateAssessmentTestBaseTypeDuration     UpdateAssessmentTestBaseType = "duration"
	UpdateAssessmentTestBaseTypeFile         UpdateAssessmentTestBaseType = "file"
	UpdateAssessmentTestBaseTypeURI          UpdateAssessmentTestBaseType = "uri"
)

func (e UpdateAssessmentTestBaseType) ToPointer() *UpdateAssessmentTestBaseType {
	return &e
}
func (e *UpdateAssessmentTestBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = UpdateAssessmentTestBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAssessmentTestBaseType: %v", v)
	}
}

// UpdateAssessmentTestDefaultValue - Optional default value configuration for outcome variables
type UpdateAssessmentTestDefaultValue struct {
	// The default value to assign to the outcome variable
	Value any `json:"value,omitempty"`
}

func (o *UpdateAssessmentTestDefaultValue) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateAssessmentTestQtiOutcomeDeclaration struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
	Cardinality *UpdateAssessmentTestCardinality `default:"single" json:"cardinality"`
	// Data type of the outcome variable, determining how values are stored and processed
	BaseType UpdateAssessmentTestBaseType `json:"baseType"`
	// Expected maximum value for this outcome variable in normal circumstances
	NormalMaximum *float64 `json:"normalMaximum,omitempty"`
	// Expected minimum value for this outcome variable in normal circumstances
	NormalMinimum *float64 `json:"normalMinimum,omitempty"`
	// Optional default value configuration for outcome variables
	DefaultValue *UpdateAssessmentTestDefaultValue `json:"defaultValue,omitempty"`
}

func (u UpdateAssessmentTestQtiOutcomeDeclaration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentTestQtiOutcomeDeclaration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentTestQtiOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiOutcomeDeclaration) GetCardinality() *UpdateAssessmentTestCardinality {
	if o == nil {
		return nil
	}
	return o.Cardinality
}

func (o *UpdateAssessmentTestQtiOutcomeDeclaration) GetBaseType() UpdateAssessmentTestBaseType {
	if o == nil {
		return UpdateAssessmentTestBaseType("")
	}
	return o.BaseType
}

func (o *UpdateAssessmentTestQtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *UpdateAssessmentTestQtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

func (o *UpdateAssessmentTestQtiOutcomeDeclaration) GetDefaultValue() *UpdateAssessmentTestDefaultValue {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type UpdateAssessmentTestAttributes struct {
	Xmlns             string `json:"xmlns"`
	XmlnsXsi          string `json:"xmlns:xsi"`
	XsiSchemaLocation string `json:"xsi:schemaLocation"`
	Identifier        string `json:"identifier"`
	Title             string `json:"title"`
	ToolName          string `json:"tool-name"`
	ToolVersion       string `json:"tool-version"`
}

func (o *UpdateAssessmentTestAttributes) GetXmlns() string {
	if o == nil {
		return ""
	}
	return o.Xmlns
}

func (o *UpdateAssessmentTestAttributes) GetXmlnsXsi() string {
	if o == nil {
		return ""
	}
	return o.XmlnsXsi
}

func (o *UpdateAssessmentTestAttributes) GetXsiSchemaLocation() string {
	if o == nil {
		return ""
	}
	return o.XsiSchemaLocation
}

func (o *UpdateAssessmentTestAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestAttributes) GetToolName() string {
	if o == nil {
		return ""
	}
	return o.ToolName
}

func (o *UpdateAssessmentTestAttributes) GetToolVersion() string {
	if o == nil {
		return ""
	}
	return o.ToolVersion
}

type UpdateAssessmentTestQtiOutcomeDeclarationAttributes struct {
	Identifier  string `json:"identifier"`
	Cardinality string `json:"cardinality"`
	BaseType    string `json:"base-type"`
}

func (o *UpdateAssessmentTestQtiOutcomeDeclarationAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiOutcomeDeclarationAttributes) GetCardinality() string {
	if o == nil {
		return ""
	}
	return o.Cardinality
}

func (o *UpdateAssessmentTestQtiOutcomeDeclarationAttributes) GetBaseType() string {
	if o == nil {
		return ""
	}
	return o.BaseType
}

type UpdateAssessmentTestQtiDefaultValue struct {
	QtiValue any `json:"qti-value,omitempty"`
}

func (o *UpdateAssessmentTestQtiDefaultValue) GetQtiValue() any {
	if o == nil {
		return nil
	}
	return o.QtiValue
}

type UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration struct {
	Attributes      UpdateAssessmentTestQtiOutcomeDeclarationAttributes `json:"_attributes"`
	QtiDefaultValue *UpdateAssessmentTestQtiDefaultValue                `json:"qti-default-value,omitempty"`
	NormalMaximum   *float64                                            `json:"normal-maximum,omitempty"`
	NormalMinimum   *float64                                            `json:"normal-minimum,omitempty"`
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetAttributes() UpdateAssessmentTestQtiOutcomeDeclarationAttributes {
	if o == nil {
		return UpdateAssessmentTestQtiOutcomeDeclarationAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetQtiDefaultValue() *UpdateAssessmentTestQtiDefaultValue {
	if o == nil {
		return nil
	}
	return o.QtiDefaultValue
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

type UpdateAssessmentTestQtiTestPartAttributes struct {
	Identifier     string `json:"identifier"`
	NavigationMode string `json:"navigation-mode"`
	SubmissionMode string `json:"submission-mode"`
}

func (o *UpdateAssessmentTestQtiTestPartAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiTestPartAttributes) GetNavigationMode() string {
	if o == nil {
		return ""
	}
	return o.NavigationMode
}

func (o *UpdateAssessmentTestQtiTestPartAttributes) GetSubmissionMode() string {
	if o == nil {
		return ""
	}
	return o.SubmissionMode
}

type UpdateAssessmentTestQtiAssessmentSectionAttributes struct {
	Identifier string `json:"identifier"`
	Title      string `json:"title"`
	Visible    string `json:"visible"`
}

func (o *UpdateAssessmentTestQtiAssessmentSectionAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiAssessmentSectionAttributes) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestQtiAssessmentSectionAttributes) GetVisible() string {
	if o == nil {
		return ""
	}
	return o.Visible
}

type UpdateAssessmentTestQtiAssessmentItemRefAttributes struct {
	Identifier string `json:"identifier"`
	Href       string `json:"href"`
}

func (o *UpdateAssessmentTestQtiAssessmentItemRefAttributes) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestQtiAssessmentItemRefAttributes) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

type UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef struct {
	Attributes UpdateAssessmentTestQtiAssessmentItemRefAttributes `json:"_attributes"`
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef) GetAttributes() UpdateAssessmentTestQtiAssessmentItemRefAttributes {
	if o == nil {
		return UpdateAssessmentTestQtiAssessmentItemRefAttributes{}
	}
	return o.Attributes
}

type UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection struct {
	Attributes           UpdateAssessmentTestQtiAssessmentSectionAttributes          `json:"_attributes"`
	QtiAssessmentItemRef []UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection) GetAttributes() UpdateAssessmentTestQtiAssessmentSectionAttributes {
	if o == nil {
		return UpdateAssessmentTestQtiAssessmentSectionAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection) GetQtiAssessmentItemRef() []UpdateAssessmentTestQtiAssessmentTestQtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}

type UpdateAssessmentTestQtiAssessmentTestQtiTestPart struct {
	Attributes           UpdateAssessmentTestQtiTestPartAttributes                   `json:"_attributes"`
	QtiAssessmentSection []UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection `json:"qti-assessment-section"`
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiTestPart) GetAttributes() UpdateAssessmentTestQtiTestPartAttributes {
	if o == nil {
		return UpdateAssessmentTestQtiTestPartAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestQtiAssessmentTestQtiTestPart) GetQtiAssessmentSection() []UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection {
	if o == nil {
		return []UpdateAssessmentTestQtiAssessmentTestQtiAssessmentSection{}
	}
	return o.QtiAssessmentSection
}

type UpdateAssessmentTestQtiAssessmentTest struct {
	Attributes            UpdateAssessmentTestAttributes                               `json:"_attributes"`
	QtiOutcomeDeclaration []UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration `json:"qti-outcome-declaration"`
	QtiTestPart           []UpdateAssessmentTestQtiAssessmentTestQtiTestPart           `json:"qti-test-part"`
}

func (o *UpdateAssessmentTestQtiAssessmentTest) GetAttributes() UpdateAssessmentTestAttributes {
	if o == nil {
		return UpdateAssessmentTestAttributes{}
	}
	return o.Attributes
}

func (o *UpdateAssessmentTestQtiAssessmentTest) GetQtiOutcomeDeclaration() []UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration {
	if o == nil {
		return []UpdateAssessmentTestQtiAssessmentTestQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *UpdateAssessmentTestQtiAssessmentTest) GetQtiTestPart() []UpdateAssessmentTestQtiAssessmentTestQtiTestPart {
	if o == nil {
		return []UpdateAssessmentTestQtiAssessmentTestQtiTestPart{}
	}
	return o.QtiTestPart
}

// UpdateAssessmentTestContent - Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
type UpdateAssessmentTestContent struct {
	QtiAssessmentTest UpdateAssessmentTestQtiAssessmentTest `json:"qti-assessment-test"`
}

func (o *UpdateAssessmentTestContent) GetQtiAssessmentTest() UpdateAssessmentTestQtiAssessmentTest {
	if o == nil {
		return UpdateAssessmentTestQtiAssessmentTest{}
	}
	return o.QtiAssessmentTest
}

// UpdateAssessmentTestResponseBody - Complete assessment test data including all test parts, sections, items, and configuration settings
type UpdateAssessmentTestResponseBody struct {
	// MongoDB document ID generated by the database when a new entity is added to a collection on the service provider.
	ID string `json:"_id"`
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Version of the specification used for this assessment test
	QtiVersion  *string                           `default:"3.0" json:"qtiVersion"`
	QtiTestPart []UpdateAssessmentTestQtiTestPart `json:"qti-test-part"`
	// Array of outcome variable declarations for storing assessment results and computed values
	QtiOutcomeDeclaration []UpdateAssessmentTestQtiOutcomeDeclaration `json:"qti-outcome-declaration"`
	// Time limit for the entire assessment test in seconds. When not specified, there is no time limit
	TimeLimit *float64 `json:"timeLimit,omitempty"`
	// Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
	MaxAttempts *float64 `json:"maxAttempts,omitempty"`
	// Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
	ToolsEnabled map[string]bool `json:"toolsEnabled,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Raw XML representation of the entity, automatically generated from the JSON or XML sent when creating entities on the service provider. The rawxml field will contain all content sent when creating the entity on the service provider. This field is stable and should be used when working within this QTI API.
	RawXML string `json:"rawXml"`
	// Parsed XML content structure for the assessment test. For production use, rawXml is recommended over this parsed structure.
	Content UpdateAssessmentTestContent `json:"content"`
	// ISO 8601 timestamp when the entity was created
	CreatedAt time.Time `json:"createdAt"`
	// ISO 8601 timestamp when the entity was last updated
	UpdatedAt time.Time `json:"updatedAt"`
	// MongoDB version key for optimistic concurrency control
	V *float64 `json:"__v,omitempty"`
	// Indicates whether the generated XML is valid according to schema validation
	IsValidXML bool `json:"isValidXml"`
}

func (u UpdateAssessmentTestResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAssessmentTestResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateAssessmentTestResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateAssessmentTestResponseBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *UpdateAssessmentTestResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateAssessmentTestResponseBody) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *UpdateAssessmentTestResponseBody) GetQtiTestPart() []UpdateAssessmentTestQtiTestPart {
	if o == nil {
		return []UpdateAssessmentTestQtiTestPart{}
	}
	return o.QtiTestPart
}

func (o *UpdateAssessmentTestResponseBody) GetQtiOutcomeDeclaration() []UpdateAssessmentTestQtiOutcomeDeclaration {
	if o == nil {
		return []UpdateAssessmentTestQtiOutcomeDeclaration{}
	}
	return o.QtiOutcomeDeclaration
}

func (o *UpdateAssessmentTestResponseBody) GetTimeLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeLimit
}

func (o *UpdateAssessmentTestResponseBody) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *UpdateAssessmentTestResponseBody) GetToolsEnabled() map[string]bool {
	if o == nil {
		return nil
	}
	return o.ToolsEnabled
}

func (o *UpdateAssessmentTestResponseBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateAssessmentTestResponseBody) GetRawXML() string {
	if o == nil {
		return ""
	}
	return o.RawXML
}

func (o *UpdateAssessmentTestResponseBody) GetContent() UpdateAssessmentTestContent {
	if o == nil {
		return UpdateAssessmentTestContent{}
	}
	return o.Content
}

func (o *UpdateAssessmentTestResponseBody) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *UpdateAssessmentTestResponseBody) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *UpdateAssessmentTestResponseBody) GetV() *float64 {
	if o == nil {
		return nil
	}
	return o.V
}

func (o *UpdateAssessmentTestResponseBody) GetIsValidXML() bool {
	if o == nil {
		return false
	}
	return o.IsValidXML
}

type UpdateAssessmentTestResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Assessment test updated successfully
	Object *UpdateAssessmentTestResponseBody
}

func (o *UpdateAssessmentTestResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateAssessmentTestResponse) GetObject() *UpdateAssessmentTestResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
