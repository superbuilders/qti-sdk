// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// Type - Assessment item interaction types that are supported by the service provider.
type Type string

const (
	TypeChoice           Type = "choice"
	TypeTextEntry        Type = "text-entry"
	TypeExtendedText     Type = "extended-text"
	TypeInlineChoice     Type = "inline-choice"
	TypeMatch            Type = "match"
	TypeOrder            Type = "order"
	TypeAssociate        Type = "associate"
	TypeSelectPoint      Type = "select-point"
	TypeGraphicOrder     Type = "graphic-order"
	TypeGraphicAssociate Type = "graphic-associate"
	TypeGraphicGapMatch  Type = "graphic-gap-match"
	TypeHotspot          Type = "hotspot"
	TypeHottext          Type = "hottext"
	TypeSlider           Type = "slider"
	TypeDrawing          Type = "drawing"
	TypeMedia            Type = "media"
	TypeUpload           Type = "upload"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "choice":
		fallthrough
	case "text-entry":
		fallthrough
	case "extended-text":
		fallthrough
	case "inline-choice":
		fallthrough
	case "match":
		fallthrough
	case "order":
		fallthrough
	case "associate":
		fallthrough
	case "select-point":
		fallthrough
	case "graphic-order":
		fallthrough
	case "graphic-associate":
		fallthrough
	case "graphic-gap-match":
		fallthrough
	case "hotspot":
		fallthrough
	case "hottext":
		fallthrough
	case "slider":
		fallthrough
	case "drawing":
		fallthrough
	case "media":
		fallthrough
	case "upload":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// ResponseDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type ResponseDeclarationCardinality string

const (
	ResponseDeclarationCardinalitySingle   ResponseDeclarationCardinality = "single"
	ResponseDeclarationCardinalityMultiple ResponseDeclarationCardinality = "multiple"
	ResponseDeclarationCardinalityOrdered  ResponseDeclarationCardinality = "ordered"
	ResponseDeclarationCardinalityRecord   ResponseDeclarationCardinality = "record"
)

func (e ResponseDeclarationCardinality) ToPointer() *ResponseDeclarationCardinality {
	return &e
}
func (e *ResponseDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = ResponseDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseDeclarationCardinality: %v", v)
	}
}

// ResponseDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type ResponseDeclarationBaseType string

const (
	ResponseDeclarationBaseTypeIdentifier   ResponseDeclarationBaseType = "identifier"
	ResponseDeclarationBaseTypeBoolean      ResponseDeclarationBaseType = "boolean"
	ResponseDeclarationBaseTypeInteger      ResponseDeclarationBaseType = "integer"
	ResponseDeclarationBaseTypeFloat        ResponseDeclarationBaseType = "float"
	ResponseDeclarationBaseTypeString       ResponseDeclarationBaseType = "string"
	ResponseDeclarationBaseTypePoint        ResponseDeclarationBaseType = "point"
	ResponseDeclarationBaseTypePair         ResponseDeclarationBaseType = "pair"
	ResponseDeclarationBaseTypeDirectedPair ResponseDeclarationBaseType = "directedPair"
	ResponseDeclarationBaseTypeDuration     ResponseDeclarationBaseType = "duration"
	ResponseDeclarationBaseTypeFile         ResponseDeclarationBaseType = "file"
	ResponseDeclarationBaseTypeURI          ResponseDeclarationBaseType = "uri"
)

func (e ResponseDeclarationBaseType) ToPointer() *ResponseDeclarationBaseType {
	return &e
}
func (e *ResponseDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = ResponseDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseDeclarationBaseType: %v", v)
	}
}

// CorrectResponse - Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
type CorrectResponse struct {
	Value []string `json:"value"`
}

func (o *CorrectResponse) GetValue() []string {
	if o == nil {
		return []string{}
	}
	return o.Value
}

type ResponseDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality ResponseDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *ResponseDeclarationBaseType `json:"baseType,omitempty"`
	// Optional model answer; must conform to the variable's cardinality (single = one value, multiple/ordered = ordered or unordered list); omit when no optimal answer exists (e.g., essays); delivery engines may display it as the solution in review mode.
	CorrectResponse CorrectResponse `json:"correctResponse"`
}

func (o *ResponseDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *ResponseDeclaration) GetCardinality() ResponseDeclarationCardinality {
	if o == nil {
		return ResponseDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *ResponseDeclaration) GetBaseType() *ResponseDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

func (o *ResponseDeclaration) GetCorrectResponse() CorrectResponse {
	if o == nil {
		return CorrectResponse{}
	}
	return o.CorrectResponse
}

// OutcomeDeclarationCardinality - Specifies how many values the response variable can hold and whether order matters.
type OutcomeDeclarationCardinality string

const (
	OutcomeDeclarationCardinalitySingle   OutcomeDeclarationCardinality = "single"
	OutcomeDeclarationCardinalityMultiple OutcomeDeclarationCardinality = "multiple"
	OutcomeDeclarationCardinalityOrdered  OutcomeDeclarationCardinality = "ordered"
	OutcomeDeclarationCardinalityRecord   OutcomeDeclarationCardinality = "record"
)

func (e OutcomeDeclarationCardinality) ToPointer() *OutcomeDeclarationCardinality {
	return &e
}
func (e *OutcomeDeclarationCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = OutcomeDeclarationCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutcomeDeclarationCardinality: %v", v)
	}
}

// OutcomeDeclarationBaseType - Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
type OutcomeDeclarationBaseType string

const (
	OutcomeDeclarationBaseTypeIdentifier   OutcomeDeclarationBaseType = "identifier"
	OutcomeDeclarationBaseTypeBoolean      OutcomeDeclarationBaseType = "boolean"
	OutcomeDeclarationBaseTypeInteger      OutcomeDeclarationBaseType = "integer"
	OutcomeDeclarationBaseTypeFloat        OutcomeDeclarationBaseType = "float"
	OutcomeDeclarationBaseTypeString       OutcomeDeclarationBaseType = "string"
	OutcomeDeclarationBaseTypePoint        OutcomeDeclarationBaseType = "point"
	OutcomeDeclarationBaseTypePair         OutcomeDeclarationBaseType = "pair"
	OutcomeDeclarationBaseTypeDirectedPair OutcomeDeclarationBaseType = "directedPair"
	OutcomeDeclarationBaseTypeDuration     OutcomeDeclarationBaseType = "duration"
	OutcomeDeclarationBaseTypeFile         OutcomeDeclarationBaseType = "file"
	OutcomeDeclarationBaseTypeURI          OutcomeDeclarationBaseType = "uri"
)

func (e OutcomeDeclarationBaseType) ToPointer() *OutcomeDeclarationBaseType {
	return &e
}
func (e *OutcomeDeclarationBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = OutcomeDeclarationBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutcomeDeclarationBaseType: %v", v)
	}
}

type OutcomeDeclaration struct {
	// Unique identifier for this response variable within the item; must be distinct from other item variables and cannot use reserved names (completionStatus, numAttempts, duration).
	Identifier string `json:"identifier"`
	// Specifies how many values the response variable can hold and whether order matters.
	Cardinality OutcomeDeclarationCardinality `json:"cardinality"`
	// Primitive data type for each answer stored in the variable (e.g., integer, string, boolean). Omit when cardinality is 'record', because each field in a record may have its own type.
	BaseType *OutcomeDeclarationBaseType `json:"baseType,omitempty"`
}

func (o *OutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *OutcomeDeclaration) GetCardinality() OutcomeDeclarationCardinality {
	if o == nil {
		return OutcomeDeclarationCardinality("")
	}
	return o.Cardinality
}

func (o *OutcomeDeclaration) GetBaseType() *OutcomeDeclarationBaseType {
	if o == nil {
		return nil
	}
	return o.BaseType
}

// TemplateType - Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
type TemplateType string

const (
	TemplateTypeMatchCorrect TemplateType = "match_correct"
	TemplateTypeMapResponse  TemplateType = "map_response"
)

func (e TemplateType) ToPointer() *TemplateType {
	return &e
}
func (e *TemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "match_correct":
		fallthrough
	case "map_response":
		*e = TemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateType: %v", v)
	}
}

// InlineFeedback - Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
type InlineFeedback struct {
	// Identifier of the outcome variable to be set with the inline feedback value.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier of the variable whose value will be assigned to the outcome variable during response processing.
	VariableIdentifier string `json:"variableIdentifier"`
}

func (o *InlineFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *InlineFeedback) GetVariableIdentifier() string {
	if o == nil {
		return ""
	}
	return o.VariableIdentifier
}

// ResponseProcessing - Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
type ResponseProcessing struct {
	// Response processing template type. 'match_correct' compares the candidate's response directly against the correct response and assigns binary feedback. 'map_response' uses mapping rules to assign scores and feedback based on response values.
	TemplateType TemplateType `json:"templateType"`
	// Identifier of the response declaration that this response processing rule applies to. Must match an existing responseDeclaration identifier within the same assessment item.
	ResponseDeclarationIdentifier string `json:"responseDeclarationIdentifier"`
	// Identifier of the outcome variable that will be set by this response processing rule. Common values include 'SCORE' for numeric scoring or 'FEEDBACK' for feedback identifiers.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as correct. Used primarily with match_correct template type.
	CorrectResponseIdentifier string `json:"correctResponseIdentifier"`
	// Identifier value assigned to the outcome variable when the candidate's response is evaluated as incorrect. Used primarily with match_correct template type.
	IncorrectResponseIdentifier string `json:"incorrectResponseIdentifier"`
	// Optional inline feedback configuration that sets an outcome variable based on another variable's value during response processing.
	InlineFeedback *InlineFeedback `json:"inlineFeedback,omitempty"`
}

func (o *ResponseProcessing) GetTemplateType() TemplateType {
	if o == nil {
		return TemplateType("")
	}
	return o.TemplateType
}

func (o *ResponseProcessing) GetResponseDeclarationIdentifier() string {
	if o == nil {
		return ""
	}
	return o.ResponseDeclarationIdentifier
}

func (o *ResponseProcessing) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *ResponseProcessing) GetCorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.CorrectResponseIdentifier
}

func (o *ResponseProcessing) GetIncorrectResponseIdentifier() string {
	if o == nil {
		return ""
	}
	return o.IncorrectResponseIdentifier
}

func (o *ResponseProcessing) GetInlineFeedback() *InlineFeedback {
	if o == nil {
		return nil
	}
	return o.InlineFeedback
}

// ModalFeedbackShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type ModalFeedbackShowHide string

const (
	ModalFeedbackShowHideShow ModalFeedbackShowHide = "show"
	ModalFeedbackShowHideHide ModalFeedbackShowHide = "hide"
)

func (e ModalFeedbackShowHide) ToPointer() *ModalFeedbackShowHide {
	return &e
}
func (e *ModalFeedbackShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = ModalFeedbackShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModalFeedbackShowHide: %v", v)
	}
}

type ModalFeedback struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide ModalFeedbackShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// Optional title displayed in the modal feedback dialog header. Only used with modal feedback presentations.
	Title string `json:"title"`
}

func (o *ModalFeedback) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *ModalFeedback) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *ModalFeedback) GetShowHide() ModalFeedbackShowHide {
	if o == nil {
		return ModalFeedbackShowHide("")
	}
	return o.ShowHide
}

func (o *ModalFeedback) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *ModalFeedback) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

// FeedbackInlineShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type FeedbackInlineShowHide string

const (
	FeedbackInlineShowHideShow FeedbackInlineShowHide = "show"
	FeedbackInlineShowHideHide FeedbackInlineShowHide = "hide"
)

func (e FeedbackInlineShowHide) ToPointer() *FeedbackInlineShowHide {
	return &e
}
func (e *FeedbackInlineShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = FeedbackInlineShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeedbackInlineShowHide: %v", v)
	}
}

type FeedbackInline struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide FeedbackInlineShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *FeedbackInline) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *FeedbackInline) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *FeedbackInline) GetShowHide() FeedbackInlineShowHide {
	if o == nil {
		return FeedbackInlineShowHide("")
	}
	return o.ShowHide
}

func (o *FeedbackInline) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *FeedbackInline) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

// FeedbackBlockShowHide - Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
type FeedbackBlockShowHide string

const (
	FeedbackBlockShowHideShow FeedbackBlockShowHide = "show"
	FeedbackBlockShowHideHide FeedbackBlockShowHide = "hide"
)

func (e FeedbackBlockShowHide) ToPointer() *FeedbackBlockShowHide {
	return &e
}
func (e *FeedbackBlockShowHide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show":
		fallthrough
	case "hide":
		*e = FeedbackBlockShowHide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeedbackBlockShowHide: %v", v)
	}
}

type FeedbackBlock struct {
	// Identifier of the outcome variable that controls when this feedback is displayed. The feedback is shown or hidden based on the value of this outcome variable after response processing.
	OutcomeIdentifier string `json:"outcomeIdentifier"`
	// Unique identifier for this specific feedback element within the assessment item. Used to reference and control this particular piece of feedback.
	Identifier string `json:"identifier"`
	// Determines the feedback visibility behavior. 'show' displays the feedback when the outcome variable matches the identifier, 'hide' conceals it when the outcome variable matches.
	ShowHide FeedbackBlockShowHide `json:"showHide"`
	// The HTML or text content to be displayed as feedback to the candidate.
	Content string `json:"content"`
	// CSS class names applied to the feedback element for styling purposes. Multiple classes can be specified for flexible presentation control.
	Class []string `json:"class"`
}

func (o *FeedbackBlock) GetOutcomeIdentifier() string {
	if o == nil {
		return ""
	}
	return o.OutcomeIdentifier
}

func (o *FeedbackBlock) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *FeedbackBlock) GetShowHide() FeedbackBlockShowHide {
	if o == nil {
		return FeedbackBlockShowHide("")
	}
	return o.ShowHide
}

func (o *FeedbackBlock) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *FeedbackBlock) GetClass() []string {
	if o == nil {
		return []string{}
	}
	return o.Class
}

type AssessmentItem struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Assessment item interaction types that are supported by the service provider.
	Type Type `json:"type"`
	// QTI version of the assessment item
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Indicates whether the candidate's response time affects the scoring or outcome of this assessment item. When true, timing data is used in response processing calculations.
	TimeDependent *bool `default:"false" json:"timeDependent"`
	// Indicates whether this assessment item adapts its presentation or behavior based on the candidate's responses. Adaptive items can modify their content, difficulty, or available options during the assessment session.
	Adaptive             *bool                 `default:"false" json:"adaptive"`
	ResponseDeclarations []ResponseDeclaration `json:"responseDeclarations,omitempty"`
	OutcomeDeclarations  []OutcomeDeclaration  `json:"outcomeDeclarations,omitempty"`
	// Response processing is the process by which the Delivery Engine assigns outcomes based on the candidate's responses. The outcomes may be used to provide feedback to the candidate. Response processing must only take place in direct response to a user action or in response to some expected event, such as the end of a test.
	ResponseProcessing ResponseProcessing `json:"responseProcessing"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Modal feedback shown to candidates in popup dialogs immediately following response processing. Cannot contain interaction elements and is displayed based on outcome variable values.
	ModalFeedback []ModalFeedback `json:"modalFeedback,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackInline []FeedbackInline `json:"feedbackInline,omitempty"`
	// Inline feedback embedded within interaction elements, displayed alongside choices or input areas. Provides contextual feedback.
	FeedbackBlock []FeedbackBlock `json:"feedbackBlock,omitempty"`
}

func (a AssessmentItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AssessmentItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AssessmentItem) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *AssessmentItem) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *AssessmentItem) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *AssessmentItem) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *AssessmentItem) GetTimeDependent() *bool {
	if o == nil {
		return nil
	}
	return o.TimeDependent
}

func (o *AssessmentItem) GetAdaptive() *bool {
	if o == nil {
		return nil
	}
	return o.Adaptive
}

func (o *AssessmentItem) GetResponseDeclarations() []ResponseDeclaration {
	if o == nil {
		return nil
	}
	return o.ResponseDeclarations
}

func (o *AssessmentItem) GetOutcomeDeclarations() []OutcomeDeclaration {
	if o == nil {
		return nil
	}
	return o.OutcomeDeclarations
}

func (o *AssessmentItem) GetResponseProcessing() ResponseProcessing {
	if o == nil {
		return ResponseProcessing{}
	}
	return o.ResponseProcessing
}

func (o *AssessmentItem) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *AssessmentItem) GetModalFeedback() []ModalFeedback {
	if o == nil {
		return nil
	}
	return o.ModalFeedback
}

func (o *AssessmentItem) GetFeedbackInline() []FeedbackInline {
	if o == nil {
		return nil
	}
	return o.FeedbackInline
}

func (o *AssessmentItem) GetFeedbackBlock() []FeedbackBlock {
	if o == nil {
		return nil
	}
	return o.FeedbackBlock
}
