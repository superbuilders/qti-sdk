// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
)

// Stylesheet - The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
type Stylesheet struct {
	// The identifier or location of the external stylesheet.
	Href string `json:"href"`
	// The type of the external stylesheet.
	Type string `json:"type"`
}

func (o *Stylesheet) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *Stylesheet) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CatalogInfo struct {
	// Catalog entry identifier (must be valid XML NCName). The unique identifier used to locate the catalog from a data-catalog-idref.
	ID string `json:"id"`
	// This attribute names either pre-defined supports or a custom-named support. The named support will indicate for whom the dormant content is intended. Use only one card for any particular named support in a catalog
	Support string `json:"support"`
	// A data structure within a catalog which contains dormant HTML content or a resource reference for a specific support/feature. A card may also contain multiple CardEntry containers. For example, you might have multiple CardEntry nodes for different language versions of a particular support.
	Content string `json:"content"`
}

func (o *CatalogInfo) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CatalogInfo) GetSupport() string {
	if o == nil {
		return ""
	}
	return o.Support
}

func (o *CatalogInfo) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

// Stimulus - Create or update a stimulus on the service provider with HTML content and optional configuration
type Stimulus struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// A human readable label that can be used to describe the Stimulus.
	Label *string `json:"label,omitempty"`
	// The default language for the Stimulus.
	Language *string `default:"en" json:"language"`
	// The set of external style sheets that are associated with the Stimulus. The order of definition is significant.
	Stylesheet *Stylesheet `json:"stylesheet,omitempty"`
	// HTML content of the stimulus provided as a string when creating or updating a stimulus. When the rawXml is generated, this content is used to create teh qti-stimulus-body that lives on the xml.
	Content string `json:"content"`
	// Array of catalog cards.
	CatalogInfo []CatalogInfo `json:"catalogInfo,omitempty"`
	// The tool name characteristic allows the tool creating the stimulus to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the stimulus's stimulus body.
	ToolName *string `json:"toolName,omitempty"`
	// The tool version characteristic allows the tool creating the item to identify its version. This value must only be interpreted in the context of the tool-name.
	ToolVersion *string `json:"toolVersion,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
}

func (s Stimulus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Stimulus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Stimulus) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *Stimulus) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Stimulus) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *Stimulus) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *Stimulus) GetStylesheet() *Stylesheet {
	if o == nil {
		return nil
	}
	return o.Stylesheet
}

func (o *Stimulus) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *Stimulus) GetCatalogInfo() []CatalogInfo {
	if o == nil {
		return nil
	}
	return o.CatalogInfo
}

func (o *Stimulus) GetToolName() *string {
	if o == nil {
		return nil
	}
	return o.ToolName
}

func (o *Stimulus) GetToolVersion() *string {
	if o == nil {
		return nil
	}
	return o.ToolVersion
}

func (o *Stimulus) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}
