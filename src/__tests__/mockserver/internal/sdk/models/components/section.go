// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
)

// QtiAssessmentItemRef - Assessment item reference schema for linking assessment items to sections
type QtiAssessmentItemRef struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// URI reference to the assessment item resource location on the service provider
	Href *string `json:"href,omitempty"`
}

func (o *QtiAssessmentItemRef) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *QtiAssessmentItemRef) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// Section - Core assessment section schema containing all essential section attributes
type Section struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Determines whether the assessment section is visible to candidates during test delivery. Sections are visible by default unless explicitly hidden for specific assessment conditions.
	Visible *bool `default:"true" json:"visible"`
	// If a child element is required it must appear (at least once) in the selection.
	Required *bool `default:"true" json:"required"`
	// If a child element is fixed it must never be shuffled. When used in combination with a selection rule fixed elements do not have their position fixed until after selection has taken place.
	Fixed *bool `default:"false" json:"fixed"`
	// Defines the sequential order of this item within its parent section. Must be a positive integer that determines presentation order to candidates.
	Sequence *int64 `json:"sequence,omitempty"`
	// Collection of assessment items that are referenced within this section.
	QtiAssessmentItemRef []QtiAssessmentItemRef `json:"qti-assessment-item-ref,omitempty"`
}

func (s Section) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Section) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Section) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *Section) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Section) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *Section) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *Section) GetFixed() *bool {
	if o == nil {
		return nil
	}
	return o.Fixed
}

func (o *Section) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *Section) GetQtiAssessmentItemRef() []QtiAssessmentItemRef {
	if o == nil {
		return nil
	}
	return o.QtiAssessmentItemRef
}
