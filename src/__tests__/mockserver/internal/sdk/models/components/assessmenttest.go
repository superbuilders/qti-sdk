// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// AssessmentTestCardinality - Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
type AssessmentTestCardinality string

const (
	AssessmentTestCardinalitySingle   AssessmentTestCardinality = "single"
	AssessmentTestCardinalityMultiple AssessmentTestCardinality = "multiple"
	AssessmentTestCardinalityOrdered  AssessmentTestCardinality = "ordered"
	AssessmentTestCardinalityRecord   AssessmentTestCardinality = "record"
)

func (e AssessmentTestCardinality) ToPointer() *AssessmentTestCardinality {
	return &e
}
func (e *AssessmentTestCardinality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		fallthrough
	case "ordered":
		fallthrough
	case "record":
		*e = AssessmentTestCardinality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssessmentTestCardinality: %v", v)
	}
}

// AssessmentTestBaseType - Data type of the outcome variable, determining how values are stored and processed
type AssessmentTestBaseType string

const (
	AssessmentTestBaseTypeIdentifier   AssessmentTestBaseType = "identifier"
	AssessmentTestBaseTypeBoolean      AssessmentTestBaseType = "boolean"
	AssessmentTestBaseTypeInteger      AssessmentTestBaseType = "integer"
	AssessmentTestBaseTypeFloat        AssessmentTestBaseType = "float"
	AssessmentTestBaseTypeString       AssessmentTestBaseType = "string"
	AssessmentTestBaseTypePoint        AssessmentTestBaseType = "point"
	AssessmentTestBaseTypePair         AssessmentTestBaseType = "pair"
	AssessmentTestBaseTypeDirectedPair AssessmentTestBaseType = "directedPair"
	AssessmentTestBaseTypeDuration     AssessmentTestBaseType = "duration"
	AssessmentTestBaseTypeFile         AssessmentTestBaseType = "file"
	AssessmentTestBaseTypeURI          AssessmentTestBaseType = "uri"
)

func (e AssessmentTestBaseType) ToPointer() *AssessmentTestBaseType {
	return &e
}
func (e *AssessmentTestBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "identifier":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "string":
		fallthrough
	case "point":
		fallthrough
	case "pair":
		fallthrough
	case "directedPair":
		fallthrough
	case "duration":
		fallthrough
	case "file":
		fallthrough
	case "uri":
		*e = AssessmentTestBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssessmentTestBaseType: %v", v)
	}
}

// DefaultValue - Optional default value configuration for outcome variables
type DefaultValue struct {
	// The default value to assign to the outcome variable
	Value any `json:"value,omitempty"`
}

func (o *DefaultValue) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type QtiOutcomeDeclaration struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Defines how scoring information is structured and stored. 'single' for one overall score, 'multiple' for separate scores or points, 'ordered' for scores maintaining a specific sequence, 'record' for complex scoring with multiple named components.
	Cardinality *AssessmentTestCardinality `default:"single" json:"cardinality"`
	// Data type of the outcome variable, determining how values are stored and processed
	BaseType AssessmentTestBaseType `json:"baseType"`
	// Expected maximum value for this outcome variable in normal circumstances
	NormalMaximum *float64 `json:"normalMaximum,omitempty"`
	// Expected minimum value for this outcome variable in normal circumstances
	NormalMinimum *float64 `json:"normalMinimum,omitempty"`
	// Optional default value configuration for outcome variables
	DefaultValue *DefaultValue `json:"defaultValue,omitempty"`
}

func (q QtiOutcomeDeclaration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QtiOutcomeDeclaration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *QtiOutcomeDeclaration) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *QtiOutcomeDeclaration) GetCardinality() *AssessmentTestCardinality {
	if o == nil {
		return nil
	}
	return o.Cardinality
}

func (o *QtiOutcomeDeclaration) GetBaseType() AssessmentTestBaseType {
	if o == nil {
		return AssessmentTestBaseType("")
	}
	return o.BaseType
}

func (o *QtiOutcomeDeclaration) GetNormalMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMaximum
}

func (o *QtiOutcomeDeclaration) GetNormalMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.NormalMinimum
}

func (o *QtiOutcomeDeclaration) GetDefaultValue() *DefaultValue {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

// AssessmentTest - Create a new assessment test on the service provider. The test must include at least one test part and can optionally include outcome declarations for result tracking
type AssessmentTest struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Human-readable title of the entity on the service provider.
	Title string `json:"title"`
	// Version of the specification used for this assessment test
	QtiVersion *string `default:"3.0" json:"qtiVersion"`
	// Name of the authoring tool that created this entity. The tool name characteristic allows the tool creating the test to identify itself. Other processing systems may use this information to interpret the content of application specific data, such as labels on the elements of the test rubric.
	ToolName *string `json:"toolName,omitempty"`
	// Version of the authoring tool that created this entity. The tool version characteristic allows the tool creating the test to identify its version. This value must only be interpreted in the context of the tool name.
	ToolVersion *string `json:"toolVersion,omitempty"`
	// Time limit for the entire assessment test in seconds. When not specified, there is no time limit
	TimeLimit *float64 `json:"timeLimit,omitempty"`
	// Maximum number of attempts allowed for the assessment test. When not specified, unlimited attempts are allowed
	MaxAttempts *float64 `json:"maxAttempts,omitempty"`
	// Configuration of assessment tools available to candidates. Each tool is represented as a key-value pair where the key is the tool name and the value indicates if it's enabled
	ToolsEnabled map[string]bool `json:"toolsEnabled,omitempty"`
	// Additional custom metadata for extending entity properties beyond standard specification for QTI entities.
	Metadata map[string]any `json:"metadata,omitempty"`
	// Array of test parts to include in this assessment test. At least one test part is required
	QtiTestPart []TestPart `json:"qti-test-part"`
	// Array of outcome variable declarations for storing assessment results and computed values
	QtiOutcomeDeclaration []QtiOutcomeDeclaration `json:"qti-outcome-declaration,omitempty"`
}

func (a AssessmentTest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AssessmentTest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AssessmentTest) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *AssessmentTest) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *AssessmentTest) GetQtiVersion() *string {
	if o == nil {
		return nil
	}
	return o.QtiVersion
}

func (o *AssessmentTest) GetToolName() *string {
	if o == nil {
		return nil
	}
	return o.ToolName
}

func (o *AssessmentTest) GetToolVersion() *string {
	if o == nil {
		return nil
	}
	return o.ToolVersion
}

func (o *AssessmentTest) GetTimeLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeLimit
}

func (o *AssessmentTest) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *AssessmentTest) GetToolsEnabled() map[string]bool {
	if o == nil {
		return nil
	}
	return o.ToolsEnabled
}

func (o *AssessmentTest) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *AssessmentTest) GetQtiTestPart() []TestPart {
	if o == nil {
		return []TestPart{}
	}
	return o.QtiTestPart
}

func (o *AssessmentTest) GetQtiOutcomeDeclaration() []QtiOutcomeDeclaration {
	if o == nil {
		return nil
	}
	return o.QtiOutcomeDeclaration
}
