// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// NavigationMode - Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
type NavigationMode string

const (
	NavigationModeLinear    NavigationMode = "linear"
	NavigationModeNonlinear NavigationMode = "nonlinear"
)

func (e NavigationMode) ToPointer() *NavigationMode {
	return &e
}
func (e *NavigationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linear":
		fallthrough
	case "nonlinear":
		*e = NavigationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NavigationMode: %v", v)
	}
}

// SubmissionMode - Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
type SubmissionMode string

const (
	SubmissionModeIndividual   SubmissionMode = "individual"
	SubmissionModeSimultaneous SubmissionMode = "simultaneous"
)

func (e SubmissionMode) ToPointer() *SubmissionMode {
	return &e
}
func (e *SubmissionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "simultaneous":
		*e = SubmissionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmissionMode: %v", v)
	}
}

// TestPart - Complete test part structure as parsed from XML.
type TestPart struct {
	// Unique identifier for the entity on the service provider.
	Identifier string `json:"identifier"`
	// Controls how learners navigate through the test part. 'linear' requires items to be responded to in sequence without jumping around, while 'nonlinear' allows candidates to respond to items in any order they choose.
	NavigationMode NavigationMode `json:"navigationMode"`
	// Determines how learner responses are submitted for response processing. 'individual' allows responses to be submitted as each item is completed, while 'simultaneous' means responses for all items are sent when the whole part is completed.
	SubmissionMode       SubmissionMode `json:"submissionMode"`
	QtiAssessmentSection []Section      `json:"qti-assessment-section"`
}

func (o *TestPart) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *TestPart) GetNavigationMode() NavigationMode {
	if o == nil {
		return NavigationMode("")
	}
	return o.NavigationMode
}

func (o *TestPart) GetSubmissionMode() SubmissionMode {
	if o == nil {
		return SubmissionMode("")
	}
	return o.SubmissionMode
}

func (o *TestPart) GetQtiAssessmentSection() []Section {
	if o == nil {
		return []Section{}
	}
	return o.QtiAssessmentSection
}
